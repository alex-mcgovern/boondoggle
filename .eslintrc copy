{
  "env": {
    "browser": true,
    "node": true
  },

  "extends": [
    "airbnb",
    "airbnb/hooks",
    "airbnb-typescript",
    "eslint:recommended",
    "plugin:react-perf/recommended",
    "prettier"
  ],

  "globals": {
    "cy": true,
    "Cypress": true,
    "fs": true
  },

  "ignorePatterns": [
    "**/public",
    "dist",
    "*.snap",
    "*.test.*",
    "*.mock.*",
    "*.svg",
    "coverage"
  ],

  "overrides": [
    {
      "files": [".tsx", ".ts"],
      "extends": "plugin:@typescript-eslint/recommended-requiring-type-checking"
    },
    {
      "files": "*.md",
      "extends": "plugin:markdown/recommended"
    },
    {
      "files": "*.mdx",
      "parser": "eslint-mdx",
      "extends": "plugin:mdx/recommended",
      "settings": {
        "mdx/code-blocks": true
      }
    },
    {
      "files": ["**/*.css.ts"],
      "rules": {
        "sonarjs/no-duplicate-string": "off"
      }
    },

    {
      "files": ["**/*/test.ts", "**/*.test.tsx"],
      "env": {
        "jest": true
      },
      "rules": {
        "sonarjs/no-duplicate-string": "off",
        "react-perf/jsx-no-jsx-as-prop": "off",
        "react-perf/jsx-no-new-array-as-prop": "off",
        "react-perf/jsx-no-new-function-as-prop": "off",
        "react-perf/jsx-no-new-object-as-prop": "off"
      }
    },
    {
      "files": ["**/*.stories.*", "tsup.config.ts", "jest.*"],
      "rules": {
        "import/no-default-export": "off",
        "import/prefer-default-export": "error"
      }
    }
  ],

  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "babelOptions": {
      "presets": ["@babel/preset-react"]
    },
    "project": "./tsconfig.json",
    "requireConfigFile": true
  },

  "plugins": [
    "react-perf",
    "sonarjs",
    "jsdoc",
    "@typescript-eslint",
    "unused-imports",
    "import"
  ],

  "rules": {
    "import/no-cycle": "error",
    "import/no-duplicates": "error",
    "react/button-has-type": "error",
    "react/jsx-filename-extension": ["error", { "extensions": [".tsx"] }],
    "react/jsx-props-no-spreading": "off",
    /**
     * Prevent eslint from complaining about dev dependencies imported in test files
     */
    "import/no-extraneous-dependencies": [
      "error",
      {
        "devDependencies": [
          "**/*.test.ts",
          "**/*.test.tsx",
          "./test/**/*",
          "tsup.config.ts"
        ]
      }
    ],

    /**
     * Allow simpler prop typings for Typescript components.
"* ToDo":  Consider generating react prop types at compile time for component library.
     * */
    "react/prop-types": "off",
    "react/require-default-props": "off",
    /**
     * Enforce "type imports", ensuring transpilers *absolutely* do not
     * import or include types in runtime JS.
     */
    "@typescript-eslint/consistent-type-imports": [
      "error",
      {
        "disallowTypeAnnotations": true,
        "prefer": "type-imports"
      }
    ],
    /**
     * Rules aimed at improving code readability and style consistency.
     */
    "@typescript-eslint/prefer-optional-chain": "error",
    "arrow-body-style": ["error", "always"],
    "curly": ["error", "all"],
    "react/destructuring-assignment": [
      "error",
      "always",
      {
        "destructureInSignature": "always",
        "ignoreClassFields": true
      }
    ],
    /**
     * Warn on patterns that may cause frontend performance degradation.
     */
    "react-perf/jsx-no-jsx-as-prop": "warn",
    "react-perf/jsx-no-new-array-as-prop": "warn",
    "react-perf/jsx-no-new-function-as-prop": "warn",
    "react-perf/jsx-no-new-object-as-prop": "warn",
    /**
     * Ensure errant console.log & console.debug's are not left lying about,
     * while allowing log levels used for intentionally logging a result.
     */
    "no-console": [
      "error",
      {
        "allow": ["warn", "error", "info"]
      }
    ],
    /**
     * Ensure named exports are used, which helps speed up code refactoring
     * and ensures things are referenced consistently throughout codebase
     */
    "import/prefer-default-export": "off",
    "import/no-default-export": "error",
    /**
     * Disable default unused vars/imports rules in favour of unused-imports
     * plugin, which enables fixing these issues on lint via the --fix flag.
     */
    "no-unused-vars": "off",
    "@typescript-eslint/no-unused-vars": "off",
    "unused-imports/no-unused-imports": "error",
    "unused-imports/no-unused-vars": [
      "error",
      {
        "args": "after-used",
        "argsIgnorePattern": "^_",
        "vars": "all",
        "varsIgnorePattern": "^_"
      }
    ]
  },

  "settings": {
    "import/parsers": {
      "@typescript-eslint/parser": [".ts", ".tsx"]
    }
  }
}
