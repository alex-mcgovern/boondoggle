import{j as e}from"./jsx-runtime-_e34SzbC.js";import{r as d}from"./index-DVXBtNgz.js";import{$ as p}from"./Link-BVd7meNa.js";import{b as n,T as a,a as o}from"./index-MWzn_IEJ.js";import{B as l}from"./index-DLrc5TdI.js";const c={args:{children:"I am a tooltip"},component:n,title:"Components/Tooltip"},u={render:t=>e.jsxs(a,{delay:0,children:[e.jsx(o,{}),e.jsx(n,{...t})]})},m={render:t=>e.jsxs("div",{style:{display:"flex",gap:8},children:[e.jsxs(a,{children:[e.jsx(l,{appearance:"secondary",children:"Hover me"}),e.jsx(n,{...t,children:"I come up after a delay."})]}),e.jsxs(a,{children:[e.jsx(l,{appearance:"secondary",children:"Then hover me"}),e.jsx(n,{...t,children:"If you did it quickly, I appear immediately."})]})]})},h={render:t=>e.jsxs(a,{trigger:"focus",children:[e.jsx(l,{appearance:"secondary",children:"Focus me"}),e.jsx(n,{...t,children:"I come up when the button is focused."})]})};function r(t){const[i,s]=d.useState(!1);return e.jsxs("div",{style:{alignItems:"center",display:"flex",gap:8},children:[e.jsxs(a,{isOpen:i,onOpenChange:s,children:[e.jsx(l,{appearance:"secondary",children:"Focus me"}),e.jsx(n,{...t,children:"Notifications"})]}),e.jsxs("span",{children:["Tooltip is ",i?"showing":"not showing"]})]})}const f={render:r},y={render:t=>e.jsxs(a,{children:[e.jsx(l,{children:"Test"}),e.jsx(n,{...t})]})},g={render:t=>e.jsxs(a,{children:[e.jsx(p,{children:"Test"}),e.jsx(n,{...t})]})},b={args:{placement:"top"},render:t=>e.jsxs(a,{delay:0,children:[e.jsx(o,{}),e.jsx(n,{...t})]})};try{r.displayName="ControlledOpenStateTemplate",r.__docgenInfo={description:"",displayName:"ControlledOpenStateTemplate",props:{triggerRef:{defaultValue:null,description:`The ref for the element which the tooltip positions itself with respect to.

When used within a TooltipTrigger this is set automatically. It is only required when used standalone.`,name:"triggerRef",required:!1,type:{name:"RefObject<Element>"}},isEntering:{defaultValue:null,description:"Whether the tooltip is currently performing an entry animation.",name:"isEntering",required:!1,type:{name:"boolean"}},isExiting:{defaultValue:null,description:"Whether the tooltip is currently performing an exit animation.",name:"isExiting",required:!1,type:{name:"boolean"}},UNSTABLE_portalContainer:{defaultValue:{value:"document.body"},description:"The container element in which the overlay portal will be placed. This may have unknown behavior depending on where it is portalled to.",name:"UNSTABLE_portalContainer",required:!1,type:{name:"Element"}},placement:{defaultValue:{value:"'bottom'"},description:"The placement of the element with respect to its anchor element.",name:"placement",required:!1,type:{name:"Placement"}},containerPadding:{defaultValue:{value:"12"},description:`The placement padding that should be applied between the element and its
surrounding container.`,name:"containerPadding",required:!1,type:{name:"number"}},offset:{defaultValue:{value:"0"},description:`The additional offset applied along the main axis between the element and its
anchor element.`,name:"offset",required:!1,type:{name:"number"}},crossOffset:{defaultValue:{value:"0"},description:`The additional offset applied along the cross axis between the element and its
anchor element.`,name:"crossOffset",required:!1,type:{name:"number"}},shouldFlip:{defaultValue:{value:"true"},description:`Whether the element should flip its orientation (e.g. top to bottom or left to right) when
there is insufficient room for it to render completely.`,name:"shouldFlip",required:!1,type:{name:"boolean"}},isOpen:{defaultValue:null,description:"Whether the element is rendered.",name:"isOpen",required:!1,type:{name:"boolean"}},arrowBoundaryOffset:{defaultValue:{value:"0"},description:"The minimum distance the arrow's edge should be from the edge of the overlay element.",name:"arrowBoundaryOffset",required:!1,type:{name:"number"}},defaultOpen:{defaultValue:null,description:"Whether the overlay is open by default (uncontrolled).",name:"defaultOpen",required:!1,type:{name:"boolean"}},onOpenChange:{defaultValue:null,description:"Handler that is called when the overlay's open state changes.",name:"onOpenChange",required:!1,type:{name:"(isOpen: boolean) => void"}},"aria-label":{defaultValue:null,description:"Defines a string value that labels the current element.",name:"aria-label",required:!1,type:{name:"string"}},"aria-labelledby":{defaultValue:null,description:"Identifies the element (or elements) that labels the current element.",name:"aria-labelledby",required:!1,type:{name:"string"}},"aria-describedby":{defaultValue:null,description:"Identifies the element (or elements) that describes the object.",name:"aria-describedby",required:!1,type:{name:"string"}},"aria-details":{defaultValue:null,description:"Identifies the element (or elements) that provide a detailed, extended description for the object.",name:"aria-details",required:!1,type:{name:"string"}},children:{defaultValue:null,description:"The children of the component. A function may be provided to alter the children based on component state.",name:"children",required:!1,type:{name:"ReactNode | ((values: TooltipRenderProps & { defaultChildren: ReactNode; }) => ReactNode)"}},className:{defaultValue:null,description:"The CSS [className](https://developer.mozilla.org/en-US/docs/Web/API/Element/className) for the element. A function may be provided to compute the class based on component state.",name:"className",required:!1,type:{name:"string | ((values: TooltipRenderProps & { defaultClassName: string; }) => string)"}},style:{defaultValue:null,description:"The inline [style](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/style) for the element. A function may be provided to compute the style based on component state.",name:"style",required:!1,type:{name:"CSSProperties | ((values: TooltipRenderProps & { defaultStyle: CSSProperties; }) => CSSProperties)"}}}}}catch{}const O=Object.freeze(Object.defineProperty({__proto__:null,ControlledOpenState:f,ControlledOpenStateTemplate:r,Default:u,Delay:m,Placement:b,Trigger:h,WithButtonAsTrigger:y,WithLinkAsTrigger:g,default:c},Symbol.toStringTag,{value:"Module"}));export{f as C,u as D,b as P,h as T,m as a,r as b,O as s};
