(self.webpackChunk_alex_mcgovern_boondoggle_design =
  self.webpackChunk_alex_mcgovern_boondoggle_design || []).push([
  [7636],
  {
    "./src/components/select/shared/select_input.styles.css.ts": (
      __unused_webpack_module,
      __webpack_exports__,
      __webpack_require__
    ) => {
      "use strict";
      __webpack_require__.d(__webpack_exports__, {
        C: () => selectInputCursorStyles,
      });
      var injectStylesIntoStyleTag = __webpack_require__(
          "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js"
        ),
        injectStylesIntoStyleTag_default = __webpack_require__.n(
          injectStylesIntoStyleTag
        ),
        styleDomAPI = __webpack_require__(
          "./node_modules/style-loader/dist/runtime/styleDomAPI.js"
        ),
        styleDomAPI_default = __webpack_require__.n(styleDomAPI),
        insertBySelector = __webpack_require__(
          "./node_modules/style-loader/dist/runtime/insertBySelector.js"
        ),
        insertBySelector_default = __webpack_require__.n(insertBySelector),
        setAttributesWithoutAttributes = __webpack_require__(
          "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js"
        ),
        setAttributesWithoutAttributes_default = __webpack_require__.n(
          setAttributesWithoutAttributes
        ),
        insertStyleElement = __webpack_require__(
          "./node_modules/style-loader/dist/runtime/insertStyleElement.js"
        ),
        insertStyleElement_default = __webpack_require__.n(insertStyleElement),
        styleTagTransform = __webpack_require__(
          "./node_modules/style-loader/dist/runtime/styleTagTransform.js"
        ),
        styleTagTransform_default = __webpack_require__.n(styleTagTransform),
        extracted = __webpack_require__(
          './node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[8].use[1]!./node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{"fileName":"src/components/select/shared/select_input.styles.css.ts.vanilla.css","source":"Ll8xYmtyYTVhMDpyZWFkLW9ubHkgewogIGN1cnNvcjogcG9pbnRlcjsKfQ=="}!./node_modules/@vanilla-extract/webpack-plugin/extracted.js'
        ),
        options = {};
      (options.styleTagTransform = styleTagTransform_default()),
        (options.setAttributes = setAttributesWithoutAttributes_default()),
        (options.insert = insertBySelector_default().bind(null, "head")),
        (options.domAPI = styleDomAPI_default()),
        (options.insertStyleElement = insertStyleElement_default());
      injectStylesIntoStyleTag_default()(extracted.Z, options);
      extracted.Z && extracted.Z.locals && extracted.Z.locals;
      var selectInputCursorStyles = "_1bkra5a0";
    },
    "./src/components/form/__storybook__/form.stories.tsx": (
      __unused_webpack_module,
      __webpack_exports__,
      __webpack_require__
    ) => {
      "use strict";
      __webpack_require__.r(__webpack_exports__),
        __webpack_require__.d(__webpack_exports__, {
          Default: () => Default,
          WithDefaultValues: () => WithDefaultValues,
          __namedExportsOrder: () => __namedExportsOrder,
          default: () => form_stories,
        });
      var esm = __webpack_require__(
          "./node_modules/@storybook/jest/dist/esm/index.js"
        ),
        dist_esm = __webpack_require__(
          "./node_modules/@storybook/testing-library/dist/esm/index.js"
        ),
        test_utils = __webpack_require__(
          "./node_modules/react-dom/test-utils.js"
        ),
        index_esm = __webpack_require__(
          "./node_modules/react-hook-form/dist/index.esm.mjs"
        ),
        box_comp = __webpack_require__("./src/components/box/box.comp.tsx"),
        jsx_runtime = __webpack_require__(
          "./node_modules/react/jsx-runtime.js"
        );
      const preventEnterKeySubmission = (e) => {
        const target = e.target;
        "Enter" !== e.key ||
          ["TEXTAREA"].includes(target.tagName) ||
          e.preventDefault();
      };
      function Form({
        children,
        handleErrors,
        handleFormSubmission,
        name,
        resolver,
      }) {
        const formMethods = (0, index_esm.cI)({ resolver });
        return (0, jsx_runtime.jsx)(index_esm.RV, {
          ...formMethods,
          children: (0, jsx_runtime.jsx)(box_comp.x, {
            as: "form",
            name,
            onKeyPress: preventEnterKeySubmission,
            onSubmit: formMethods.handleSubmit(
              handleFormSubmission,
              handleErrors
            ),
            children,
          }),
        });
      }
      Form.displayName = "Form";
      try {
        (Form.displayName = "Form"),
          (Form.__docgenInfo = {
            description: "",
            displayName: "Form",
            props: {
              disabled: {
                defaultValue: null,
                description: "",
                name: "disabled",
                required: !1,
                type: { name: "boolean" },
              },
              handleErrors: {
                defaultValue: null,
                description: "",
                name: "handleErrors",
                required: !1,
                type: {
                  name: "((errors: FieldErrors) => Promise<void>) | ((errors: FieldErrors) => void)",
                },
              },
              handleFormSubmission: {
                defaultValue: null,
                description: "",
                name: "handleFormSubmission",
                required: !0,
                type: {
                  name: "((fieldValues: TFieldValues) => Promise<void>) | ((fieldValues: TFieldValues) => void)",
                },
              },
              name: {
                defaultValue: null,
                description: "",
                name: "name",
                required: !0,
                type: { name: "string" },
              },
              resolver: {
                defaultValue: null,
                description: "",
                name: "resolver",
                required: !0,
                type: { name: "Resolver<TFieldValues, any>" },
              },
            },
          }),
          "undefined" != typeof STORYBOOK_REACT_CLASSES &&
            (STORYBOOK_REACT_CLASSES["src/components/form/form.comp.tsx#Form"] =
              {
                docgenInfo: Form.__docgenInfo,
                name: "Form",
                path: "src/components/form/form.comp.tsx#Form",
              });
      } catch (__react_docgen_typescript_loader_error) {}
      var LOREM_mock = __webpack_require__("./mocks/LOREM.mock.ts"),
        radio_button_cards_mock = __webpack_require__(
          "./src/components/radio_button_cards/__mocks__/radio_button_cards.mock.tsx"
        ),
        select_mock = __webpack_require__(
          "./src/components/select/__mocks__/select.mock.tsx"
        ),
        zod = __webpack_require__(
          "./node_modules/@hookform/resolvers/zod/dist/zod.mjs"
        ),
        lib = __webpack_require__("./node_modules/zod/lib/index.mjs"),
        input_comp = __webpack_require__(
          "./src/components/input/input.comp.tsx"
        );
      function FormInput({
        defaultValue,
        errorMessage,
        invalid,
        name,
        onChange,
        required,
        validateFunction,
        wrapperProps,
        ...rest
      }) {
        const { control } = (0, index_esm.Gc)(),
          {
            field: {
              onBlur,
              onChange: controlledOnChange,
              ref,
              value: controlledValue = "",
            },
            fieldState: { error },
          } = (0, index_esm.bc)({
            control,
            defaultValue,
            name,
            rules: {
              required: required && errorMessage,
              validate: (value) =>
                validateFunction
                  ? validateFunction(value) || errorMessage
                  : !!value,
            },
          });
        return (0, jsx_runtime.jsx)(input_comp.I, {
          "aria-required": required,
          errorMessage,
          invalid: invalid || !!error,
          name,
          onBlur,
          ref,
          required,
          value: controlledValue,
          wrapperProps,
          onChange: (e) => {
            onChange?.(e), controlledOnChange(e);
          },
          ...rest,
        });
      }
      FormInput.displayName = "FormInput";
      try {
        (FormInput.displayName = "FormInput"),
          (FormInput.__docgenInfo = {
            description: "",
            displayName: "FormInput",
            props: {
              content: {
                defaultValue: null,
                description: "",
                name: "content",
                required: !1,
                type: { name: "string" },
              },
              translate: {
                defaultValue: null,
                description: "",
                name: "translate",
                required: !1,
                type: {
                  name: "enum",
                  value: [{ value: '"yes"' }, { value: '"no"' }],
                },
              },
              hidden: {
                defaultValue: null,
                description: "",
                name: "hidden",
                required: !1,
                type: { name: "boolean" },
              },
              multiple: {
                defaultValue: null,
                description: "",
                name: "multiple",
                required: !1,
                type: { name: "boolean" },
              },
              disabled: {
                defaultValue: null,
                description: "",
                name: "disabled",
                required: !1,
                type: { name: "boolean" },
              },
              name: {
                defaultValue: null,
                description:
                  "Name of the form control. Submitted with the form as part of a name/value pair",
                name: "name",
                required: !1,
                type: { name: "string" },
              },
              form: {
                defaultValue: null,
                description: "",
                name: "form",
                required: !1,
                type: { name: "string" },
              },
              slot: {
                defaultValue: null,
                description: "",
                name: "slot",
                required: !1,
                type: { name: "string" },
              },
              title: {
                defaultValue: null,
                description: "",
                name: "title",
                required: !1,
                type: { name: "string" },
              },
              pattern: {
                defaultValue: null,
                description: "",
                name: "pattern",
                required: !1,
                type: { name: "string" },
              },
              key: {
                defaultValue: null,
                description: "",
                name: "key",
                required: !1,
                type: { name: "Key" },
              },
              autoComplete: {
                defaultValue: null,
                description: "",
                name: "autoComplete",
                required: !1,
                type: { name: "string" },
              },
              maxLength: {
                defaultValue: null,
                description: "",
                name: "maxLength",
                required: !1,
                type: { name: "number" },
              },
              minLength: {
                defaultValue: null,
                description: "",
                name: "minLength",
                required: !1,
                type: { name: "number" },
              },
              placeholder: {
                defaultValue: null,
                description:
                  "Placeholder text shown when input is empty.\nPlaceholder text to display when input is empty.",
                name: "placeholder",
                required: !1,
                type: { name: "string" },
              },
              readOnly: {
                defaultValue: null,
                description: "",
                name: "readOnly",
                required: !1,
                type: { name: "boolean" },
              },
              required: {
                defaultValue: null,
                description: "",
                name: "required",
                required: !1,
                type: { name: "boolean" },
              },
              value: {
                defaultValue: null,
                description: "",
                name: "value",
                required: !1,
                type: { name: "string | number | readonly string[]" },
              },
              onChange: {
                defaultValue: null,
                description: "",
                name: "onChange",
                required: !1,
                type: { name: "ChangeEventHandler<HTMLInputElement>" },
              },
              defaultChecked: {
                defaultValue: null,
                description: "",
                name: "defaultChecked",
                required: !1,
                type: { name: "boolean" },
              },
              defaultValue: {
                defaultValue: null,
                description: "",
                name: "defaultValue",
                required: !1,
                type: { name: "string | number | readonly string[]" },
              },
              suppressContentEditableWarning: {
                defaultValue: null,
                description: "",
                name: "suppressContentEditableWarning",
                required: !1,
                type: { name: "boolean" },
              },
              suppressHydrationWarning: {
                defaultValue: null,
                description: "",
                name: "suppressHydrationWarning",
                required: !1,
                type: { name: "boolean" },
              },
              accessKey: {
                defaultValue: null,
                description: "",
                name: "accessKey",
                required: !1,
                type: { name: "string" },
              },
              autoFocus: {
                defaultValue: null,
                description: "",
                name: "autoFocus",
                required: !1,
                type: { name: "boolean" },
              },
              className: {
                defaultValue: null,
                description: "",
                name: "className",
                required: !1,
                type: { name: "string" },
              },
              contentEditable: {
                defaultValue: null,
                description: "",
                name: "contentEditable",
                required: !1,
                type: { name: '"inherit" | Booleanish' },
              },
              contextMenu: {
                defaultValue: null,
                description: "",
                name: "contextMenu",
                required: !1,
                type: { name: "string" },
              },
              dir: {
                defaultValue: null,
                description: "",
                name: "dir",
                required: !1,
                type: { name: "string" },
              },
              draggable: {
                defaultValue: null,
                description: "",
                name: "draggable",
                required: !1,
                type: { name: "Booleanish" },
              },
              lang: {
                defaultValue: null,
                description: "",
                name: "lang",
                required: !1,
                type: { name: "string" },
              },
              nonce: {
                defaultValue: null,
                description: "",
                name: "nonce",
                required: !1,
                type: { name: "string" },
              },
              spellCheck: {
                defaultValue: null,
                description: "",
                name: "spellCheck",
                required: !1,
                type: { name: "Booleanish" },
              },
              tabIndex: {
                defaultValue: null,
                description: "",
                name: "tabIndex",
                required: !1,
                type: { name: "number" },
              },
              radioGroup: {
                defaultValue: null,
                description: "",
                name: "radioGroup",
                required: !1,
                type: { name: "string" },
              },
              role: {
                defaultValue: null,
                description: "",
                name: "role",
                required: !1,
                type: { name: "AriaRole" },
              },
              about: {
                defaultValue: null,
                description: "",
                name: "about",
                required: !1,
                type: { name: "string" },
              },
              datatype: {
                defaultValue: null,
                description: "",
                name: "datatype",
                required: !1,
                type: { name: "string" },
              },
              inlist: {
                defaultValue: null,
                description: "",
                name: "inlist",
                required: !1,
                type: { name: "any" },
              },
              prefix: {
                defaultValue: null,
                description: "",
                name: "prefix",
                required: !1,
                type: { name: "string" },
              },
              property: {
                defaultValue: null,
                description: "",
                name: "property",
                required: !1,
                type: { name: "string" },
              },
              rel: {
                defaultValue: null,
                description: "",
                name: "rel",
                required: !1,
                type: { name: "string" },
              },
              resource: {
                defaultValue: null,
                description: "",
                name: "resource",
                required: !1,
                type: { name: "string" },
              },
              rev: {
                defaultValue: null,
                description: "",
                name: "rev",
                required: !1,
                type: { name: "string" },
              },
              typeof: {
                defaultValue: null,
                description: "",
                name: "typeof",
                required: !1,
                type: { name: "string" },
              },
              vocab: {
                defaultValue: null,
                description: "",
                name: "vocab",
                required: !1,
                type: { name: "string" },
              },
              autoCapitalize: {
                defaultValue: null,
                description: "",
                name: "autoCapitalize",
                required: !1,
                type: { name: "string" },
              },
              autoCorrect: {
                defaultValue: null,
                description: "",
                name: "autoCorrect",
                required: !1,
                type: { name: "string" },
              },
              autoSave: {
                defaultValue: null,
                description: "",
                name: "autoSave",
                required: !1,
                type: { name: "string" },
              },
              itemProp: {
                defaultValue: null,
                description: "",
                name: "itemProp",
                required: !1,
                type: { name: "string" },
              },
              itemScope: {
                defaultValue: null,
                description: "",
                name: "itemScope",
                required: !1,
                type: { name: "boolean" },
              },
              itemType: {
                defaultValue: null,
                description: "",
                name: "itemType",
                required: !1,
                type: { name: "string" },
              },
              itemID: {
                defaultValue: null,
                description: "",
                name: "itemID",
                required: !1,
                type: { name: "string" },
              },
              itemRef: {
                defaultValue: null,
                description: "",
                name: "itemRef",
                required: !1,
                type: { name: "string" },
              },
              results: {
                defaultValue: null,
                description: "",
                name: "results",
                required: !1,
                type: { name: "number" },
              },
              security: {
                defaultValue: null,
                description: "",
                name: "security",
                required: !1,
                type: { name: "string" },
              },
              unselectable: {
                defaultValue: null,
                description: "",
                name: "unselectable",
                required: !1,
                type: {
                  name: "enum",
                  value: [{ value: '"on"' }, { value: '"off"' }],
                },
              },
              inputMode: {
                defaultValue: null,
                description:
                  "Hints at the type of data that might be entered by the user while editing the element or its contents\n@see https://html.spec.whatwg.org/multipage/interaction.html#input-modalities:-the-inputmode-attribute",
                name: "inputMode",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"none"' },
                    { value: '"search"' },
                    { value: '"text"' },
                    { value: '"tel"' },
                    { value: '"url"' },
                    { value: '"email"' },
                    { value: '"numeric"' },
                    { value: '"decimal"' },
                  ],
                },
              },
              is: {
                defaultValue: null,
                description:
                  "Specify that a standard HTML element should behave like a defined custom built-in element\n@see https://html.spec.whatwg.org/multipage/custom-elements.html#attr-is",
                name: "is",
                required: !1,
                type: { name: "string" },
              },
              "aria-activedescendant": {
                defaultValue: null,
                description:
                  "Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.",
                name: "aria-activedescendant",
                required: !1,
                type: { name: "string" },
              },
              "aria-atomic": {
                defaultValue: null,
                description:
                  "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.",
                name: "aria-atomic",
                required: !1,
                type: { name: "Booleanish" },
              },
              "aria-autocomplete": {
                defaultValue: null,
                description:
                  "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be\npresented if they are made.",
                name: "aria-autocomplete",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"none"' },
                    { value: '"both"' },
                    { value: '"inline"' },
                    { value: '"list"' },
                  ],
                },
              },
              "aria-busy": {
                defaultValue: null,
                description:
                  "Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.",
                name: "aria-busy",
                required: !1,
                type: { name: "Booleanish" },
              },
              "aria-checked": {
                defaultValue: null,
                description:
                  'Indicates the current "checked" state of checkboxes, radio buttons, and other widgets.\n@see aria-pressed\n@see aria-selected.',
                name: "aria-checked",
                required: !1,
                type: { name: 'boolean | "mixed" | "false" | "true"' },
              },
              "aria-colcount": {
                defaultValue: null,
                description:
                  "Defines the total number of columns in a table, grid, or treegrid.\n@see aria-colindex.",
                name: "aria-colcount",
                required: !1,
                type: { name: "number" },
              },
              "aria-colindex": {
                defaultValue: null,
                description:
                  "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.\n@see aria-colcount\n@see aria-colspan.",
                name: "aria-colindex",
                required: !1,
                type: { name: "number" },
              },
              "aria-colspan": {
                defaultValue: null,
                description:
                  "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.\n@see aria-colindex\n@see aria-rowspan.",
                name: "aria-colspan",
                required: !1,
                type: { name: "number" },
              },
              "aria-controls": {
                defaultValue: null,
                description:
                  "Identifies the element (or elements) whose contents or presence are controlled by the current element.\n@see aria-owns.",
                name: "aria-controls",
                required: !1,
                type: { name: "string" },
              },
              "aria-current": {
                defaultValue: null,
                description:
                  "Indicates the element that represents the current item within a container or set of related elements.",
                name: "aria-current",
                required: !1,
                type: {
                  name: 'boolean | "page" | "false" | "true" | "time" | "step" | "location" | "date"',
                },
              },
              "aria-describedby": {
                defaultValue: null,
                description:
                  "Identifies the element (or elements) that describes the object.\n@see aria-labelledby",
                name: "aria-describedby",
                required: !1,
                type: { name: "string" },
              },
              "aria-details": {
                defaultValue: null,
                description:
                  "Identifies the element that provides a detailed, extended description for the object.\n@see aria-describedby.",
                name: "aria-details",
                required: !1,
                type: { name: "string" },
              },
              "aria-disabled": {
                defaultValue: null,
                description:
                  "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.\n@see aria-hidden\n@see aria-readonly.",
                name: "aria-disabled",
                required: !1,
                type: { name: "Booleanish" },
              },
              "aria-dropeffect": {
                defaultValue: null,
                description:
                  "Indicates what functions can be performed when a dragged object is released on the drop target.\n@deprecated in ARIA 1.1",
                name: "aria-dropeffect",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"none"' },
                    { value: '"link"' },
                    { value: '"copy"' },
                    { value: '"move"' },
                    { value: '"execute"' },
                    { value: '"popup"' },
                  ],
                },
              },
              "aria-errormessage": {
                defaultValue: null,
                description:
                  "Identifies the element that provides an error message for the object.\n@see aria-invalid\n@see aria-describedby.",
                name: "aria-errormessage",
                required: !1,
                type: { name: "string" },
              },
              "aria-expanded": {
                defaultValue: null,
                description:
                  "Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.",
                name: "aria-expanded",
                required: !1,
                type: { name: "Booleanish" },
              },
              "aria-flowto": {
                defaultValue: null,
                description:
                  "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,\nallows assistive technology to override the general default of reading in document source order.",
                name: "aria-flowto",
                required: !1,
                type: { name: "string" },
              },
              "aria-grabbed": {
                defaultValue: null,
                description:
                  'Indicates an element\'s "grabbed" state in a drag-and-drop operation.\n@deprecated in ARIA 1.1',
                name: "aria-grabbed",
                required: !1,
                type: { name: "Booleanish" },
              },
              "aria-haspopup": {
                defaultValue: null,
                description:
                  "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.",
                name: "aria-haspopup",
                required: !1,
                type: {
                  name: 'boolean | "grid" | "listbox" | "menu" | "false" | "true" | "dialog" | "tree"',
                },
              },
              "aria-hidden": {
                defaultValue: null,
                description:
                  "Indicates whether the element is exposed to an accessibility API.\n@see aria-disabled.",
                name: "aria-hidden",
                required: !1,
                type: { name: "Booleanish" },
              },
              "aria-invalid": {
                defaultValue: null,
                description:
                  "Indicates the entered value does not conform to the format expected by the application.\n@see aria-errormessage.",
                name: "aria-invalid",
                required: !1,
                type: {
                  name: 'boolean | "false" | "true" | "grammar" | "spelling"',
                },
              },
              "aria-keyshortcuts": {
                defaultValue: null,
                description:
                  "Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.",
                name: "aria-keyshortcuts",
                required: !1,
                type: { name: "string" },
              },
              "aria-label": {
                defaultValue: null,
                description:
                  "Defines a string value that labels the current element.\n@see aria-labelledby.",
                name: "aria-label",
                required: !1,
                type: { name: "string" },
              },
              "aria-labelledby": {
                defaultValue: null,
                description:
                  "Identifies the element (or elements) that labels the current element.\n@see aria-describedby.",
                name: "aria-labelledby",
                required: !1,
                type: { name: "string" },
              },
              "aria-level": {
                defaultValue: null,
                description:
                  "Defines the hierarchical level of an element within a structure.",
                name: "aria-level",
                required: !1,
                type: { name: "number" },
              },
              "aria-live": {
                defaultValue: null,
                description:
                  "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.",
                name: "aria-live",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"off"' },
                    { value: '"assertive"' },
                    { value: '"polite"' },
                  ],
                },
              },
              "aria-modal": {
                defaultValue: null,
                description:
                  "Indicates whether an element is modal when displayed.",
                name: "aria-modal",
                required: !1,
                type: { name: "Booleanish" },
              },
              "aria-multiline": {
                defaultValue: null,
                description:
                  "Indicates whether a text box accepts multiple lines of input or only a single line.",
                name: "aria-multiline",
                required: !1,
                type: { name: "Booleanish" },
              },
              "aria-multiselectable": {
                defaultValue: null,
                description:
                  "Indicates that the user may select more than one item from the current selectable descendants.",
                name: "aria-multiselectable",
                required: !1,
                type: { name: "Booleanish" },
              },
              "aria-orientation": {
                defaultValue: null,
                description:
                  "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous.",
                name: "aria-orientation",
                required: !1,
                type: {
                  name: "enum",
                  value: [{ value: '"horizontal"' }, { value: '"vertical"' }],
                },
              },
              "aria-owns": {
                defaultValue: null,
                description:
                  "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship\nbetween DOM elements where the DOM hierarchy cannot be used to represent the relationship.\n@see aria-controls.",
                name: "aria-owns",
                required: !1,
                type: { name: "string" },
              },
              "aria-placeholder": {
                defaultValue: null,
                description:
                  "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.\nA hint could be a sample value or a brief description of the expected format.",
                name: "aria-placeholder",
                required: !1,
                type: { name: "string" },
              },
              "aria-posinset": {
                defaultValue: null,
                description:
                  "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\n@see aria-setsize.",
                name: "aria-posinset",
                required: !1,
                type: { name: "number" },
              },
              "aria-pressed": {
                defaultValue: null,
                description:
                  'Indicates the current "pressed" state of toggle buttons.\n@see aria-checked\n@see aria-selected.',
                name: "aria-pressed",
                required: !1,
                type: { name: 'boolean | "mixed" | "false" | "true"' },
              },
              "aria-readonly": {
                defaultValue: null,
                description:
                  "Indicates that the element is not editable, but is otherwise operable.\n@see aria-disabled.",
                name: "aria-readonly",
                required: !1,
                type: { name: "Booleanish" },
              },
              "aria-relevant": {
                defaultValue: null,
                description:
                  "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.\n@see aria-atomic.",
                name: "aria-relevant",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"all"' },
                    { value: '"text"' },
                    { value: '"additions"' },
                    { value: '"additions removals"' },
                    { value: '"additions text"' },
                    { value: '"removals"' },
                    { value: '"removals additions"' },
                    { value: '"removals text"' },
                    { value: '"text additions"' },
                    { value: '"text removals"' },
                  ],
                },
              },
              "aria-required": {
                defaultValue: null,
                description:
                  "Indicates that user input is required on the element before a form may be submitted.",
                name: "aria-required",
                required: !1,
                type: { name: "Booleanish" },
              },
              "aria-roledescription": {
                defaultValue: null,
                description:
                  "Defines a human-readable, author-localized description for the role of an element.",
                name: "aria-roledescription",
                required: !1,
                type: { name: "string" },
              },
              "aria-rowcount": {
                defaultValue: null,
                description:
                  "Defines the total number of rows in a table, grid, or treegrid.\n@see aria-rowindex.",
                name: "aria-rowcount",
                required: !1,
                type: { name: "number" },
              },
              "aria-rowindex": {
                defaultValue: null,
                description:
                  "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.\n@see aria-rowcount\n@see aria-rowspan.",
                name: "aria-rowindex",
                required: !1,
                type: { name: "number" },
              },
              "aria-rowspan": {
                defaultValue: null,
                description:
                  "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.\n@see aria-rowindex\n@see aria-colspan.",
                name: "aria-rowspan",
                required: !1,
                type: { name: "number" },
              },
              "aria-selected": {
                defaultValue: null,
                description:
                  'Indicates the current "selected" state of various widgets.\n@see aria-checked\n@see aria-pressed.',
                name: "aria-selected",
                required: !1,
                type: { name: "Booleanish" },
              },
              "aria-setsize": {
                defaultValue: null,
                description:
                  "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\n@see aria-posinset.",
                name: "aria-setsize",
                required: !1,
                type: { name: "number" },
              },
              "aria-sort": {
                defaultValue: null,
                description:
                  "Indicates if items in a table or grid are sorted in ascending or descending order.",
                name: "aria-sort",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"none"' },
                    { value: '"ascending"' },
                    { value: '"descending"' },
                    { value: '"other"' },
                  ],
                },
              },
              "aria-valuemax": {
                defaultValue: null,
                description:
                  "Defines the maximum allowed value for a range widget.",
                name: "aria-valuemax",
                required: !1,
                type: { name: "number" },
              },
              "aria-valuemin": {
                defaultValue: null,
                description:
                  "Defines the minimum allowed value for a range widget.",
                name: "aria-valuemin",
                required: !1,
                type: { name: "number" },
              },
              "aria-valuenow": {
                defaultValue: null,
                description:
                  "Defines the current value for a range widget.\n@see aria-valuetext.",
                name: "aria-valuenow",
                required: !1,
                type: { name: "number" },
              },
              "aria-valuetext": {
                defaultValue: null,
                description:
                  "Defines the human readable text alternative of aria-valuenow for a range widget.",
                name: "aria-valuetext",
                required: !1,
                type: { name: "string" },
              },
              dangerouslySetInnerHTML: {
                defaultValue: null,
                description: "",
                name: "dangerouslySetInnerHTML",
                required: !1,
                type: { name: "{ __html: string | TrustedHTML; }" },
              },
              onCopy: {
                defaultValue: null,
                description: "",
                name: "onCopy",
                required: !1,
                type: { name: "ClipboardEventHandler<HTMLInputElement>" },
              },
              onCopyCapture: {
                defaultValue: null,
                description: "",
                name: "onCopyCapture",
                required: !1,
                type: { name: "ClipboardEventHandler<HTMLInputElement>" },
              },
              onCut: {
                defaultValue: null,
                description: "",
                name: "onCut",
                required: !1,
                type: { name: "ClipboardEventHandler<HTMLInputElement>" },
              },
              onCutCapture: {
                defaultValue: null,
                description: "",
                name: "onCutCapture",
                required: !1,
                type: { name: "ClipboardEventHandler<HTMLInputElement>" },
              },
              onPaste: {
                defaultValue: null,
                description: "",
                name: "onPaste",
                required: !1,
                type: { name: "ClipboardEventHandler<HTMLInputElement>" },
              },
              onPasteCapture: {
                defaultValue: null,
                description: "",
                name: "onPasteCapture",
                required: !1,
                type: { name: "ClipboardEventHandler<HTMLInputElement>" },
              },
              onCompositionEnd: {
                defaultValue: null,
                description: "",
                name: "onCompositionEnd",
                required: !1,
                type: { name: "CompositionEventHandler<HTMLInputElement>" },
              },
              onCompositionEndCapture: {
                defaultValue: null,
                description: "",
                name: "onCompositionEndCapture",
                required: !1,
                type: { name: "CompositionEventHandler<HTMLInputElement>" },
              },
              onCompositionStart: {
                defaultValue: null,
                description: "",
                name: "onCompositionStart",
                required: !1,
                type: { name: "CompositionEventHandler<HTMLInputElement>" },
              },
              onCompositionStartCapture: {
                defaultValue: null,
                description: "",
                name: "onCompositionStartCapture",
                required: !1,
                type: { name: "CompositionEventHandler<HTMLInputElement>" },
              },
              onCompositionUpdate: {
                defaultValue: null,
                description: "",
                name: "onCompositionUpdate",
                required: !1,
                type: { name: "CompositionEventHandler<HTMLInputElement>" },
              },
              onCompositionUpdateCapture: {
                defaultValue: null,
                description: "",
                name: "onCompositionUpdateCapture",
                required: !1,
                type: { name: "CompositionEventHandler<HTMLInputElement>" },
              },
              onFocus: {
                defaultValue: null,
                description: "",
                name: "onFocus",
                required: !1,
                type: { name: "FocusEventHandler<HTMLInputElement>" },
              },
              onFocusCapture: {
                defaultValue: null,
                description: "",
                name: "onFocusCapture",
                required: !1,
                type: { name: "FocusEventHandler<HTMLInputElement>" },
              },
              onBlur: {
                defaultValue: null,
                description: "",
                name: "onBlur",
                required: !1,
                type: { name: "FocusEventHandler<HTMLInputElement>" },
              },
              onBlurCapture: {
                defaultValue: null,
                description: "",
                name: "onBlurCapture",
                required: !1,
                type: { name: "FocusEventHandler<HTMLInputElement>" },
              },
              onChangeCapture: {
                defaultValue: null,
                description: "",
                name: "onChangeCapture",
                required: !1,
                type: { name: "FormEventHandler<HTMLInputElement>" },
              },
              onBeforeInput: {
                defaultValue: null,
                description: "",
                name: "onBeforeInput",
                required: !1,
                type: { name: "FormEventHandler<HTMLInputElement>" },
              },
              onBeforeInputCapture: {
                defaultValue: null,
                description: "",
                name: "onBeforeInputCapture",
                required: !1,
                type: { name: "FormEventHandler<HTMLInputElement>" },
              },
              onInput: {
                defaultValue: null,
                description: "",
                name: "onInput",
                required: !1,
                type: { name: "FormEventHandler<HTMLInputElement>" },
              },
              onInputCapture: {
                defaultValue: null,
                description: "",
                name: "onInputCapture",
                required: !1,
                type: { name: "FormEventHandler<HTMLInputElement>" },
              },
              onReset: {
                defaultValue: null,
                description: "",
                name: "onReset",
                required: !1,
                type: { name: "FormEventHandler<HTMLInputElement>" },
              },
              onResetCapture: {
                defaultValue: null,
                description: "",
                name: "onResetCapture",
                required: !1,
                type: { name: "FormEventHandler<HTMLInputElement>" },
              },
              onSubmit: {
                defaultValue: null,
                description: "",
                name: "onSubmit",
                required: !1,
                type: { name: "FormEventHandler<HTMLInputElement>" },
              },
              onSubmitCapture: {
                defaultValue: null,
                description: "",
                name: "onSubmitCapture",
                required: !1,
                type: { name: "FormEventHandler<HTMLInputElement>" },
              },
              onInvalid: {
                defaultValue: null,
                description: "",
                name: "onInvalid",
                required: !1,
                type: { name: "FormEventHandler<HTMLInputElement>" },
              },
              onInvalidCapture: {
                defaultValue: null,
                description: "",
                name: "onInvalidCapture",
                required: !1,
                type: { name: "FormEventHandler<HTMLInputElement>" },
              },
              onLoad: {
                defaultValue: null,
                description: "",
                name: "onLoad",
                required: !1,
                type: { name: "ReactEventHandler<HTMLInputElement>" },
              },
              onLoadCapture: {
                defaultValue: null,
                description: "",
                name: "onLoadCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLInputElement>" },
              },
              onError: {
                defaultValue: null,
                description: "",
                name: "onError",
                required: !1,
                type: { name: "ReactEventHandler<HTMLInputElement>" },
              },
              onErrorCapture: {
                defaultValue: null,
                description: "",
                name: "onErrorCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLInputElement>" },
              },
              onKeyDown: {
                defaultValue: null,
                description: "",
                name: "onKeyDown",
                required: !1,
                type: { name: "KeyboardEventHandler<HTMLInputElement>" },
              },
              onKeyDownCapture: {
                defaultValue: null,
                description: "",
                name: "onKeyDownCapture",
                required: !1,
                type: { name: "KeyboardEventHandler<HTMLInputElement>" },
              },
              onKeyPress: {
                defaultValue: null,
                description: "@deprecated",
                name: "onKeyPress",
                required: !1,
                type: { name: "KeyboardEventHandler<HTMLInputElement>" },
              },
              onKeyPressCapture: {
                defaultValue: null,
                description: "@deprecated",
                name: "onKeyPressCapture",
                required: !1,
                type: { name: "KeyboardEventHandler<HTMLInputElement>" },
              },
              onKeyUp: {
                defaultValue: null,
                description: "",
                name: "onKeyUp",
                required: !1,
                type: { name: "KeyboardEventHandler<HTMLInputElement>" },
              },
              onKeyUpCapture: {
                defaultValue: null,
                description: "",
                name: "onKeyUpCapture",
                required: !1,
                type: { name: "KeyboardEventHandler<HTMLInputElement>" },
              },
              onAbort: {
                defaultValue: null,
                description: "",
                name: "onAbort",
                required: !1,
                type: { name: "ReactEventHandler<HTMLInputElement>" },
              },
              onAbortCapture: {
                defaultValue: null,
                description: "",
                name: "onAbortCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLInputElement>" },
              },
              onCanPlay: {
                defaultValue: null,
                description: "",
                name: "onCanPlay",
                required: !1,
                type: { name: "ReactEventHandler<HTMLInputElement>" },
              },
              onCanPlayCapture: {
                defaultValue: null,
                description: "",
                name: "onCanPlayCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLInputElement>" },
              },
              onCanPlayThrough: {
                defaultValue: null,
                description: "",
                name: "onCanPlayThrough",
                required: !1,
                type: { name: "ReactEventHandler<HTMLInputElement>" },
              },
              onCanPlayThroughCapture: {
                defaultValue: null,
                description: "",
                name: "onCanPlayThroughCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLInputElement>" },
              },
              onDurationChange: {
                defaultValue: null,
                description: "",
                name: "onDurationChange",
                required: !1,
                type: { name: "ReactEventHandler<HTMLInputElement>" },
              },
              onDurationChangeCapture: {
                defaultValue: null,
                description: "",
                name: "onDurationChangeCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLInputElement>" },
              },
              onEmptied: {
                defaultValue: null,
                description: "",
                name: "onEmptied",
                required: !1,
                type: { name: "ReactEventHandler<HTMLInputElement>" },
              },
              onEmptiedCapture: {
                defaultValue: null,
                description: "",
                name: "onEmptiedCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLInputElement>" },
              },
              onEncrypted: {
                defaultValue: null,
                description: "",
                name: "onEncrypted",
                required: !1,
                type: { name: "ReactEventHandler<HTMLInputElement>" },
              },
              onEncryptedCapture: {
                defaultValue: null,
                description: "",
                name: "onEncryptedCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLInputElement>" },
              },
              onEnded: {
                defaultValue: null,
                description: "",
                name: "onEnded",
                required: !1,
                type: { name: "ReactEventHandler<HTMLInputElement>" },
              },
              onEndedCapture: {
                defaultValue: null,
                description: "",
                name: "onEndedCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLInputElement>" },
              },
              onLoadedData: {
                defaultValue: null,
                description: "",
                name: "onLoadedData",
                required: !1,
                type: { name: "ReactEventHandler<HTMLInputElement>" },
              },
              onLoadedDataCapture: {
                defaultValue: null,
                description: "",
                name: "onLoadedDataCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLInputElement>" },
              },
              onLoadedMetadata: {
                defaultValue: null,
                description: "",
                name: "onLoadedMetadata",
                required: !1,
                type: { name: "ReactEventHandler<HTMLInputElement>" },
              },
              onLoadedMetadataCapture: {
                defaultValue: null,
                description: "",
                name: "onLoadedMetadataCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLInputElement>" },
              },
              onLoadStart: {
                defaultValue: null,
                description: "",
                name: "onLoadStart",
                required: !1,
                type: { name: "ReactEventHandler<HTMLInputElement>" },
              },
              onLoadStartCapture: {
                defaultValue: null,
                description: "",
                name: "onLoadStartCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLInputElement>" },
              },
              onPause: {
                defaultValue: null,
                description: "",
                name: "onPause",
                required: !1,
                type: { name: "ReactEventHandler<HTMLInputElement>" },
              },
              onPauseCapture: {
                defaultValue: null,
                description: "",
                name: "onPauseCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLInputElement>" },
              },
              onPlay: {
                defaultValue: null,
                description: "",
                name: "onPlay",
                required: !1,
                type: { name: "ReactEventHandler<HTMLInputElement>" },
              },
              onPlayCapture: {
                defaultValue: null,
                description: "",
                name: "onPlayCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLInputElement>" },
              },
              onPlaying: {
                defaultValue: null,
                description: "",
                name: "onPlaying",
                required: !1,
                type: { name: "ReactEventHandler<HTMLInputElement>" },
              },
              onPlayingCapture: {
                defaultValue: null,
                description: "",
                name: "onPlayingCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLInputElement>" },
              },
              onProgress: {
                defaultValue: null,
                description: "",
                name: "onProgress",
                required: !1,
                type: { name: "ReactEventHandler<HTMLInputElement>" },
              },
              onProgressCapture: {
                defaultValue: null,
                description: "",
                name: "onProgressCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLInputElement>" },
              },
              onRateChange: {
                defaultValue: null,
                description: "",
                name: "onRateChange",
                required: !1,
                type: { name: "ReactEventHandler<HTMLInputElement>" },
              },
              onRateChangeCapture: {
                defaultValue: null,
                description: "",
                name: "onRateChangeCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLInputElement>" },
              },
              onResize: {
                defaultValue: null,
                description: "",
                name: "onResize",
                required: !1,
                type: { name: "ReactEventHandler<HTMLInputElement>" },
              },
              onResizeCapture: {
                defaultValue: null,
                description: "",
                name: "onResizeCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLInputElement>" },
              },
              onSeeked: {
                defaultValue: null,
                description: "",
                name: "onSeeked",
                required: !1,
                type: { name: "ReactEventHandler<HTMLInputElement>" },
              },
              onSeekedCapture: {
                defaultValue: null,
                description: "",
                name: "onSeekedCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLInputElement>" },
              },
              onSeeking: {
                defaultValue: null,
                description: "",
                name: "onSeeking",
                required: !1,
                type: { name: "ReactEventHandler<HTMLInputElement>" },
              },
              onSeekingCapture: {
                defaultValue: null,
                description: "",
                name: "onSeekingCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLInputElement>" },
              },
              onStalled: {
                defaultValue: null,
                description: "",
                name: "onStalled",
                required: !1,
                type: { name: "ReactEventHandler<HTMLInputElement>" },
              },
              onStalledCapture: {
                defaultValue: null,
                description: "",
                name: "onStalledCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLInputElement>" },
              },
              onSuspend: {
                defaultValue: null,
                description: "",
                name: "onSuspend",
                required: !1,
                type: { name: "ReactEventHandler<HTMLInputElement>" },
              },
              onSuspendCapture: {
                defaultValue: null,
                description: "",
                name: "onSuspendCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLInputElement>" },
              },
              onTimeUpdate: {
                defaultValue: null,
                description: "",
                name: "onTimeUpdate",
                required: !1,
                type: { name: "ReactEventHandler<HTMLInputElement>" },
              },
              onTimeUpdateCapture: {
                defaultValue: null,
                description: "",
                name: "onTimeUpdateCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLInputElement>" },
              },
              onVolumeChange: {
                defaultValue: null,
                description: "",
                name: "onVolumeChange",
                required: !1,
                type: { name: "ReactEventHandler<HTMLInputElement>" },
              },
              onVolumeChangeCapture: {
                defaultValue: null,
                description: "",
                name: "onVolumeChangeCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLInputElement>" },
              },
              onWaiting: {
                defaultValue: null,
                description: "",
                name: "onWaiting",
                required: !1,
                type: { name: "ReactEventHandler<HTMLInputElement>" },
              },
              onWaitingCapture: {
                defaultValue: null,
                description: "",
                name: "onWaitingCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLInputElement>" },
              },
              onAuxClick: {
                defaultValue: null,
                description: "",
                name: "onAuxClick",
                required: !1,
                type: { name: "MouseEventHandler<HTMLInputElement>" },
              },
              onAuxClickCapture: {
                defaultValue: null,
                description: "",
                name: "onAuxClickCapture",
                required: !1,
                type: { name: "MouseEventHandler<HTMLInputElement>" },
              },
              onClick: {
                defaultValue: null,
                description: "",
                name: "onClick",
                required: !1,
                type: { name: "MouseEventHandler<HTMLInputElement>" },
              },
              onClickCapture: {
                defaultValue: null,
                description: "",
                name: "onClickCapture",
                required: !1,
                type: { name: "MouseEventHandler<HTMLInputElement>" },
              },
              onContextMenu: {
                defaultValue: null,
                description: "",
                name: "onContextMenu",
                required: !1,
                type: { name: "MouseEventHandler<HTMLInputElement>" },
              },
              onContextMenuCapture: {
                defaultValue: null,
                description: "",
                name: "onContextMenuCapture",
                required: !1,
                type: { name: "MouseEventHandler<HTMLInputElement>" },
              },
              onDoubleClick: {
                defaultValue: null,
                description: "",
                name: "onDoubleClick",
                required: !1,
                type: { name: "MouseEventHandler<HTMLInputElement>" },
              },
              onDoubleClickCapture: {
                defaultValue: null,
                description: "",
                name: "onDoubleClickCapture",
                required: !1,
                type: { name: "MouseEventHandler<HTMLInputElement>" },
              },
              onDrag: {
                defaultValue: null,
                description: "",
                name: "onDrag",
                required: !1,
                type: { name: "DragEventHandler<HTMLInputElement>" },
              },
              onDragCapture: {
                defaultValue: null,
                description: "",
                name: "onDragCapture",
                required: !1,
                type: { name: "DragEventHandler<HTMLInputElement>" },
              },
              onDragEnd: {
                defaultValue: null,
                description: "",
                name: "onDragEnd",
                required: !1,
                type: { name: "DragEventHandler<HTMLInputElement>" },
              },
              onDragEndCapture: {
                defaultValue: null,
                description: "",
                name: "onDragEndCapture",
                required: !1,
                type: { name: "DragEventHandler<HTMLInputElement>" },
              },
              onDragEnter: {
                defaultValue: null,
                description: "",
                name: "onDragEnter",
                required: !1,
                type: { name: "DragEventHandler<HTMLInputElement>" },
              },
              onDragEnterCapture: {
                defaultValue: null,
                description: "",
                name: "onDragEnterCapture",
                required: !1,
                type: { name: "DragEventHandler<HTMLInputElement>" },
              },
              onDragExit: {
                defaultValue: null,
                description: "",
                name: "onDragExit",
                required: !1,
                type: { name: "DragEventHandler<HTMLInputElement>" },
              },
              onDragExitCapture: {
                defaultValue: null,
                description: "",
                name: "onDragExitCapture",
                required: !1,
                type: { name: "DragEventHandler<HTMLInputElement>" },
              },
              onDragLeave: {
                defaultValue: null,
                description: "",
                name: "onDragLeave",
                required: !1,
                type: { name: "DragEventHandler<HTMLInputElement>" },
              },
              onDragLeaveCapture: {
                defaultValue: null,
                description: "",
                name: "onDragLeaveCapture",
                required: !1,
                type: { name: "DragEventHandler<HTMLInputElement>" },
              },
              onDragOver: {
                defaultValue: null,
                description: "",
                name: "onDragOver",
                required: !1,
                type: { name: "DragEventHandler<HTMLInputElement>" },
              },
              onDragOverCapture: {
                defaultValue: null,
                description: "",
                name: "onDragOverCapture",
                required: !1,
                type: { name: "DragEventHandler<HTMLInputElement>" },
              },
              onDragStart: {
                defaultValue: null,
                description: "",
                name: "onDragStart",
                required: !1,
                type: { name: "DragEventHandler<HTMLInputElement>" },
              },
              onDragStartCapture: {
                defaultValue: null,
                description: "",
                name: "onDragStartCapture",
                required: !1,
                type: { name: "DragEventHandler<HTMLInputElement>" },
              },
              onDrop: {
                defaultValue: null,
                description: "",
                name: "onDrop",
                required: !1,
                type: { name: "DragEventHandler<HTMLInputElement>" },
              },
              onDropCapture: {
                defaultValue: null,
                description: "",
                name: "onDropCapture",
                required: !1,
                type: { name: "DragEventHandler<HTMLInputElement>" },
              },
              onMouseDown: {
                defaultValue: null,
                description: "",
                name: "onMouseDown",
                required: !1,
                type: { name: "MouseEventHandler<HTMLInputElement>" },
              },
              onMouseDownCapture: {
                defaultValue: null,
                description: "",
                name: "onMouseDownCapture",
                required: !1,
                type: { name: "MouseEventHandler<HTMLInputElement>" },
              },
              onMouseEnter: {
                defaultValue: null,
                description: "",
                name: "onMouseEnter",
                required: !1,
                type: { name: "MouseEventHandler<HTMLInputElement>" },
              },
              onMouseLeave: {
                defaultValue: null,
                description: "",
                name: "onMouseLeave",
                required: !1,
                type: { name: "MouseEventHandler<HTMLInputElement>" },
              },
              onMouseMove: {
                defaultValue: null,
                description: "",
                name: "onMouseMove",
                required: !1,
                type: { name: "MouseEventHandler<HTMLInputElement>" },
              },
              onMouseMoveCapture: {
                defaultValue: null,
                description: "",
                name: "onMouseMoveCapture",
                required: !1,
                type: { name: "MouseEventHandler<HTMLInputElement>" },
              },
              onMouseOut: {
                defaultValue: null,
                description: "",
                name: "onMouseOut",
                required: !1,
                type: { name: "MouseEventHandler<HTMLInputElement>" },
              },
              onMouseOutCapture: {
                defaultValue: null,
                description: "",
                name: "onMouseOutCapture",
                required: !1,
                type: { name: "MouseEventHandler<HTMLInputElement>" },
              },
              onMouseOver: {
                defaultValue: null,
                description: "",
                name: "onMouseOver",
                required: !1,
                type: { name: "MouseEventHandler<HTMLInputElement>" },
              },
              onMouseOverCapture: {
                defaultValue: null,
                description: "",
                name: "onMouseOverCapture",
                required: !1,
                type: { name: "MouseEventHandler<HTMLInputElement>" },
              },
              onMouseUp: {
                defaultValue: null,
                description: "",
                name: "onMouseUp",
                required: !1,
                type: { name: "MouseEventHandler<HTMLInputElement>" },
              },
              onMouseUpCapture: {
                defaultValue: null,
                description: "",
                name: "onMouseUpCapture",
                required: !1,
                type: { name: "MouseEventHandler<HTMLInputElement>" },
              },
              onSelect: {
                defaultValue: null,
                description: "",
                name: "onSelect",
                required: !1,
                type: { name: "ReactEventHandler<HTMLInputElement>" },
              },
              onSelectCapture: {
                defaultValue: null,
                description: "",
                name: "onSelectCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLInputElement>" },
              },
              onTouchCancel: {
                defaultValue: null,
                description: "",
                name: "onTouchCancel",
                required: !1,
                type: { name: "TouchEventHandler<HTMLInputElement>" },
              },
              onTouchCancelCapture: {
                defaultValue: null,
                description: "",
                name: "onTouchCancelCapture",
                required: !1,
                type: { name: "TouchEventHandler<HTMLInputElement>" },
              },
              onTouchEnd: {
                defaultValue: null,
                description: "",
                name: "onTouchEnd",
                required: !1,
                type: { name: "TouchEventHandler<HTMLInputElement>" },
              },
              onTouchEndCapture: {
                defaultValue: null,
                description: "",
                name: "onTouchEndCapture",
                required: !1,
                type: { name: "TouchEventHandler<HTMLInputElement>" },
              },
              onTouchMove: {
                defaultValue: null,
                description: "",
                name: "onTouchMove",
                required: !1,
                type: { name: "TouchEventHandler<HTMLInputElement>" },
              },
              onTouchMoveCapture: {
                defaultValue: null,
                description: "",
                name: "onTouchMoveCapture",
                required: !1,
                type: { name: "TouchEventHandler<HTMLInputElement>" },
              },
              onTouchStart: {
                defaultValue: null,
                description: "",
                name: "onTouchStart",
                required: !1,
                type: { name: "TouchEventHandler<HTMLInputElement>" },
              },
              onTouchStartCapture: {
                defaultValue: null,
                description: "",
                name: "onTouchStartCapture",
                required: !1,
                type: { name: "TouchEventHandler<HTMLInputElement>" },
              },
              onPointerDown: {
                defaultValue: null,
                description: "",
                name: "onPointerDown",
                required: !1,
                type: { name: "PointerEventHandler<HTMLInputElement>" },
              },
              onPointerDownCapture: {
                defaultValue: null,
                description: "",
                name: "onPointerDownCapture",
                required: !1,
                type: { name: "PointerEventHandler<HTMLInputElement>" },
              },
              onPointerMove: {
                defaultValue: null,
                description: "",
                name: "onPointerMove",
                required: !1,
                type: { name: "PointerEventHandler<HTMLInputElement>" },
              },
              onPointerMoveCapture: {
                defaultValue: null,
                description: "",
                name: "onPointerMoveCapture",
                required: !1,
                type: { name: "PointerEventHandler<HTMLInputElement>" },
              },
              onPointerUp: {
                defaultValue: null,
                description: "",
                name: "onPointerUp",
                required: !1,
                type: { name: "PointerEventHandler<HTMLInputElement>" },
              },
              onPointerUpCapture: {
                defaultValue: null,
                description: "",
                name: "onPointerUpCapture",
                required: !1,
                type: { name: "PointerEventHandler<HTMLInputElement>" },
              },
              onPointerCancel: {
                defaultValue: null,
                description: "",
                name: "onPointerCancel",
                required: !1,
                type: { name: "PointerEventHandler<HTMLInputElement>" },
              },
              onPointerCancelCapture: {
                defaultValue: null,
                description: "",
                name: "onPointerCancelCapture",
                required: !1,
                type: { name: "PointerEventHandler<HTMLInputElement>" },
              },
              onPointerEnter: {
                defaultValue: null,
                description: "",
                name: "onPointerEnter",
                required: !1,
                type: { name: "PointerEventHandler<HTMLInputElement>" },
              },
              onPointerEnterCapture: {
                defaultValue: null,
                description: "",
                name: "onPointerEnterCapture",
                required: !1,
                type: { name: "PointerEventHandler<HTMLInputElement>" },
              },
              onPointerLeave: {
                defaultValue: null,
                description: "",
                name: "onPointerLeave",
                required: !1,
                type: { name: "PointerEventHandler<HTMLInputElement>" },
              },
              onPointerLeaveCapture: {
                defaultValue: null,
                description: "",
                name: "onPointerLeaveCapture",
                required: !1,
                type: { name: "PointerEventHandler<HTMLInputElement>" },
              },
              onPointerOver: {
                defaultValue: null,
                description: "",
                name: "onPointerOver",
                required: !1,
                type: { name: "PointerEventHandler<HTMLInputElement>" },
              },
              onPointerOverCapture: {
                defaultValue: null,
                description: "",
                name: "onPointerOverCapture",
                required: !1,
                type: { name: "PointerEventHandler<HTMLInputElement>" },
              },
              onPointerOut: {
                defaultValue: null,
                description: "",
                name: "onPointerOut",
                required: !1,
                type: { name: "PointerEventHandler<HTMLInputElement>" },
              },
              onPointerOutCapture: {
                defaultValue: null,
                description: "",
                name: "onPointerOutCapture",
                required: !1,
                type: { name: "PointerEventHandler<HTMLInputElement>" },
              },
              onGotPointerCapture: {
                defaultValue: null,
                description: "",
                name: "onGotPointerCapture",
                required: !1,
                type: { name: "PointerEventHandler<HTMLInputElement>" },
              },
              onGotPointerCaptureCapture: {
                defaultValue: null,
                description: "",
                name: "onGotPointerCaptureCapture",
                required: !1,
                type: { name: "PointerEventHandler<HTMLInputElement>" },
              },
              onLostPointerCapture: {
                defaultValue: null,
                description: "",
                name: "onLostPointerCapture",
                required: !1,
                type: { name: "PointerEventHandler<HTMLInputElement>" },
              },
              onLostPointerCaptureCapture: {
                defaultValue: null,
                description: "",
                name: "onLostPointerCaptureCapture",
                required: !1,
                type: { name: "PointerEventHandler<HTMLInputElement>" },
              },
              onScroll: {
                defaultValue: null,
                description: "",
                name: "onScroll",
                required: !1,
                type: { name: "UIEventHandler<HTMLInputElement>" },
              },
              onScrollCapture: {
                defaultValue: null,
                description: "",
                name: "onScrollCapture",
                required: !1,
                type: { name: "UIEventHandler<HTMLInputElement>" },
              },
              onWheel: {
                defaultValue: null,
                description: "",
                name: "onWheel",
                required: !1,
                type: { name: "WheelEventHandler<HTMLInputElement>" },
              },
              onWheelCapture: {
                defaultValue: null,
                description: "",
                name: "onWheelCapture",
                required: !1,
                type: { name: "WheelEventHandler<HTMLInputElement>" },
              },
              onAnimationStart: {
                defaultValue: null,
                description: "",
                name: "onAnimationStart",
                required: !1,
                type: { name: "AnimationEventHandler<HTMLInputElement>" },
              },
              onAnimationStartCapture: {
                defaultValue: null,
                description: "",
                name: "onAnimationStartCapture",
                required: !1,
                type: { name: "AnimationEventHandler<HTMLInputElement>" },
              },
              onAnimationEnd: {
                defaultValue: null,
                description: "",
                name: "onAnimationEnd",
                required: !1,
                type: { name: "AnimationEventHandler<HTMLInputElement>" },
              },
              onAnimationEndCapture: {
                defaultValue: null,
                description: "",
                name: "onAnimationEndCapture",
                required: !1,
                type: { name: "AnimationEventHandler<HTMLInputElement>" },
              },
              onAnimationIteration: {
                defaultValue: null,
                description: "",
                name: "onAnimationIteration",
                required: !1,
                type: { name: "AnimationEventHandler<HTMLInputElement>" },
              },
              onAnimationIterationCapture: {
                defaultValue: null,
                description: "",
                name: "onAnimationIterationCapture",
                required: !1,
                type: { name: "AnimationEventHandler<HTMLInputElement>" },
              },
              onTransitionEnd: {
                defaultValue: null,
                description: "",
                name: "onTransitionEnd",
                required: !1,
                type: { name: "TransitionEventHandler<HTMLInputElement>" },
              },
              onTransitionEndCapture: {
                defaultValue: null,
                description: "",
                name: "onTransitionEndCapture",
                required: !1,
                type: { name: "TransitionEventHandler<HTMLInputElement>" },
              },
              list: {
                defaultValue: null,
                description: "",
                name: "list",
                required: !1,
                type: { name: "string" },
              },
              step: {
                defaultValue: null,
                description: "",
                name: "step",
                required: !1,
                type: { name: "string | number" },
              },
              max: {
                defaultValue: null,
                description: "",
                name: "max",
                required: !1,
                type: { name: "string | number" },
              },
              min: {
                defaultValue: null,
                description: "",
                name: "min",
                required: !1,
                type: { name: "string | number" },
              },
              type: {
                defaultValue: null,
                description: "",
                name: "type",
                required: !1,
                type: { name: "HTMLInputTypeAttribute" },
              },
              crossOrigin: {
                defaultValue: null,
                description: "",
                name: "crossOrigin",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '""' },
                    { value: '"anonymous"' },
                    { value: '"use-credentials"' },
                  ],
                },
              },
              formAction: {
                defaultValue: null,
                description: "",
                name: "formAction",
                required: !1,
                type: { name: "string" },
              },
              formEncType: {
                defaultValue: null,
                description: "",
                name: "formEncType",
                required: !1,
                type: { name: "string" },
              },
              formMethod: {
                defaultValue: null,
                description: "",
                name: "formMethod",
                required: !1,
                type: { name: "string" },
              },
              formNoValidate: {
                defaultValue: null,
                description: "",
                name: "formNoValidate",
                required: !1,
                type: { name: "boolean" },
              },
              formTarget: {
                defaultValue: null,
                description: "",
                name: "formTarget",
                required: !1,
                type: { name: "string" },
              },
              src: {
                defaultValue: null,
                description: "",
                name: "src",
                required: !1,
                type: { name: "string" },
              },
              alt: {
                defaultValue: null,
                description: "",
                name: "alt",
                required: !1,
                type: { name: "string" },
              },
              accept: {
                defaultValue: null,
                description: "",
                name: "accept",
                required: !1,
                type: { name: "string" },
              },
              capture: {
                defaultValue: null,
                description: "",
                name: "capture",
                required: !1,
                type: { name: 'boolean | "user" | "environment"' },
              },
              checked: {
                defaultValue: null,
                description: "",
                name: "checked",
                required: !1,
                type: { name: "boolean" },
              },
              enterKeyHint: {
                defaultValue: null,
                description: "",
                name: "enterKeyHint",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"search"' },
                    { value: '"done"' },
                    { value: '"send"' },
                    { value: '"enter"' },
                    { value: '"go"' },
                    { value: '"next"' },
                    { value: '"previous"' },
                  ],
                },
              },
              alignItems: {
                defaultValue: null,
                description: "",
                name: "alignItems",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"stretch"' },
                    { value: '"center"' },
                    { value: '"end"' },
                    { value: '"start"' },
                    { value: '"baseline"' },
                  ],
                },
              },
              aspectRatio: {
                defaultValue: null,
                description: "",
                name: "aspectRatio",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"square"' },
                    { value: '"extraWide"' },
                    { value: '"tall"' },
                    { value: '"wide"' },
                  ],
                },
              },
              background: {
                defaultValue: null,
                description: "",
                name: "background",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"inherit"' },
                    { value: '"background"' },
                    { value: '"black"' },
                    { value: '"transparent"' },
                    { value: '"white"' },
                    { value: '"backdrop"' },
                    { value: '"border_active"' },
                    { value: '"border_default"' },
                    { value: '"button_active"' },
                    { value: '"button_default"' },
                    { value: '"button_tint"' },
                    { value: '"focus_ring"' },
                    { value: '"shadow"' },
                    { value: '"text_high_contrast"' },
                    { value: '"text_low_contrast"' },
                    { value: '"tint_active"' },
                    { value: '"tint_default"' },
                  ],
                },
              },
              border: {
                defaultValue: null,
                description: "",
                name: "border",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"border_active"' },
                    { value: '"border_default"' },
                  ],
                },
              },
              borderBottom: {
                defaultValue: null,
                description: "",
                name: "borderBottom",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"border_active"' },
                    { value: '"border_default"' },
                  ],
                },
              },
              borderLeft: {
                defaultValue: null,
                description: "",
                name: "borderLeft",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"border_active"' },
                    { value: '"border_default"' },
                  ],
                },
              },
              borderRadius: {
                defaultValue: null,
                description: "",
                name: "borderRadius",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"50%"' },
                    { value: '"lg"' },
                    { value: '"md"' },
                    { value: '"pill"' },
                    { value: '"sm"' },
                  ],
                },
              },
              borderRight: {
                defaultValue: null,
                description: "",
                name: "borderRight",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"border_active"' },
                    { value: '"border_default"' },
                  ],
                },
              },
              borderTop: {
                defaultValue: null,
                description: "",
                name: "borderTop",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"border_active"' },
                    { value: '"border_default"' },
                  ],
                },
              },
              bottom: {
                defaultValue: null,
                description: "",
                name: "bottom",
                required: !1,
                type: { name: '"0"' },
              },
              boxShadow: {
                defaultValue: null,
                description: "",
                name: "boxShadow",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"lg"' },
                    { value: '"md"' },
                    { value: '"sm"' },
                  ],
                },
              },
              color: {
                defaultValue: null,
                description: "",
                name: "color",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"inherit"' },
                    { value: '"background"' },
                    { value: '"black"' },
                    { value: '"white"' },
                    { value: '"currentColor"' },
                    { value: '"backdrop"' },
                    { value: '"border_active"' },
                    { value: '"border_default"' },
                    { value: '"button_active"' },
                    { value: '"button_default"' },
                    { value: '"button_tint"' },
                    { value: '"focus_ring"' },
                    { value: '"shadow"' },
                    { value: '"text_high_contrast"' },
                    { value: '"text_low_contrast"' },
                    { value: '"tint_active"' },
                    { value: '"tint_default"' },
                  ],
                },
              },
              flex: {
                defaultValue: null,
                description: "",
                name: "flex",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"0 1 auto"' },
                    { value: '"1 1 auto"' },
                    { value: '"1 1 0%"' },
                    { value: '"1 1 100%"' },
                  ],
                },
              },
              flexGrow: {
                defaultValue: null,
                description: "",
                name: "flexGrow",
                required: !1,
                type: {
                  name: "enum",
                  value: [{ value: '"0"' }, { value: '"1"' }],
                },
              },
              flexShrink: {
                defaultValue: null,
                description: "",
                name: "flexShrink",
                required: !1,
                type: {
                  name: "enum",
                  value: [{ value: '"0"' }, { value: '"1"' }],
                },
              },
              flexWrap: {
                defaultValue: null,
                description: "",
                name: "flexWrap",
                required: !1,
                type: {
                  name: "enum",
                  value: [{ value: '"nowrap"' }, { value: '"wrap"' }],
                },
              },
              fontSize: {
                defaultValue: null,
                description: "",
                name: "fontSize",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"h1"' },
                    { value: '"h2"' },
                    { value: '"h3"' },
                    { value: '"h4"' },
                    { value: '"h5"' },
                    { value: '"h6"' },
                    { value: '"body_lg"' },
                    { value: '"body_md"' },
                    { value: '"body_sm"' },
                    { value: '"body_xl"' },
                    { value: '"body_xs"' },
                    { value: '"h0"' },
                    { value: '"root"' },
                  ],
                },
              },
              fontWeight: {
                defaultValue: null,
                description: "",
                name: "fontWeight",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"normal"' },
                    { value: '"bold"' },
                    { value: '"medium"' },
                    { value: '"light"' },
                    { value: '"extrabold"' },
                    { value: '"semibold"' },
                  ],
                },
              },
              height: {
                defaultValue: null,
                description: "",
                name: "height",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '""' },
                    { value: '"none"' },
                    { value: '"auto"' },
                    { value: '"min-content"' },
                    { value: '"50%"' },
                    { value: '"100%"' },
                    { value: '"100vh"' },
                    { value: '"25%"' },
                    { value: '"25vh"' },
                    { value: '"50vh"' },
                    { value: '"75%"' },
                    { value: '"75vh"' },
                    { value: '"90vh"' },
                    { value: '"spacing_0.25"' },
                    { value: '"spacing_0.5"' },
                    { value: '"spacing_1"' },
                    { value: '"spacing_1.5"' },
                    { value: '"spacing_2"' },
                    { value: '"spacing_3"' },
                    { value: '"spacing_4"' },
                    { value: '"spacing_5"' },
                    { value: '"spacing_6"' },
                  ],
                },
              },
              inset: {
                defaultValue: null,
                description: "",
                name: "inset",
                required: !1,
                type: { name: '"0"' },
              },
              isolation: {
                defaultValue: null,
                description: "",
                name: "isolation",
                required: !1,
                type: { name: '"isolate"' },
              },
              justifyContent: {
                defaultValue: null,
                description: "",
                name: "justifyContent",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"space-around"' },
                    { value: '"space-between"' },
                    { value: '"stretch"' },
                    { value: '"center"' },
                    { value: '"end"' },
                    { value: '"start"' },
                  ],
                },
              },
              left: {
                defaultValue: null,
                description: "",
                name: "left",
                required: !1,
                type: { name: '"0"' },
              },
              lineHeight: {
                defaultValue: null,
                description: "",
                name: "lineHeight",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"h1"' },
                    { value: '"h2"' },
                    { value: '"h3"' },
                    { value: '"h4"' },
                    { value: '"h5"' },
                    { value: '"h6"' },
                    { value: '"body_lg"' },
                    { value: '"body_md"' },
                    { value: '"body_sm"' },
                    { value: '"body_xl"' },
                    { value: '"body_xs"' },
                    { value: '"h0"' },
                    { value: '"root"' },
                  ],
                },
              },
              margin: {
                defaultValue: null,
                description: "",
                name: "margin",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"none"' },
                    { value: '"auto"' },
                    { value: '"spacing_0.25"' },
                    { value: '"spacing_0.5"' },
                    { value: '"spacing_1"' },
                    { value: '"spacing_1.5"' },
                    { value: '"spacing_2"' },
                    { value: '"spacing_3"' },
                    { value: '"spacing_4"' },
                    { value: '"spacing_5"' },
                    { value: '"spacing_6"' },
                  ],
                },
              },
              marginBottom: {
                defaultValue: null,
                description: "",
                name: "marginBottom",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"none"' },
                    { value: '"auto"' },
                    { value: '"spacing_0.25"' },
                    { value: '"spacing_0.5"' },
                    { value: '"spacing_1"' },
                    { value: '"spacing_1.5"' },
                    { value: '"spacing_2"' },
                    { value: '"spacing_3"' },
                    { value: '"spacing_4"' },
                    { value: '"spacing_5"' },
                    { value: '"spacing_6"' },
                  ],
                },
              },
              marginLeft: {
                defaultValue: null,
                description: "",
                name: "marginLeft",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"none"' },
                    { value: '"auto"' },
                    { value: '"spacing_0.25"' },
                    { value: '"spacing_0.5"' },
                    { value: '"spacing_1"' },
                    { value: '"spacing_1.5"' },
                    { value: '"spacing_2"' },
                    { value: '"spacing_3"' },
                    { value: '"spacing_4"' },
                    { value: '"spacing_5"' },
                    { value: '"spacing_6"' },
                  ],
                },
              },
              marginRight: {
                defaultValue: null,
                description: "",
                name: "marginRight",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"none"' },
                    { value: '"auto"' },
                    { value: '"spacing_0.25"' },
                    { value: '"spacing_0.5"' },
                    { value: '"spacing_1"' },
                    { value: '"spacing_1.5"' },
                    { value: '"spacing_2"' },
                    { value: '"spacing_3"' },
                    { value: '"spacing_4"' },
                    { value: '"spacing_5"' },
                    { value: '"spacing_6"' },
                  ],
                },
              },
              marginTop: {
                defaultValue: null,
                description: "",
                name: "marginTop",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"none"' },
                    { value: '"auto"' },
                    { value: '"spacing_0.25"' },
                    { value: '"spacing_0.5"' },
                    { value: '"spacing_1"' },
                    { value: '"spacing_1.5"' },
                    { value: '"spacing_2"' },
                    { value: '"spacing_3"' },
                    { value: '"spacing_4"' },
                    { value: '"spacing_5"' },
                    { value: '"spacing_6"' },
                  ],
                },
              },
              maxHeight: {
                defaultValue: null,
                description: "",
                name: "maxHeight",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '""' },
                    { value: '"none"' },
                    { value: '"auto"' },
                    { value: '"min-content"' },
                    { value: '"50%"' },
                    { value: '"100%"' },
                    { value: '"100vh"' },
                    { value: '"25%"' },
                    { value: '"25vh"' },
                    { value: '"50vh"' },
                    { value: '"75%"' },
                    { value: '"75vh"' },
                    { value: '"90vh"' },
                    { value: '"spacing_0.25"' },
                    { value: '"spacing_0.5"' },
                    { value: '"spacing_1"' },
                    { value: '"spacing_1.5"' },
                    { value: '"spacing_2"' },
                    { value: '"spacing_3"' },
                    { value: '"spacing_4"' },
                    { value: '"spacing_5"' },
                    { value: '"spacing_6"' },
                  ],
                },
              },
              maxWidth: {
                defaultValue: null,
                description: "",
                name: "maxWidth",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '""' },
                    { value: '"none"' },
                    { value: '"auto"' },
                    { value: '"max-content"' },
                    { value: '"min-content"' },
                    { value: '"50%"' },
                    { value: '"100%"' },
                    { value: '"25%"' },
                    { value: '"spacing_0.25"' },
                    { value: '"spacing_0.5"' },
                    { value: '"spacing_1"' },
                    { value: '"spacing_1.5"' },
                    { value: '"spacing_2"' },
                    { value: '"spacing_3"' },
                    { value: '"spacing_4"' },
                    { value: '"spacing_5"' },
                    { value: '"spacing_6"' },
                    { value: '"col_1"' },
                    { value: '"col_10"' },
                    { value: '"col_11"' },
                    { value: '"col_12"' },
                    { value: '"col_2"' },
                    { value: '"col_3"' },
                    { value: '"col_4"' },
                    { value: '"col_5"' },
                    { value: '"col_6"' },
                    { value: '"col_7"' },
                    { value: '"col_8"' },
                    { value: '"col_9"' },
                  ],
                },
              },
              minHeight: {
                defaultValue: null,
                description: "",
                name: "minHeight",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '""' },
                    { value: '"none"' },
                    { value: '"auto"' },
                    { value: '"min-content"' },
                    { value: '"50%"' },
                    { value: '"100%"' },
                    { value: '"100vh"' },
                    { value: '"25%"' },
                    { value: '"25vh"' },
                    { value: '"50vh"' },
                    { value: '"75%"' },
                    { value: '"75vh"' },
                    { value: '"90vh"' },
                    { value: '"spacing_0.25"' },
                    { value: '"spacing_0.5"' },
                    { value: '"spacing_1"' },
                    { value: '"spacing_1.5"' },
                    { value: '"spacing_2"' },
                    { value: '"spacing_3"' },
                    { value: '"spacing_4"' },
                    { value: '"spacing_5"' },
                    { value: '"spacing_6"' },
                  ],
                },
              },
              minWidth: {
                defaultValue: null,
                description: "",
                name: "minWidth",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '""' },
                    { value: '"none"' },
                    { value: '"auto"' },
                    { value: '"max-content"' },
                    { value: '"min-content"' },
                    { value: '"50%"' },
                    { value: '"100%"' },
                    { value: '"25%"' },
                    { value: '"spacing_0.25"' },
                    { value: '"spacing_0.5"' },
                    { value: '"spacing_1"' },
                    { value: '"spacing_1.5"' },
                    { value: '"spacing_2"' },
                    { value: '"spacing_3"' },
                    { value: '"spacing_4"' },
                    { value: '"spacing_5"' },
                    { value: '"spacing_6"' },
                    { value: '"col_1"' },
                    { value: '"col_10"' },
                    { value: '"col_11"' },
                    { value: '"col_12"' },
                    { value: '"col_2"' },
                    { value: '"col_3"' },
                    { value: '"col_4"' },
                    { value: '"col_5"' },
                    { value: '"col_6"' },
                    { value: '"col_7"' },
                    { value: '"col_8"' },
                    { value: '"col_9"' },
                  ],
                },
              },
              overflow: {
                defaultValue: null,
                description: "",
                name: "overflow",
                required: !1,
                type: { name: '"hidden"' },
              },
              overflowY: {
                defaultValue: null,
                description: "",
                name: "overflowY",
                required: !1,
                type: { name: '"auto"' },
              },
              right: {
                defaultValue: null,
                description: "",
                name: "right",
                required: !1,
                type: { name: '"0"' },
              },
              textAlign: {
                defaultValue: null,
                description: "",
                name: "textAlign",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"left"' },
                    { value: '"right"' },
                    { value: '"center"' },
                  ],
                },
              },
              textDecoration: {
                defaultValue: null,
                description: "",
                name: "textDecoration",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"none"' },
                    { value: '"line-through"' },
                    { value: '"underline"' },
                  ],
                },
              },
              textTransform: {
                defaultValue: null,
                description: "",
                name: "textTransform",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"capitalize"' },
                    { value: '"lowercase"' },
                    { value: '"uppercase"' },
                  ],
                },
              },
              top: {
                defaultValue: null,
                description: "",
                name: "top",
                required: !1,
                type: { name: '"0"' },
              },
              whiteSpace: {
                defaultValue: null,
                description: "",
                name: "whiteSpace",
                required: !1,
                type: {
                  name: "enum",
                  value: [{ value: '"normal"' }, { value: '"nowrap"' }],
                },
              },
              zIndex: {
                defaultValue: null,
                description: "",
                name: "zIndex",
                required: !1,
                type: {
                  name: "enum",
                  value: [{ value: '"1"' }, { value: '"-1"' }],
                },
              },
              fontStyle: {
                defaultValue: null,
                description: "",
                name: "fontStyle",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"h1"' },
                    { value: '"h2"' },
                    { value: '"h3"' },
                    { value: '"h4"' },
                    { value: '"h5"' },
                    { value: '"h6"' },
                    { value: '"body_lg"' },
                    { value: '"body_md"' },
                    { value: '"body_sm"' },
                    { value: '"body_xl"' },
                    { value: '"body_xs"' },
                    { value: '"h0"' },
                    { value: '"root"' },
                  ],
                },
              },
              marginX: {
                defaultValue: null,
                description: "",
                name: "marginX",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"none"' },
                    { value: '"auto"' },
                    { value: '"spacing_0.25"' },
                    { value: '"spacing_0.5"' },
                    { value: '"spacing_1"' },
                    { value: '"spacing_1.5"' },
                    { value: '"spacing_2"' },
                    { value: '"spacing_3"' },
                    { value: '"spacing_4"' },
                    { value: '"spacing_5"' },
                    { value: '"spacing_6"' },
                  ],
                },
              },
              marginY: {
                defaultValue: null,
                description: "",
                name: "marginY",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"none"' },
                    { value: '"auto"' },
                    { value: '"spacing_0.25"' },
                    { value: '"spacing_0.5"' },
                    { value: '"spacing_1"' },
                    { value: '"spacing_1.5"' },
                    { value: '"spacing_2"' },
                    { value: '"spacing_3"' },
                    { value: '"spacing_4"' },
                    { value: '"spacing_5"' },
                    { value: '"spacing_6"' },
                  ],
                },
              },
              placeItems: {
                defaultValue: null,
                description: "",
                name: "placeItems",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"stretch"' },
                    { value: '"center"' },
                    { value: '"end"' },
                    { value: '"start"' },
                  ],
                },
              },
              display: {
                defaultValue: null,
                description: "",
                name: "display",
                required: !1,
                type: {
                  name: 'ConditionalStyle<Values<MapLeafNodes<{ block: string; flex: string; grid: string; inline: string; "inline-block": string; "inline-flex": string; none: string; table: string; "table-cell": string; }, CSSVarFunction>, { ...; }>>',
                },
              },
              flexDirection: {
                defaultValue: null,
                description: "",
                name: "flexDirection",
                required: !1,
                type: {
                  name: 'ConditionalStyle<Values<("column" | "column-reverse" | "row" | "row-reverse")[], { defaultClass: string; conditions: { mobile: string; tablet: string; desktop: string; }; }>>',
                },
              },
              gap: {
                defaultValue: null,
                description: "",
                name: "gap",
                required: !1,
                type: {
                  name: 'ConditionalStyle<Values<MapLeafNodes<{ auto: string; none: string; "spacing_0.25": string; "spacing_0.5": string; spacing_1: string; "spacing_1.5": string; spacing_2: string; spacing_3: string; spacing_4: string; spacing_5: string; spacing_6: string; }, CSSVarFunction>, { ...; }>>',
                },
              },
              gridTemplateColumns: {
                defaultValue: null,
                description: "",
                name: "gridTemplateColumns",
                required: !1,
                type: {
                  name: 'ConditionalStyle<Values<MapLeafNodes<{ "1_2": string; "1_3": string; "1x": string; "2_1": string; "2x": string; "3_1": string; "3x": string; "4x": string; "5_7": string; "5x": string; "6x": string; "7_5": string; "7x": string; }, CSSVarFunction>, { ...; }>>',
                },
              },
              padding: {
                defaultValue: null,
                description: "",
                name: "padding",
                required: !1,
                type: {
                  name: 'ConditionalStyle<Values<MapLeafNodes<{ auto: string; none: string; "spacing_0.25": string; "spacing_0.5": string; spacing_1: string; "spacing_1.5": string; spacing_2: string; spacing_3: string; spacing_4: string; spacing_5: string; spacing_6: string; }, CSSVarFunction>, { ...; }>>',
                },
              },
              paddingBottom: {
                defaultValue: null,
                description: "",
                name: "paddingBottom",
                required: !1,
                type: {
                  name: 'ConditionalStyle<Values<MapLeafNodes<{ auto: string; none: string; "spacing_0.25": string; "spacing_0.5": string; spacing_1: string; "spacing_1.5": string; spacing_2: string; spacing_3: string; spacing_4: string; spacing_5: string; spacing_6: string; }, CSSVarFunction>, { ...; }>>',
                },
              },
              paddingLeft: {
                defaultValue: null,
                description: "",
                name: "paddingLeft",
                required: !1,
                type: {
                  name: 'ConditionalStyle<Values<MapLeafNodes<{ auto: string; none: string; "spacing_0.25": string; "spacing_0.5": string; spacing_1: string; "spacing_1.5": string; spacing_2: string; spacing_3: string; spacing_4: string; spacing_5: string; spacing_6: string; }, CSSVarFunction>, { ...; }>>',
                },
              },
              paddingRight: {
                defaultValue: null,
                description: "",
                name: "paddingRight",
                required: !1,
                type: {
                  name: 'ConditionalStyle<Values<MapLeafNodes<{ auto: string; none: string; "spacing_0.25": string; "spacing_0.5": string; spacing_1: string; "spacing_1.5": string; spacing_2: string; spacing_3: string; spacing_4: string; spacing_5: string; spacing_6: string; }, CSSVarFunction>, { ...; }>>',
                },
              },
              paddingTop: {
                defaultValue: null,
                description: "",
                name: "paddingTop",
                required: !1,
                type: {
                  name: 'ConditionalStyle<Values<MapLeafNodes<{ auto: string; none: string; "spacing_0.25": string; "spacing_0.5": string; spacing_1: string; "spacing_1.5": string; spacing_2: string; spacing_3: string; spacing_4: string; spacing_5: string; spacing_6: string; }, CSSVarFunction>, { ...; }>>',
                },
              },
              position: {
                defaultValue: null,
                description: "",
                name: "position",
                required: !1,
                type: {
                  name: 'ConditionalStyle<Values<("absolute" | "relative" | "sticky")[], { defaultClass: string; conditions: { mobile: string; tablet: string; desktop: string; }; }>>',
                },
              },
              width: {
                defaultValue: null,
                description: "",
                name: "width",
                required: !1,
                type: {
                  name: 'ConditionalStyle<Values<{ auto: CSSVarFunction; none: CSSVarFunction; "spacing_0.25": CSSVarFunction; "spacing_0.5": CSSVarFunction; spacing_1: CSSVarFunction; ... 23 more ...; "min-content": CSSVarFunction; }, { ...; }>>',
                },
              },
              paddingX: {
                defaultValue: null,
                description: "",
                name: "paddingX",
                required: !1,
                type: {
                  name: 'ConditionalStyle<Values<MapLeafNodes<{ auto: string; none: string; "spacing_0.25": string; "spacing_0.5": string; spacing_1: string; "spacing_1.5": string; spacing_2: string; spacing_3: string; spacing_4: string; spacing_5: string; spacing_6: string; }, CSSVarFunction>, { ...; }>>',
                },
              },
              paddingY: {
                defaultValue: null,
                description: "",
                name: "paddingY",
                required: !1,
                type: {
                  name: 'ConditionalStyle<Values<MapLeafNodes<{ auto: string; none: string; "spacing_0.25": string; "spacing_0.5": string; spacing_1: string; "spacing_1.5": string; spacing_2: string; spacing_3: string; spacing_4: string; spacing_5: string; spacing_6: string; }, CSSVarFunction>, { ...; }>>',
                },
              },
              labelProps: {
                defaultValue: null,
                description: "",
                name: "labelProps",
                required: !1,
                type: { name: "LabelProps" },
              },
              wrapperProps: {
                defaultValue: null,
                description: "",
                name: "wrapperProps",
                required: !1,
                type: { name: "BoxProps" },
              },
              id: {
                defaultValue: null,
                description: "",
                name: "id",
                required: !1,
                type: { name: "string" },
              },
              label: {
                defaultValue: null,
                description: "",
                name: "label",
                required: !1,
                type: { name: "string" },
              },
              description: {
                defaultValue: null,
                description:
                  "Description shown under the input when there is no error message",
                name: "description",
                required: !1,
                type: { name: "ReactNode" },
              },
              errorMessage: {
                defaultValue: null,
                description:
                  "Message shown when `invalid=true`. May originate from controlling library, like `react-hook-form`\nMessage to render when erroring.",
                name: "errorMessage",
                required: !1,
                type: { name: "string" },
              },
              hasBorder: {
                defaultValue: null,
                description: "Whether to render the input with a border",
                name: "hasBorder",
                required: !1,
                type: { name: "boolean" },
              },
              invalid: {
                defaultValue: null,
                description:
                  "Will be forwarded to the native `<input>`. When using the `errorMessage` prop, will toggle visibility of the error message.",
                name: "invalid",
                required: !1,
                type: { name: "boolean" },
              },
              isClearable: {
                defaultValue: null,
                description:
                  "Whether to allow the user to clear the input with a button",
                name: "isClearable",
                required: !1,
                type: { name: "boolean" },
              },
              labelTooltip: {
                defaultValue: null,
                description: "Optional tooltip for label",
                name: "labelTooltip",
                required: !1,
                type: { name: "string" },
              },
              size: {
                defaultValue: null,
                description:
                  "Common interactive element size, shared with button, select, etc",
                name: "size",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"lg"' },
                    { value: '"md"' },
                    { value: '"sm"' },
                  ],
                },
              },
              slotLeft: {
                defaultValue: null,
                description: "React node shown on the left side of input.",
                name: "slotLeft",
                required: !1,
                type: { name: "ReactNode" },
              },
              slotRight: {
                defaultValue: null,
                description: "React node shown on the right side of input.",
                name: "slotRight",
                required: !1,
                type: { name: "ReactNode" },
              },
              validateFunction: {
                defaultValue: null,
                description:
                  "Callback for validation, else simply validates is non-empty.",
                name: "validateFunction",
                required: !1,
                type: { name: "(value: string) => boolean" },
              },
            },
          }),
          "undefined" != typeof STORYBOOK_REACT_CLASSES &&
            (STORYBOOK_REACT_CLASSES[
              "src/components/form/sub_components/form_input.comp.tsx#FormInput"
            ] = {
              docgenInfo: FormInput.__docgenInfo,
              name: "FormInput",
              path: "src/components/form/sub_components/form_input.comp.tsx#FormInput",
            });
      } catch (__react_docgen_typescript_loader_error) {}
      var react = __webpack_require__("./node_modules/react/index.js"),
        radio_button_cards_comp = __webpack_require__(
          "./src/components/radio_button_cards/radio_button_cards.comp.tsx"
        );
      function FormRadioButtonCards({
        defaultValue,
        errorMessage,
        invalid,
        name,
        onChange: onChangeParent,
        required,
        validateFunction,
        wrapperProps,
        ...rest
      }) {
        const { control } = (0, index_esm.Gc)(),
          {
            field: { onBlur, onChange, ref, value: controlledValue = "" },
            fieldState: { error },
          } = (0, index_esm.bc)({
            control,
            defaultValue,
            name,
            rules: {
              required: required && errorMessage,
              validate: (value) =>
                validateFunction
                  ? validateFunction(value) || errorMessage
                  : !!value,
            },
          }),
          handleChange = (0, react.useCallback)(
            (value) => {
              onChange(value), onChangeParent?.(value);
            },
            [onChange, onChangeParent]
          );
        return (0, jsx_runtime.jsx)(radio_button_cards_comp.G, {
          "aria-required": required,
          defaultValue,
          errorMessage,
          invalid: invalid || !!error,
          name,
          onChange: handleChange,
          ref,
          value: controlledValue,
          wrapperProps,
          radioButtonInputProps: { onBlur },
          ...rest,
        });
      }
      FormRadioButtonCards.displayName = "FormRadioButtonCards";
      try {
        (FormRadioButtonCards.displayName = "FormRadioButtonCards"),
          (FormRadioButtonCards.__docgenInfo = {
            description: "",
            displayName: "FormRadioButtonCards",
            props: {
              alignItems: {
                defaultValue: null,
                description: "",
                name: "alignItems",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"stretch"' },
                    { value: '"center"' },
                    { value: '"end"' },
                    { value: '"start"' },
                    { value: '"baseline"' },
                  ],
                },
              },
              aspectRatio: {
                defaultValue: null,
                description: "",
                name: "aspectRatio",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"square"' },
                    { value: '"extraWide"' },
                    { value: '"tall"' },
                    { value: '"wide"' },
                  ],
                },
              },
              background: {
                defaultValue: null,
                description: "",
                name: "background",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"inherit"' },
                    { value: '"background"' },
                    { value: '"black"' },
                    { value: '"transparent"' },
                    { value: '"white"' },
                    { value: '"backdrop"' },
                    { value: '"border_active"' },
                    { value: '"border_default"' },
                    { value: '"button_active"' },
                    { value: '"button_default"' },
                    { value: '"button_tint"' },
                    { value: '"focus_ring"' },
                    { value: '"shadow"' },
                    { value: '"text_high_contrast"' },
                    { value: '"text_low_contrast"' },
                    { value: '"tint_active"' },
                    { value: '"tint_default"' },
                  ],
                },
              },
              border: {
                defaultValue: null,
                description: "",
                name: "border",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"border_active"' },
                    { value: '"border_default"' },
                  ],
                },
              },
              borderBottom: {
                defaultValue: null,
                description: "",
                name: "borderBottom",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"border_active"' },
                    { value: '"border_default"' },
                  ],
                },
              },
              borderLeft: {
                defaultValue: null,
                description: "",
                name: "borderLeft",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"border_active"' },
                    { value: '"border_default"' },
                  ],
                },
              },
              borderRadius: {
                defaultValue: null,
                description: "",
                name: "borderRadius",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"50%"' },
                    { value: '"lg"' },
                    { value: '"md"' },
                    { value: '"pill"' },
                    { value: '"sm"' },
                  ],
                },
              },
              borderRight: {
                defaultValue: null,
                description: "",
                name: "borderRight",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"border_active"' },
                    { value: '"border_default"' },
                  ],
                },
              },
              borderTop: {
                defaultValue: null,
                description: "",
                name: "borderTop",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"border_active"' },
                    { value: '"border_default"' },
                  ],
                },
              },
              bottom: {
                defaultValue: null,
                description: "",
                name: "bottom",
                required: !1,
                type: { name: '"0"' },
              },
              boxShadow: {
                defaultValue: null,
                description: "",
                name: "boxShadow",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"lg"' },
                    { value: '"md"' },
                    { value: '"sm"' },
                  ],
                },
              },
              color: {
                defaultValue: null,
                description: "",
                name: "color",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"inherit"' },
                    { value: '"background"' },
                    { value: '"black"' },
                    { value: '"white"' },
                    { value: '"currentColor"' },
                    { value: '"backdrop"' },
                    { value: '"border_active"' },
                    { value: '"border_default"' },
                    { value: '"button_active"' },
                    { value: '"button_default"' },
                    { value: '"button_tint"' },
                    { value: '"focus_ring"' },
                    { value: '"shadow"' },
                    { value: '"text_high_contrast"' },
                    { value: '"text_low_contrast"' },
                    { value: '"tint_active"' },
                    { value: '"tint_default"' },
                  ],
                },
              },
              flex: {
                defaultValue: null,
                description: "",
                name: "flex",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"0 1 auto"' },
                    { value: '"1 1 auto"' },
                    { value: '"1 1 0%"' },
                    { value: '"1 1 100%"' },
                  ],
                },
              },
              flexGrow: {
                defaultValue: null,
                description: "",
                name: "flexGrow",
                required: !1,
                type: {
                  name: "enum",
                  value: [{ value: '"0"' }, { value: '"1"' }],
                },
              },
              flexShrink: {
                defaultValue: null,
                description: "",
                name: "flexShrink",
                required: !1,
                type: {
                  name: "enum",
                  value: [{ value: '"0"' }, { value: '"1"' }],
                },
              },
              flexWrap: {
                defaultValue: null,
                description: "",
                name: "flexWrap",
                required: !1,
                type: {
                  name: "enum",
                  value: [{ value: '"nowrap"' }, { value: '"wrap"' }],
                },
              },
              fontSize: {
                defaultValue: null,
                description: "",
                name: "fontSize",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"h1"' },
                    { value: '"h2"' },
                    { value: '"h3"' },
                    { value: '"h4"' },
                    { value: '"h5"' },
                    { value: '"h6"' },
                    { value: '"body_lg"' },
                    { value: '"body_md"' },
                    { value: '"body_sm"' },
                    { value: '"body_xl"' },
                    { value: '"body_xs"' },
                    { value: '"h0"' },
                    { value: '"root"' },
                  ],
                },
              },
              fontWeight: {
                defaultValue: null,
                description: "",
                name: "fontWeight",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"normal"' },
                    { value: '"bold"' },
                    { value: '"medium"' },
                    { value: '"light"' },
                    { value: '"extrabold"' },
                    { value: '"semibold"' },
                  ],
                },
              },
              height: {
                defaultValue: null,
                description: "",
                name: "height",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '""' },
                    { value: '"none"' },
                    { value: '"auto"' },
                    { value: '"min-content"' },
                    { value: '"50%"' },
                    { value: '"100%"' },
                    { value: '"100vh"' },
                    { value: '"25%"' },
                    { value: '"25vh"' },
                    { value: '"50vh"' },
                    { value: '"75%"' },
                    { value: '"75vh"' },
                    { value: '"90vh"' },
                    { value: '"spacing_0.25"' },
                    { value: '"spacing_0.5"' },
                    { value: '"spacing_1"' },
                    { value: '"spacing_1.5"' },
                    { value: '"spacing_2"' },
                    { value: '"spacing_3"' },
                    { value: '"spacing_4"' },
                    { value: '"spacing_5"' },
                    { value: '"spacing_6"' },
                  ],
                },
              },
              inset: {
                defaultValue: null,
                description: "",
                name: "inset",
                required: !1,
                type: { name: '"0"' },
              },
              isolation: {
                defaultValue: null,
                description: "",
                name: "isolation",
                required: !1,
                type: { name: '"isolate"' },
              },
              justifyContent: {
                defaultValue: null,
                description: "",
                name: "justifyContent",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"space-around"' },
                    { value: '"space-between"' },
                    { value: '"stretch"' },
                    { value: '"center"' },
                    { value: '"end"' },
                    { value: '"start"' },
                  ],
                },
              },
              left: {
                defaultValue: null,
                description: "",
                name: "left",
                required: !1,
                type: { name: '"0"' },
              },
              lineHeight: {
                defaultValue: null,
                description: "",
                name: "lineHeight",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"h1"' },
                    { value: '"h2"' },
                    { value: '"h3"' },
                    { value: '"h4"' },
                    { value: '"h5"' },
                    { value: '"h6"' },
                    { value: '"body_lg"' },
                    { value: '"body_md"' },
                    { value: '"body_sm"' },
                    { value: '"body_xl"' },
                    { value: '"body_xs"' },
                    { value: '"h0"' },
                    { value: '"root"' },
                  ],
                },
              },
              margin: {
                defaultValue: null,
                description: "",
                name: "margin",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"none"' },
                    { value: '"auto"' },
                    { value: '"spacing_0.25"' },
                    { value: '"spacing_0.5"' },
                    { value: '"spacing_1"' },
                    { value: '"spacing_1.5"' },
                    { value: '"spacing_2"' },
                    { value: '"spacing_3"' },
                    { value: '"spacing_4"' },
                    { value: '"spacing_5"' },
                    { value: '"spacing_6"' },
                  ],
                },
              },
              marginBottom: {
                defaultValue: null,
                description: "",
                name: "marginBottom",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"none"' },
                    { value: '"auto"' },
                    { value: '"spacing_0.25"' },
                    { value: '"spacing_0.5"' },
                    { value: '"spacing_1"' },
                    { value: '"spacing_1.5"' },
                    { value: '"spacing_2"' },
                    { value: '"spacing_3"' },
                    { value: '"spacing_4"' },
                    { value: '"spacing_5"' },
                    { value: '"spacing_6"' },
                  ],
                },
              },
              marginLeft: {
                defaultValue: null,
                description: "",
                name: "marginLeft",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"none"' },
                    { value: '"auto"' },
                    { value: '"spacing_0.25"' },
                    { value: '"spacing_0.5"' },
                    { value: '"spacing_1"' },
                    { value: '"spacing_1.5"' },
                    { value: '"spacing_2"' },
                    { value: '"spacing_3"' },
                    { value: '"spacing_4"' },
                    { value: '"spacing_5"' },
                    { value: '"spacing_6"' },
                  ],
                },
              },
              marginRight: {
                defaultValue: null,
                description: "",
                name: "marginRight",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"none"' },
                    { value: '"auto"' },
                    { value: '"spacing_0.25"' },
                    { value: '"spacing_0.5"' },
                    { value: '"spacing_1"' },
                    { value: '"spacing_1.5"' },
                    { value: '"spacing_2"' },
                    { value: '"spacing_3"' },
                    { value: '"spacing_4"' },
                    { value: '"spacing_5"' },
                    { value: '"spacing_6"' },
                  ],
                },
              },
              marginTop: {
                defaultValue: null,
                description: "",
                name: "marginTop",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"none"' },
                    { value: '"auto"' },
                    { value: '"spacing_0.25"' },
                    { value: '"spacing_0.5"' },
                    { value: '"spacing_1"' },
                    { value: '"spacing_1.5"' },
                    { value: '"spacing_2"' },
                    { value: '"spacing_3"' },
                    { value: '"spacing_4"' },
                    { value: '"spacing_5"' },
                    { value: '"spacing_6"' },
                  ],
                },
              },
              maxHeight: {
                defaultValue: null,
                description: "",
                name: "maxHeight",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '""' },
                    { value: '"none"' },
                    { value: '"auto"' },
                    { value: '"min-content"' },
                    { value: '"50%"' },
                    { value: '"100%"' },
                    { value: '"100vh"' },
                    { value: '"25%"' },
                    { value: '"25vh"' },
                    { value: '"50vh"' },
                    { value: '"75%"' },
                    { value: '"75vh"' },
                    { value: '"90vh"' },
                    { value: '"spacing_0.25"' },
                    { value: '"spacing_0.5"' },
                    { value: '"spacing_1"' },
                    { value: '"spacing_1.5"' },
                    { value: '"spacing_2"' },
                    { value: '"spacing_3"' },
                    { value: '"spacing_4"' },
                    { value: '"spacing_5"' },
                    { value: '"spacing_6"' },
                  ],
                },
              },
              maxWidth: {
                defaultValue: null,
                description: "",
                name: "maxWidth",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '""' },
                    { value: '"none"' },
                    { value: '"auto"' },
                    { value: '"max-content"' },
                    { value: '"min-content"' },
                    { value: '"50%"' },
                    { value: '"100%"' },
                    { value: '"25%"' },
                    { value: '"spacing_0.25"' },
                    { value: '"spacing_0.5"' },
                    { value: '"spacing_1"' },
                    { value: '"spacing_1.5"' },
                    { value: '"spacing_2"' },
                    { value: '"spacing_3"' },
                    { value: '"spacing_4"' },
                    { value: '"spacing_5"' },
                    { value: '"spacing_6"' },
                    { value: '"col_1"' },
                    { value: '"col_10"' },
                    { value: '"col_11"' },
                    { value: '"col_12"' },
                    { value: '"col_2"' },
                    { value: '"col_3"' },
                    { value: '"col_4"' },
                    { value: '"col_5"' },
                    { value: '"col_6"' },
                    { value: '"col_7"' },
                    { value: '"col_8"' },
                    { value: '"col_9"' },
                  ],
                },
              },
              minHeight: {
                defaultValue: null,
                description: "",
                name: "minHeight",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '""' },
                    { value: '"none"' },
                    { value: '"auto"' },
                    { value: '"min-content"' },
                    { value: '"50%"' },
                    { value: '"100%"' },
                    { value: '"100vh"' },
                    { value: '"25%"' },
                    { value: '"25vh"' },
                    { value: '"50vh"' },
                    { value: '"75%"' },
                    { value: '"75vh"' },
                    { value: '"90vh"' },
                    { value: '"spacing_0.25"' },
                    { value: '"spacing_0.5"' },
                    { value: '"spacing_1"' },
                    { value: '"spacing_1.5"' },
                    { value: '"spacing_2"' },
                    { value: '"spacing_3"' },
                    { value: '"spacing_4"' },
                    { value: '"spacing_5"' },
                    { value: '"spacing_6"' },
                  ],
                },
              },
              minWidth: {
                defaultValue: null,
                description: "",
                name: "minWidth",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '""' },
                    { value: '"none"' },
                    { value: '"auto"' },
                    { value: '"max-content"' },
                    { value: '"min-content"' },
                    { value: '"50%"' },
                    { value: '"100%"' },
                    { value: '"25%"' },
                    { value: '"spacing_0.25"' },
                    { value: '"spacing_0.5"' },
                    { value: '"spacing_1"' },
                    { value: '"spacing_1.5"' },
                    { value: '"spacing_2"' },
                    { value: '"spacing_3"' },
                    { value: '"spacing_4"' },
                    { value: '"spacing_5"' },
                    { value: '"spacing_6"' },
                    { value: '"col_1"' },
                    { value: '"col_10"' },
                    { value: '"col_11"' },
                    { value: '"col_12"' },
                    { value: '"col_2"' },
                    { value: '"col_3"' },
                    { value: '"col_4"' },
                    { value: '"col_5"' },
                    { value: '"col_6"' },
                    { value: '"col_7"' },
                    { value: '"col_8"' },
                    { value: '"col_9"' },
                  ],
                },
              },
              overflow: {
                defaultValue: null,
                description: "",
                name: "overflow",
                required: !1,
                type: { name: '"hidden"' },
              },
              overflowY: {
                defaultValue: null,
                description: "",
                name: "overflowY",
                required: !1,
                type: { name: '"auto"' },
              },
              right: {
                defaultValue: null,
                description: "",
                name: "right",
                required: !1,
                type: { name: '"0"' },
              },
              textAlign: {
                defaultValue: null,
                description: "",
                name: "textAlign",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"left"' },
                    { value: '"right"' },
                    { value: '"center"' },
                  ],
                },
              },
              textDecoration: {
                defaultValue: null,
                description: "",
                name: "textDecoration",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"none"' },
                    { value: '"line-through"' },
                    { value: '"underline"' },
                  ],
                },
              },
              textTransform: {
                defaultValue: null,
                description: "",
                name: "textTransform",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"capitalize"' },
                    { value: '"lowercase"' },
                    { value: '"uppercase"' },
                  ],
                },
              },
              top: {
                defaultValue: null,
                description: "",
                name: "top",
                required: !1,
                type: { name: '"0"' },
              },
              whiteSpace: {
                defaultValue: null,
                description: "",
                name: "whiteSpace",
                required: !1,
                type: {
                  name: "enum",
                  value: [{ value: '"normal"' }, { value: '"nowrap"' }],
                },
              },
              zIndex: {
                defaultValue: null,
                description: "",
                name: "zIndex",
                required: !1,
                type: {
                  name: "enum",
                  value: [{ value: '"1"' }, { value: '"-1"' }],
                },
              },
              fontStyle: {
                defaultValue: null,
                description: "",
                name: "fontStyle",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"h1"' },
                    { value: '"h2"' },
                    { value: '"h3"' },
                    { value: '"h4"' },
                    { value: '"h5"' },
                    { value: '"h6"' },
                    { value: '"body_lg"' },
                    { value: '"body_md"' },
                    { value: '"body_sm"' },
                    { value: '"body_xl"' },
                    { value: '"body_xs"' },
                    { value: '"h0"' },
                    { value: '"root"' },
                  ],
                },
              },
              marginX: {
                defaultValue: null,
                description: "",
                name: "marginX",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"none"' },
                    { value: '"auto"' },
                    { value: '"spacing_0.25"' },
                    { value: '"spacing_0.5"' },
                    { value: '"spacing_1"' },
                    { value: '"spacing_1.5"' },
                    { value: '"spacing_2"' },
                    { value: '"spacing_3"' },
                    { value: '"spacing_4"' },
                    { value: '"spacing_5"' },
                    { value: '"spacing_6"' },
                  ],
                },
              },
              marginY: {
                defaultValue: null,
                description: "",
                name: "marginY",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"none"' },
                    { value: '"auto"' },
                    { value: '"spacing_0.25"' },
                    { value: '"spacing_0.5"' },
                    { value: '"spacing_1"' },
                    { value: '"spacing_1.5"' },
                    { value: '"spacing_2"' },
                    { value: '"spacing_3"' },
                    { value: '"spacing_4"' },
                    { value: '"spacing_5"' },
                    { value: '"spacing_6"' },
                  ],
                },
              },
              placeItems: {
                defaultValue: null,
                description: "",
                name: "placeItems",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"stretch"' },
                    { value: '"center"' },
                    { value: '"end"' },
                    { value: '"start"' },
                  ],
                },
              },
              display: {
                defaultValue: null,
                description: "",
                name: "display",
                required: !1,
                type: {
                  name: 'ConditionalStyle<Values<MapLeafNodes<{ block: string; flex: string; grid: string; inline: string; "inline-block": string; "inline-flex": string; none: string; table: string; "table-cell": string; }, CSSVarFunction>, { ...; }>>',
                },
              },
              flexDirection: {
                defaultValue: null,
                description: "",
                name: "flexDirection",
                required: !1,
                type: {
                  name: 'ConditionalStyle<Values<("column" | "column-reverse" | "row" | "row-reverse")[], { defaultClass: string; conditions: { mobile: string; tablet: string; desktop: string; }; }>>',
                },
              },
              gap: {
                defaultValue: null,
                description: "",
                name: "gap",
                required: !1,
                type: {
                  name: 'ConditionalStyle<Values<MapLeafNodes<{ auto: string; none: string; "spacing_0.25": string; "spacing_0.5": string; spacing_1: string; "spacing_1.5": string; spacing_2: string; spacing_3: string; spacing_4: string; spacing_5: string; spacing_6: string; }, CSSVarFunction>, { ...; }>>',
                },
              },
              gridTemplateColumns: {
                defaultValue: null,
                description: "",
                name: "gridTemplateColumns",
                required: !1,
                type: {
                  name: 'ConditionalStyle<Values<MapLeafNodes<{ "1_2": string; "1_3": string; "1x": string; "2_1": string; "2x": string; "3_1": string; "3x": string; "4x": string; "5_7": string; "5x": string; "6x": string; "7_5": string; "7x": string; }, CSSVarFunction>, { ...; }>>',
                },
              },
              padding: {
                defaultValue: null,
                description: "",
                name: "padding",
                required: !1,
                type: {
                  name: 'ConditionalStyle<Values<MapLeafNodes<{ auto: string; none: string; "spacing_0.25": string; "spacing_0.5": string; spacing_1: string; "spacing_1.5": string; spacing_2: string; spacing_3: string; spacing_4: string; spacing_5: string; spacing_6: string; }, CSSVarFunction>, { ...; }>>',
                },
              },
              paddingBottom: {
                defaultValue: null,
                description: "",
                name: "paddingBottom",
                required: !1,
                type: {
                  name: 'ConditionalStyle<Values<MapLeafNodes<{ auto: string; none: string; "spacing_0.25": string; "spacing_0.5": string; spacing_1: string; "spacing_1.5": string; spacing_2: string; spacing_3: string; spacing_4: string; spacing_5: string; spacing_6: string; }, CSSVarFunction>, { ...; }>>',
                },
              },
              paddingLeft: {
                defaultValue: null,
                description: "",
                name: "paddingLeft",
                required: !1,
                type: {
                  name: 'ConditionalStyle<Values<MapLeafNodes<{ auto: string; none: string; "spacing_0.25": string; "spacing_0.5": string; spacing_1: string; "spacing_1.5": string; spacing_2: string; spacing_3: string; spacing_4: string; spacing_5: string; spacing_6: string; }, CSSVarFunction>, { ...; }>>',
                },
              },
              paddingRight: {
                defaultValue: null,
                description: "",
                name: "paddingRight",
                required: !1,
                type: {
                  name: 'ConditionalStyle<Values<MapLeafNodes<{ auto: string; none: string; "spacing_0.25": string; "spacing_0.5": string; spacing_1: string; "spacing_1.5": string; spacing_2: string; spacing_3: string; spacing_4: string; spacing_5: string; spacing_6: string; }, CSSVarFunction>, { ...; }>>',
                },
              },
              paddingTop: {
                defaultValue: null,
                description: "",
                name: "paddingTop",
                required: !1,
                type: {
                  name: 'ConditionalStyle<Values<MapLeafNodes<{ auto: string; none: string; "spacing_0.25": string; "spacing_0.5": string; spacing_1: string; "spacing_1.5": string; spacing_2: string; spacing_3: string; spacing_4: string; spacing_5: string; spacing_6: string; }, CSSVarFunction>, { ...; }>>',
                },
              },
              position: {
                defaultValue: null,
                description: "",
                name: "position",
                required: !1,
                type: {
                  name: 'ConditionalStyle<Values<("absolute" | "relative" | "sticky")[], { defaultClass: string; conditions: { mobile: string; tablet: string; desktop: string; }; }>>',
                },
              },
              width: {
                defaultValue: null,
                description: "",
                name: "width",
                required: !1,
                type: {
                  name: 'ConditionalStyle<Values<{ auto: CSSVarFunction; none: CSSVarFunction; "spacing_0.25": CSSVarFunction; "spacing_0.5": CSSVarFunction; spacing_1: CSSVarFunction; ... 23 more ...; "min-content": CSSVarFunction; }, { ...; }>>',
                },
              },
              paddingX: {
                defaultValue: null,
                description: "",
                name: "paddingX",
                required: !1,
                type: {
                  name: 'ConditionalStyle<Values<MapLeafNodes<{ auto: string; none: string; "spacing_0.25": string; "spacing_0.5": string; spacing_1: string; "spacing_1.5": string; spacing_2: string; spacing_3: string; spacing_4: string; spacing_5: string; spacing_6: string; }, CSSVarFunction>, { ...; }>>',
                },
              },
              paddingY: {
                defaultValue: null,
                description: "",
                name: "paddingY",
                required: !1,
                type: {
                  name: 'ConditionalStyle<Values<MapLeafNodes<{ auto: string; none: string; "spacing_0.25": string; "spacing_0.5": string; spacing_1: string; "spacing_1.5": string; spacing_2: string; spacing_3: string; spacing_4: string; spacing_5: string; spacing_6: string; }, CSSVarFunction>, { ...; }>>',
                },
              },
              labelProps: {
                defaultValue: null,
                description: "",
                name: "labelProps",
                required: !1,
                type: { name: "LabelProps" },
              },
              wrapperProps: {
                defaultValue: null,
                description: "",
                name: "wrapperProps",
                required: !1,
                type: { name: "BoxProps" },
              },
              defaultValue: {
                defaultValue: null,
                description: "",
                name: "defaultValue",
                required: !1,
                type: { name: "string | number" },
              },
              description: {
                defaultValue: null,
                description: "",
                name: "description",
                required: !1,
                type: { name: "string" },
              },
              errorMessage: {
                defaultValue: null,
                description: "Message to render when erroring.",
                name: "errorMessage",
                required: !1,
                type: { name: "string" },
              },
              id: {
                defaultValue: null,
                description: "",
                name: "id",
                required: !0,
                type: { name: "string" },
              },
              invalid: {
                defaultValue: null,
                description: "",
                name: "invalid",
                required: !1,
                type: { name: "boolean" },
              },
              isLabelVisible: {
                defaultValue: null,
                description: "",
                name: "isLabelVisible",
                required: !1,
                type: { name: "boolean" },
              },
              items: {
                defaultValue: null,
                description: "",
                name: "items",
                required: !0,
                type: { name: "RadioButtonCardShape[]" },
              },
              label: {
                defaultValue: null,
                description: "",
                name: "label",
                required: !0,
                type: { name: "string" },
              },
              labelTooltip: {
                defaultValue: null,
                description: "",
                name: "labelTooltip",
                required: !1,
                type: { name: "string" },
              },
              name: {
                defaultValue: null,
                description: "",
                name: "name",
                required: !0,
                type: { name: "string" },
              },
              onChange: {
                defaultValue: null,
                description: "",
                name: "onChange",
                required: !1,
                type: { name: "(value: string) => void" },
              },
              radioButtonInputProps: {
                defaultValue: null,
                description: "",
                name: "radioButtonInputProps",
                required: !1,
                type: { name: "RadioButtonInputProps" },
              },
              required: {
                defaultValue: null,
                description: "",
                name: "required",
                required: !1,
                type: { name: "boolean" },
              },
              value: {
                defaultValue: null,
                description: "",
                name: "value",
                required: !1,
                type: { name: "string" },
              },
              validateFunction: {
                defaultValue: null,
                description:
                  "Callback for validation, else simply validates is non-empty.",
                name: "validateFunction",
                required: !1,
                type: { name: "(value: string) => boolean" },
              },
            },
          }),
          "undefined" != typeof STORYBOOK_REACT_CLASSES &&
            (STORYBOOK_REACT_CLASSES[
              "src/components/form/sub_components/form_radio_button_cards.comp.tsx#FormRadioButtonCards"
            ] = {
              docgenInfo: FormRadioButtonCards.__docgenInfo,
              name: "FormRadioButtonCards",
              path: "src/components/form/sub_components/form_radio_button_cards.comp.tsx#FormRadioButtonCards",
            });
      } catch (__react_docgen_typescript_loader_error) {}
      var select_single_comp = __webpack_require__(
        "./src/components/select/select_single/select_single.comp.tsx"
      );
      function FormSelectSingle({
        defaultValue,
        items,
        name,
        onChange: onChangeParent,
        ...rest
      }) {
        const { control } = (0, index_esm.Gc)(),
          {
            field: { onChange, ref },
            fieldState: { error },
          } = (0, index_esm.bc)({
            control,
            defaultValue,
            name,
            rules: { required: !0 },
          }),
          handleChange = (0, react.useCallback)(
            (changes) => {
              onChange(changes.selectedItem?.value), onChangeParent?.(changes);
            },
            [onChange, onChangeParent]
          ),
          defaultItem = (({ items, value }) =>
            items.find((item) => item.value.toString() === value?.toString()))({
            items,
            value: defaultValue,
          });
        return (0, jsx_runtime.jsx)(select_single_comp.N, {
          initialSelectedItem: defaultItem,
          invalid: !!error,
          items,
          name,
          onChange: handleChange,
          ref,
          ...rest,
        });
      }
      FormSelectSingle.displayName = "FormSelectSingle";
      try {
        (FormSelectSingle.displayName = "FormSelectSingle"),
          (FormSelectSingle.__docgenInfo = {
            description: "",
            displayName: "FormSelectSingle",
            props: {
              id: {
                defaultValue: null,
                description: "",
                name: "id",
                required: !1,
                type: { name: "string" },
              },
              label: {
                defaultValue: null,
                description: "",
                name: "label",
                required: !1,
                type: { name: "string" },
              },
              disabled: {
                defaultValue: null,
                description: "",
                name: "disabled",
                required: !1,
                type: { name: "boolean" },
              },
              errorMessage: {
                defaultValue: null,
                description: "",
                name: "errorMessage",
                required: !1,
                type: { name: "string" },
              },
              initialHighlightedItem: {
                defaultValue: null,
                description: "",
                name: "initialHighlightedItem",
                required: !1,
                type: { name: "SelectItemShape" },
              },
              inputProps: {
                defaultValue: null,
                description: "",
                name: "inputProps",
                required: !1,
                type: { name: "Partial<InputProps>" },
              },
              invalid: {
                defaultValue: null,
                description: "",
                name: "invalid",
                required: !1,
                type: { name: "boolean" },
              },
              isClearable: {
                defaultValue: null,
                description: "",
                name: "isClearable",
                required: !1,
                type: { name: "boolean" },
              },
              isFilterable: {
                defaultValue: null,
                description: "",
                name: "isFilterable",
                required: !1,
                type: { name: "boolean" },
              },
              isOpen: {
                defaultValue: null,
                description: "",
                name: "isOpen",
                required: !1,
                type: { name: "boolean" },
              },
              items: {
                defaultValue: null,
                description: "",
                name: "items",
                required: !0,
                type: { name: "SelectItemShape[]" },
              },
              name: {
                defaultValue: null,
                description: "",
                name: "name",
                required: !0,
                type: { name: "string" },
              },
              onIsOpenChange: {
                defaultValue: null,
                description: "",
                name: "onIsOpenChange",
                required: !1,
                type: {
                  name: "(changes: UseComboboxStateChange<SelectItemShape>) => void",
                },
              },
              size: {
                defaultValue: null,
                description: "",
                name: "size",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"lg"' },
                    { value: '"md"' },
                    { value: '"sm"' },
                  ],
                },
              },
              slotLeft: {
                defaultValue: null,
                description: "",
                name: "slotLeft",
                required: !1,
                type: { name: "ReactNode" },
              },
              slotRight: {
                defaultValue: null,
                description: "",
                name: "slotRight",
                required: !1,
                type: { name: "ReactNode" },
              },
              labelProps: {
                defaultValue: null,
                description: "",
                name: "labelProps",
                required: !1,
                type: { name: "LabelProps" },
              },
              wrapperProps: {
                defaultValue: null,
                description: "",
                name: "wrapperProps",
                required: !1,
                type: { name: "BoxProps" },
              },
              initialSelectedItem: {
                defaultValue: null,
                description: "",
                name: "initialSelectedItem",
                required: !1,
                type: { name: "SelectItemShape" },
              },
              itemToString: {
                defaultValue: null,
                description: "",
                name: "itemToString",
                required: !1,
                type: { name: "(item: SelectItemShape) => string" },
              },
              labelTooltip: {
                defaultValue: null,
                description: "Optional tooltip for label",
                name: "labelTooltip",
                required: !1,
                type: { name: "string" },
              },
              onChange: {
                defaultValue: null,
                description: "",
                name: "onChange",
                required: !1,
                type: {
                  name: "(changes: UseComboboxStateChange<SelectItemShape>) => void",
                },
              },
              placeholder: {
                defaultValue: null,
                description: "",
                name: "placeholder",
                required: !0,
                type: { name: "string" },
              },
              defaultValue: {
                defaultValue: null,
                description: "",
                name: "defaultValue",
                required: !1,
                type: { name: "string | number" },
              },
            },
          }),
          "undefined" != typeof STORYBOOK_REACT_CLASSES &&
            (STORYBOOK_REACT_CLASSES[
              "src/components/form/sub_components/form_select_single.comp.tsx#FormSelectSingle"
            ] = {
              docgenInfo: FormSelectSingle.__docgenInfo,
              name: "FormSelectSingle",
              path: "src/components/form/sub_components/form_select_single.comp.tsx#FormSelectSingle",
            });
      } catch (__react_docgen_typescript_loader_error) {}
      var slider_comp = __webpack_require__(
        "./src/components/slider/slider.comp.tsx"
      );
      function FormSlider({
        defaultValue: defaultValueArray,
        errorMessage,
        name,
        required,
        validateFunction,
        wrapperProps,
        ...rest
      }) {
        const { control } = (0, index_esm.Gc)(),
          {
            field: { onBlur, onChange, ref },
            fieldState: { error },
          } = (0, index_esm.bc)({
            control,
            name,
            rules: {
              required: required && errorMessage,
              validate: (value) =>
                validateFunction
                  ? validateFunction(value) || errorMessage
                  : !!value,
            },
            ...(defaultValueArray &&
              Array.isArray(defaultValueArray) && {
                defaultValue: defaultValueArray[0],
              }),
          }),
          handleChange = (0, react.useCallback)(
            (value) => {
              const [firstValue] = value || [];
              return onChange(firstValue);
            },
            [onChange]
          );
        return (0, jsx_runtime.jsx)(slider_comp.i, {
          "aria-required": required,
          errorMessage,
          invalid: !!error,
          name,
          onBlur,
          onValueChange: handleChange,
          ref,
          wrapperProps,
          ...rest,
        });
      }
      FormSlider.displayName = "FormSlider";
      try {
        (FormSlider.displayName = "FormSlider"),
          (FormSlider.__docgenInfo = {
            description: "",
            displayName: "FormSlider",
            props: {
              labelProps: {
                defaultValue: null,
                description: "",
                name: "labelProps",
                required: !1,
                type: { name: "LabelProps" },
              },
              wrapperProps: {
                defaultValue: null,
                description: "",
                name: "wrapperProps",
                required: !1,
                type: { name: "BoxProps" },
              },
              content: {
                defaultValue: null,
                description: "",
                name: "content",
                required: !1,
                type: { name: "string" },
              },
              translate: {
                defaultValue: null,
                description: "",
                name: "translate",
                required: !1,
                type: {
                  name: "enum",
                  value: [{ value: '"yes"' }, { value: '"no"' }],
                },
              },
              hidden: {
                defaultValue: null,
                description: "",
                name: "hidden",
                required: !1,
                type: { name: "boolean" },
              },
              style: {
                defaultValue: null,
                description: "",
                name: "style",
                required: !1,
                type: { name: "CSSProperties" },
              },
              disabled: {
                defaultValue: null,
                description:
                  "Is input disabled. Mapped to html5 <input> `disabled` attribute and `aria-disabled` attribute.",
                name: "disabled",
                required: !1,
                type: { name: "boolean" },
              },
              name: {
                defaultValue: null,
                description:
                  "Name of the form control. Submitted with the form as part of a name/value pair",
                name: "name",
                required: !1,
                type: { name: "string" },
              },
              slot: {
                defaultValue: null,
                description: "",
                name: "slot",
                required: !1,
                type: { name: "string" },
              },
              title: {
                defaultValue: null,
                description: "",
                name: "title",
                required: !1,
                type: { name: "string" },
              },
              key: {
                defaultValue: null,
                description: "",
                name: "key",
                required: !1,
                type: { name: "Key" },
              },
              placeholder: {
                defaultValue: null,
                description:
                  "Text shown before user has interacted with the input.",
                name: "placeholder",
                required: !1,
                type: { name: "string" },
              },
              value: {
                defaultValue: null,
                description: "",
                name: "value",
                required: !1,
                type: { name: "number[]" },
              },
              onChange: {
                defaultValue: null,
                description: "",
                name: "onChange",
                required: !1,
                type: { name: "FormEventHandler<HTMLDivElement>" },
              },
              defaultChecked: {
                defaultValue: null,
                description: "",
                name: "defaultChecked",
                required: !1,
                type: { name: "boolean" },
              },
              defaultValue: {
                defaultValue: null,
                description: "",
                name: "defaultValue",
                required: !1,
                type: { name: "number[]" },
              },
              suppressContentEditableWarning: {
                defaultValue: null,
                description: "",
                name: "suppressContentEditableWarning",
                required: !1,
                type: { name: "boolean" },
              },
              suppressHydrationWarning: {
                defaultValue: null,
                description: "",
                name: "suppressHydrationWarning",
                required: !1,
                type: { name: "boolean" },
              },
              accessKey: {
                defaultValue: null,
                description: "",
                name: "accessKey",
                required: !1,
                type: { name: "string" },
              },
              autoFocus: {
                defaultValue: null,
                description: "",
                name: "autoFocus",
                required: !1,
                type: { name: "boolean" },
              },
              className: {
                defaultValue: null,
                description: "",
                name: "className",
                required: !1,
                type: { name: "string" },
              },
              contentEditable: {
                defaultValue: null,
                description: "",
                name: "contentEditable",
                required: !1,
                type: { name: '"inherit" | Booleanish' },
              },
              contextMenu: {
                defaultValue: null,
                description: "",
                name: "contextMenu",
                required: !1,
                type: { name: "string" },
              },
              dir: {
                defaultValue: null,
                description: "",
                name: "dir",
                required: !1,
                type: {
                  name: "enum",
                  value: [{ value: '"ltr"' }, { value: '"rtl"' }],
                },
              },
              draggable: {
                defaultValue: null,
                description: "",
                name: "draggable",
                required: !1,
                type: { name: "Booleanish" },
              },
              id: {
                defaultValue: null,
                description: "",
                name: "id",
                required: !1,
                type: { name: "string" },
              },
              lang: {
                defaultValue: null,
                description: "",
                name: "lang",
                required: !1,
                type: { name: "string" },
              },
              nonce: {
                defaultValue: null,
                description: "",
                name: "nonce",
                required: !1,
                type: { name: "string" },
              },
              spellCheck: {
                defaultValue: null,
                description: "",
                name: "spellCheck",
                required: !1,
                type: { name: "Booleanish" },
              },
              tabIndex: {
                defaultValue: null,
                description: "",
                name: "tabIndex",
                required: !1,
                type: { name: "number" },
              },
              radioGroup: {
                defaultValue: null,
                description: "",
                name: "radioGroup",
                required: !1,
                type: { name: "string" },
              },
              role: {
                defaultValue: null,
                description: "Aria role to use for the input (e.g. `search`).",
                name: "role",
                required: !1,
                type: { name: "AriaRole" },
              },
              about: {
                defaultValue: null,
                description: "",
                name: "about",
                required: !1,
                type: { name: "string" },
              },
              datatype: {
                defaultValue: null,
                description: "",
                name: "datatype",
                required: !1,
                type: { name: "string" },
              },
              inlist: {
                defaultValue: null,
                description: "",
                name: "inlist",
                required: !1,
                type: { name: "any" },
              },
              prefix: {
                defaultValue: null,
                description: "",
                name: "prefix",
                required: !1,
                type: { name: "string" },
              },
              property: {
                defaultValue: null,
                description: "",
                name: "property",
                required: !1,
                type: { name: "string" },
              },
              rel: {
                defaultValue: null,
                description: "",
                name: "rel",
                required: !1,
                type: { name: "string" },
              },
              resource: {
                defaultValue: null,
                description: "",
                name: "resource",
                required: !1,
                type: { name: "string" },
              },
              rev: {
                defaultValue: null,
                description: "",
                name: "rev",
                required: !1,
                type: { name: "string" },
              },
              typeof: {
                defaultValue: null,
                description: "",
                name: "typeof",
                required: !1,
                type: { name: "string" },
              },
              vocab: {
                defaultValue: null,
                description: "",
                name: "vocab",
                required: !1,
                type: { name: "string" },
              },
              autoCapitalize: {
                defaultValue: null,
                description: "",
                name: "autoCapitalize",
                required: !1,
                type: { name: "string" },
              },
              autoCorrect: {
                defaultValue: null,
                description: "",
                name: "autoCorrect",
                required: !1,
                type: { name: "string" },
              },
              autoSave: {
                defaultValue: null,
                description: "",
                name: "autoSave",
                required: !1,
                type: { name: "string" },
              },
              itemProp: {
                defaultValue: null,
                description: "",
                name: "itemProp",
                required: !1,
                type: { name: "string" },
              },
              itemScope: {
                defaultValue: null,
                description: "",
                name: "itemScope",
                required: !1,
                type: { name: "boolean" },
              },
              itemType: {
                defaultValue: null,
                description: "",
                name: "itemType",
                required: !1,
                type: { name: "string" },
              },
              itemID: {
                defaultValue: null,
                description: "",
                name: "itemID",
                required: !1,
                type: { name: "string" },
              },
              itemRef: {
                defaultValue: null,
                description: "",
                name: "itemRef",
                required: !1,
                type: { name: "string" },
              },
              results: {
                defaultValue: null,
                description: "",
                name: "results",
                required: !1,
                type: { name: "number" },
              },
              security: {
                defaultValue: null,
                description: "",
                name: "security",
                required: !1,
                type: { name: "string" },
              },
              unselectable: {
                defaultValue: null,
                description: "",
                name: "unselectable",
                required: !1,
                type: {
                  name: "enum",
                  value: [{ value: '"on"' }, { value: '"off"' }],
                },
              },
              inputMode: {
                defaultValue: null,
                description:
                  "Hints at the type of data that might be entered by the user while editing the element or its contents\n@see https://html.spec.whatwg.org/multipage/interaction.html#input-modalities:-the-inputmode-attribute",
                name: "inputMode",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"none"' },
                    { value: '"search"' },
                    { value: '"text"' },
                    { value: '"tel"' },
                    { value: '"url"' },
                    { value: '"email"' },
                    { value: '"numeric"' },
                    { value: '"decimal"' },
                  ],
                },
              },
              is: {
                defaultValue: null,
                description:
                  "Specify that a standard HTML element should behave like a defined custom built-in element\n@see https://html.spec.whatwg.org/multipage/custom-elements.html#attr-is",
                name: "is",
                required: !1,
                type: { name: "string" },
              },
              "aria-activedescendant": {
                defaultValue: null,
                description:
                  "Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.",
                name: "aria-activedescendant",
                required: !1,
                type: { name: "string" },
              },
              "aria-atomic": {
                defaultValue: null,
                description:
                  "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.",
                name: "aria-atomic",
                required: !1,
                type: { name: "Booleanish" },
              },
              "aria-autocomplete": {
                defaultValue: null,
                description:
                  "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be\npresented if they are made.",
                name: "aria-autocomplete",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"none"' },
                    { value: '"both"' },
                    { value: '"inline"' },
                    { value: '"list"' },
                  ],
                },
              },
              "aria-busy": {
                defaultValue: null,
                description:
                  "Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.",
                name: "aria-busy",
                required: !1,
                type: { name: "Booleanish" },
              },
              "aria-checked": {
                defaultValue: null,
                description:
                  'Indicates the current "checked" state of checkboxes, radio buttons, and other widgets.\n@see aria-pressed\n@see aria-selected.',
                name: "aria-checked",
                required: !1,
                type: { name: 'boolean | "mixed" | "false" | "true"' },
              },
              "aria-colcount": {
                defaultValue: null,
                description:
                  "Defines the total number of columns in a table, grid, or treegrid.\n@see aria-colindex.",
                name: "aria-colcount",
                required: !1,
                type: { name: "number" },
              },
              "aria-colindex": {
                defaultValue: null,
                description:
                  "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.\n@see aria-colcount\n@see aria-colspan.",
                name: "aria-colindex",
                required: !1,
                type: { name: "number" },
              },
              "aria-colspan": {
                defaultValue: null,
                description:
                  "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.\n@see aria-colindex\n@see aria-rowspan.",
                name: "aria-colspan",
                required: !1,
                type: { name: "number" },
              },
              "aria-controls": {
                defaultValue: null,
                description:
                  "Identifies the element (or elements) whose contents or presence are controlled by the current element.\n@see aria-owns.",
                name: "aria-controls",
                required: !1,
                type: { name: "string" },
              },
              "aria-current": {
                defaultValue: null,
                description:
                  "Indicates the element that represents the current item within a container or set of related elements.",
                name: "aria-current",
                required: !1,
                type: {
                  name: 'boolean | "page" | "false" | "true" | "time" | "step" | "location" | "date"',
                },
              },
              "aria-describedby": {
                defaultValue: null,
                description:
                  "Identifies the element (or elements) that describes the object.\n@see aria-labelledby",
                name: "aria-describedby",
                required: !1,
                type: { name: "string" },
              },
              "aria-details": {
                defaultValue: null,
                description:
                  "Identifies the element that provides a detailed, extended description for the object.\n@see aria-describedby.",
                name: "aria-details",
                required: !1,
                type: { name: "string" },
              },
              "aria-disabled": {
                defaultValue: null,
                description:
                  "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.\n@see aria-hidden\n@see aria-readonly.",
                name: "aria-disabled",
                required: !1,
                type: { name: "Booleanish" },
              },
              "aria-dropeffect": {
                defaultValue: null,
                description:
                  "Indicates what functions can be performed when a dragged object is released on the drop target.\n@deprecated in ARIA 1.1",
                name: "aria-dropeffect",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"none"' },
                    { value: '"link"' },
                    { value: '"copy"' },
                    { value: '"move"' },
                    { value: '"execute"' },
                    { value: '"popup"' },
                  ],
                },
              },
              "aria-errormessage": {
                defaultValue: null,
                description:
                  "Identifies the element that provides an error message for the object.\n@see aria-invalid\n@see aria-describedby.",
                name: "aria-errormessage",
                required: !1,
                type: { name: "string" },
              },
              "aria-expanded": {
                defaultValue: null,
                description:
                  "Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.",
                name: "aria-expanded",
                required: !1,
                type: { name: "Booleanish" },
              },
              "aria-flowto": {
                defaultValue: null,
                description:
                  "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,\nallows assistive technology to override the general default of reading in document source order.",
                name: "aria-flowto",
                required: !1,
                type: { name: "string" },
              },
              "aria-grabbed": {
                defaultValue: null,
                description:
                  'Indicates an element\'s "grabbed" state in a drag-and-drop operation.\n@deprecated in ARIA 1.1',
                name: "aria-grabbed",
                required: !1,
                type: { name: "Booleanish" },
              },
              "aria-haspopup": {
                defaultValue: null,
                description:
                  "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.",
                name: "aria-haspopup",
                required: !1,
                type: {
                  name: 'boolean | "grid" | "listbox" | "menu" | "false" | "true" | "dialog" | "tree"',
                },
              },
              "aria-hidden": {
                defaultValue: null,
                description:
                  "Indicates whether the element is exposed to an accessibility API.\n@see aria-disabled.",
                name: "aria-hidden",
                required: !1,
                type: { name: "Booleanish" },
              },
              "aria-invalid": {
                defaultValue: null,
                description:
                  "Indicates the entered value does not conform to the format expected by the application.\n@see aria-errormessage.",
                name: "aria-invalid",
                required: !1,
                type: {
                  name: 'boolean | "false" | "true" | "grammar" | "spelling"',
                },
              },
              "aria-keyshortcuts": {
                defaultValue: null,
                description:
                  "Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.",
                name: "aria-keyshortcuts",
                required: !1,
                type: { name: "string" },
              },
              "aria-label": {
                defaultValue: null,
                description:
                  "Defines a string value that labels the current element.\n@see aria-labelledby.",
                name: "aria-label",
                required: !1,
                type: { name: "string" },
              },
              "aria-labelledby": {
                defaultValue: null,
                description:
                  "Identifies the element (or elements) that labels the current element.\n@see aria-describedby.",
                name: "aria-labelledby",
                required: !1,
                type: { name: "string" },
              },
              "aria-level": {
                defaultValue: null,
                description:
                  "Defines the hierarchical level of an element within a structure.",
                name: "aria-level",
                required: !1,
                type: { name: "number" },
              },
              "aria-live": {
                defaultValue: null,
                description:
                  "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.",
                name: "aria-live",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"off"' },
                    { value: '"assertive"' },
                    { value: '"polite"' },
                  ],
                },
              },
              "aria-modal": {
                defaultValue: null,
                description:
                  "Indicates whether an element is modal when displayed.",
                name: "aria-modal",
                required: !1,
                type: { name: "Booleanish" },
              },
              "aria-multiline": {
                defaultValue: null,
                description:
                  "Indicates whether a text box accepts multiple lines of input or only a single line.",
                name: "aria-multiline",
                required: !1,
                type: { name: "Booleanish" },
              },
              "aria-multiselectable": {
                defaultValue: null,
                description:
                  "Indicates that the user may select more than one item from the current selectable descendants.",
                name: "aria-multiselectable",
                required: !1,
                type: { name: "Booleanish" },
              },
              "aria-orientation": {
                defaultValue: null,
                description:
                  "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous.",
                name: "aria-orientation",
                required: !1,
                type: {
                  name: "enum",
                  value: [{ value: '"horizontal"' }, { value: '"vertical"' }],
                },
              },
              "aria-owns": {
                defaultValue: null,
                description:
                  "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship\nbetween DOM elements where the DOM hierarchy cannot be used to represent the relationship.\n@see aria-controls.",
                name: "aria-owns",
                required: !1,
                type: { name: "string" },
              },
              "aria-placeholder": {
                defaultValue: null,
                description:
                  "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.\nA hint could be a sample value or a brief description of the expected format.",
                name: "aria-placeholder",
                required: !1,
                type: { name: "string" },
              },
              "aria-posinset": {
                defaultValue: null,
                description:
                  "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\n@see aria-setsize.",
                name: "aria-posinset",
                required: !1,
                type: { name: "number" },
              },
              "aria-pressed": {
                defaultValue: null,
                description:
                  'Indicates the current "pressed" state of toggle buttons.\n@see aria-checked\n@see aria-selected.',
                name: "aria-pressed",
                required: !1,
                type: { name: 'boolean | "mixed" | "false" | "true"' },
              },
              "aria-readonly": {
                defaultValue: null,
                description:
                  "Indicates that the element is not editable, but is otherwise operable.\n@see aria-disabled.",
                name: "aria-readonly",
                required: !1,
                type: { name: "Booleanish" },
              },
              "aria-relevant": {
                defaultValue: null,
                description:
                  "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.\n@see aria-atomic.",
                name: "aria-relevant",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"all"' },
                    { value: '"text"' },
                    { value: '"additions"' },
                    { value: '"additions removals"' },
                    { value: '"additions text"' },
                    { value: '"removals"' },
                    { value: '"removals additions"' },
                    { value: '"removals text"' },
                    { value: '"text additions"' },
                    { value: '"text removals"' },
                  ],
                },
              },
              "aria-required": {
                defaultValue: null,
                description:
                  "Indicates that user input is required on the element before a form may be submitted.",
                name: "aria-required",
                required: !1,
                type: { name: "Booleanish" },
              },
              "aria-roledescription": {
                defaultValue: null,
                description:
                  "Defines a human-readable, author-localized description for the role of an element.",
                name: "aria-roledescription",
                required: !1,
                type: { name: "string" },
              },
              "aria-rowcount": {
                defaultValue: null,
                description:
                  "Defines the total number of rows in a table, grid, or treegrid.\n@see aria-rowindex.",
                name: "aria-rowcount",
                required: !1,
                type: { name: "number" },
              },
              "aria-rowindex": {
                defaultValue: null,
                description:
                  "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.\n@see aria-rowcount\n@see aria-rowspan.",
                name: "aria-rowindex",
                required: !1,
                type: { name: "number" },
              },
              "aria-rowspan": {
                defaultValue: null,
                description:
                  "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.\n@see aria-rowindex\n@see aria-colspan.",
                name: "aria-rowspan",
                required: !1,
                type: { name: "number" },
              },
              "aria-selected": {
                defaultValue: null,
                description:
                  'Indicates the current "selected" state of various widgets.\n@see aria-checked\n@see aria-pressed.',
                name: "aria-selected",
                required: !1,
                type: { name: "Booleanish" },
              },
              "aria-setsize": {
                defaultValue: null,
                description:
                  "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\n@see aria-posinset.",
                name: "aria-setsize",
                required: !1,
                type: { name: "number" },
              },
              "aria-sort": {
                defaultValue: null,
                description:
                  "Indicates if items in a table or grid are sorted in ascending or descending order.",
                name: "aria-sort",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"none"' },
                    { value: '"ascending"' },
                    { value: '"descending"' },
                    { value: '"other"' },
                  ],
                },
              },
              "aria-valuemax": {
                defaultValue: null,
                description:
                  "Defines the maximum allowed value for a range widget.",
                name: "aria-valuemax",
                required: !1,
                type: { name: "number" },
              },
              "aria-valuemin": {
                defaultValue: null,
                description:
                  "Defines the minimum allowed value for a range widget.",
                name: "aria-valuemin",
                required: !1,
                type: { name: "number" },
              },
              "aria-valuenow": {
                defaultValue: null,
                description:
                  "Defines the current value for a range widget.\n@see aria-valuetext.",
                name: "aria-valuenow",
                required: !1,
                type: { name: "number" },
              },
              "aria-valuetext": {
                defaultValue: null,
                description:
                  "Defines the human readable text alternative of aria-valuenow for a range widget.",
                name: "aria-valuetext",
                required: !1,
                type: { name: "string" },
              },
              dangerouslySetInnerHTML: {
                defaultValue: null,
                description: "",
                name: "dangerouslySetInnerHTML",
                required: !1,
                type: { name: "{ __html: string | TrustedHTML; }" },
              },
              onCopy: {
                defaultValue: null,
                description: "",
                name: "onCopy",
                required: !1,
                type: { name: "ClipboardEventHandler<HTMLDivElement>" },
              },
              onCopyCapture: {
                defaultValue: null,
                description: "",
                name: "onCopyCapture",
                required: !1,
                type: { name: "ClipboardEventHandler<HTMLDivElement>" },
              },
              onCut: {
                defaultValue: null,
                description: "",
                name: "onCut",
                required: !1,
                type: { name: "ClipboardEventHandler<HTMLDivElement>" },
              },
              onCutCapture: {
                defaultValue: null,
                description: "",
                name: "onCutCapture",
                required: !1,
                type: { name: "ClipboardEventHandler<HTMLDivElement>" },
              },
              onPaste: {
                defaultValue: null,
                description: "",
                name: "onPaste",
                required: !1,
                type: { name: "ClipboardEventHandler<HTMLDivElement>" },
              },
              onPasteCapture: {
                defaultValue: null,
                description: "",
                name: "onPasteCapture",
                required: !1,
                type: { name: "ClipboardEventHandler<HTMLDivElement>" },
              },
              onCompositionEnd: {
                defaultValue: null,
                description: "",
                name: "onCompositionEnd",
                required: !1,
                type: { name: "CompositionEventHandler<HTMLDivElement>" },
              },
              onCompositionEndCapture: {
                defaultValue: null,
                description: "",
                name: "onCompositionEndCapture",
                required: !1,
                type: { name: "CompositionEventHandler<HTMLDivElement>" },
              },
              onCompositionStart: {
                defaultValue: null,
                description: "",
                name: "onCompositionStart",
                required: !1,
                type: { name: "CompositionEventHandler<HTMLDivElement>" },
              },
              onCompositionStartCapture: {
                defaultValue: null,
                description: "",
                name: "onCompositionStartCapture",
                required: !1,
                type: { name: "CompositionEventHandler<HTMLDivElement>" },
              },
              onCompositionUpdate: {
                defaultValue: null,
                description: "",
                name: "onCompositionUpdate",
                required: !1,
                type: { name: "CompositionEventHandler<HTMLDivElement>" },
              },
              onCompositionUpdateCapture: {
                defaultValue: null,
                description: "",
                name: "onCompositionUpdateCapture",
                required: !1,
                type: { name: "CompositionEventHandler<HTMLDivElement>" },
              },
              onFocus: {
                defaultValue: null,
                description: "",
                name: "onFocus",
                required: !1,
                type: { name: "FocusEventHandler<HTMLDivElement>" },
              },
              onFocusCapture: {
                defaultValue: null,
                description: "",
                name: "onFocusCapture",
                required: !1,
                type: { name: "FocusEventHandler<HTMLDivElement>" },
              },
              onBlur: {
                defaultValue: null,
                description: "",
                name: "onBlur",
                required: !1,
                type: { name: "FocusEventHandler<HTMLDivElement>" },
              },
              onBlurCapture: {
                defaultValue: null,
                description: "",
                name: "onBlurCapture",
                required: !1,
                type: { name: "FocusEventHandler<HTMLDivElement>" },
              },
              onChangeCapture: {
                defaultValue: null,
                description: "",
                name: "onChangeCapture",
                required: !1,
                type: { name: "FormEventHandler<HTMLDivElement>" },
              },
              onBeforeInput: {
                defaultValue: null,
                description: "",
                name: "onBeforeInput",
                required: !1,
                type: { name: "FormEventHandler<HTMLDivElement>" },
              },
              onBeforeInputCapture: {
                defaultValue: null,
                description: "",
                name: "onBeforeInputCapture",
                required: !1,
                type: { name: "FormEventHandler<HTMLDivElement>" },
              },
              onInput: {
                defaultValue: null,
                description: "",
                name: "onInput",
                required: !1,
                type: { name: "FormEventHandler<HTMLDivElement>" },
              },
              onInputCapture: {
                defaultValue: null,
                description: "",
                name: "onInputCapture",
                required: !1,
                type: { name: "FormEventHandler<HTMLDivElement>" },
              },
              onReset: {
                defaultValue: null,
                description: "",
                name: "onReset",
                required: !1,
                type: { name: "FormEventHandler<HTMLDivElement>" },
              },
              onResetCapture: {
                defaultValue: null,
                description: "",
                name: "onResetCapture",
                required: !1,
                type: { name: "FormEventHandler<HTMLDivElement>" },
              },
              onSubmit: {
                defaultValue: null,
                description: "",
                name: "onSubmit",
                required: !1,
                type: { name: "FormEventHandler<HTMLDivElement>" },
              },
              onSubmitCapture: {
                defaultValue: null,
                description: "",
                name: "onSubmitCapture",
                required: !1,
                type: { name: "FormEventHandler<HTMLDivElement>" },
              },
              onInvalid: {
                defaultValue: null,
                description: "",
                name: "onInvalid",
                required: !1,
                type: { name: "FormEventHandler<HTMLDivElement>" },
              },
              onInvalidCapture: {
                defaultValue: null,
                description: "",
                name: "onInvalidCapture",
                required: !1,
                type: { name: "FormEventHandler<HTMLDivElement>" },
              },
              onLoad: {
                defaultValue: null,
                description: "",
                name: "onLoad",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onLoadCapture: {
                defaultValue: null,
                description: "",
                name: "onLoadCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onError: {
                defaultValue: null,
                description: "",
                name: "onError",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onErrorCapture: {
                defaultValue: null,
                description: "",
                name: "onErrorCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onKeyDown: {
                defaultValue: null,
                description: "",
                name: "onKeyDown",
                required: !1,
                type: { name: "KeyboardEventHandler<HTMLDivElement>" },
              },
              onKeyDownCapture: {
                defaultValue: null,
                description: "",
                name: "onKeyDownCapture",
                required: !1,
                type: { name: "KeyboardEventHandler<HTMLDivElement>" },
              },
              onKeyPress: {
                defaultValue: null,
                description: "@deprecated",
                name: "onKeyPress",
                required: !1,
                type: { name: "KeyboardEventHandler<HTMLDivElement>" },
              },
              onKeyPressCapture: {
                defaultValue: null,
                description: "@deprecated",
                name: "onKeyPressCapture",
                required: !1,
                type: { name: "KeyboardEventHandler<HTMLDivElement>" },
              },
              onKeyUp: {
                defaultValue: null,
                description: "",
                name: "onKeyUp",
                required: !1,
                type: { name: "KeyboardEventHandler<HTMLDivElement>" },
              },
              onKeyUpCapture: {
                defaultValue: null,
                description: "",
                name: "onKeyUpCapture",
                required: !1,
                type: { name: "KeyboardEventHandler<HTMLDivElement>" },
              },
              onAbort: {
                defaultValue: null,
                description: "",
                name: "onAbort",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onAbortCapture: {
                defaultValue: null,
                description: "",
                name: "onAbortCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onCanPlay: {
                defaultValue: null,
                description: "",
                name: "onCanPlay",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onCanPlayCapture: {
                defaultValue: null,
                description: "",
                name: "onCanPlayCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onCanPlayThrough: {
                defaultValue: null,
                description: "",
                name: "onCanPlayThrough",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onCanPlayThroughCapture: {
                defaultValue: null,
                description: "",
                name: "onCanPlayThroughCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onDurationChange: {
                defaultValue: null,
                description: "",
                name: "onDurationChange",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onDurationChangeCapture: {
                defaultValue: null,
                description: "",
                name: "onDurationChangeCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onEmptied: {
                defaultValue: null,
                description: "",
                name: "onEmptied",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onEmptiedCapture: {
                defaultValue: null,
                description: "",
                name: "onEmptiedCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onEncrypted: {
                defaultValue: null,
                description: "",
                name: "onEncrypted",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onEncryptedCapture: {
                defaultValue: null,
                description: "",
                name: "onEncryptedCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onEnded: {
                defaultValue: null,
                description: "",
                name: "onEnded",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onEndedCapture: {
                defaultValue: null,
                description: "",
                name: "onEndedCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onLoadedData: {
                defaultValue: null,
                description: "",
                name: "onLoadedData",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onLoadedDataCapture: {
                defaultValue: null,
                description: "",
                name: "onLoadedDataCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onLoadedMetadata: {
                defaultValue: null,
                description: "",
                name: "onLoadedMetadata",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onLoadedMetadataCapture: {
                defaultValue: null,
                description: "",
                name: "onLoadedMetadataCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onLoadStart: {
                defaultValue: null,
                description: "",
                name: "onLoadStart",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onLoadStartCapture: {
                defaultValue: null,
                description: "",
                name: "onLoadStartCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onPause: {
                defaultValue: null,
                description: "",
                name: "onPause",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onPauseCapture: {
                defaultValue: null,
                description: "",
                name: "onPauseCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onPlay: {
                defaultValue: null,
                description: "",
                name: "onPlay",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onPlayCapture: {
                defaultValue: null,
                description: "",
                name: "onPlayCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onPlaying: {
                defaultValue: null,
                description: "",
                name: "onPlaying",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onPlayingCapture: {
                defaultValue: null,
                description: "",
                name: "onPlayingCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onProgress: {
                defaultValue: null,
                description: "",
                name: "onProgress",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onProgressCapture: {
                defaultValue: null,
                description: "",
                name: "onProgressCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onRateChange: {
                defaultValue: null,
                description: "",
                name: "onRateChange",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onRateChangeCapture: {
                defaultValue: null,
                description: "",
                name: "onRateChangeCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onResize: {
                defaultValue: null,
                description: "",
                name: "onResize",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onResizeCapture: {
                defaultValue: null,
                description: "",
                name: "onResizeCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onSeeked: {
                defaultValue: null,
                description: "",
                name: "onSeeked",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onSeekedCapture: {
                defaultValue: null,
                description: "",
                name: "onSeekedCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onSeeking: {
                defaultValue: null,
                description: "",
                name: "onSeeking",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onSeekingCapture: {
                defaultValue: null,
                description: "",
                name: "onSeekingCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onStalled: {
                defaultValue: null,
                description: "",
                name: "onStalled",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onStalledCapture: {
                defaultValue: null,
                description: "",
                name: "onStalledCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onSuspend: {
                defaultValue: null,
                description: "",
                name: "onSuspend",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onSuspendCapture: {
                defaultValue: null,
                description: "",
                name: "onSuspendCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onTimeUpdate: {
                defaultValue: null,
                description: "",
                name: "onTimeUpdate",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onTimeUpdateCapture: {
                defaultValue: null,
                description: "",
                name: "onTimeUpdateCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onVolumeChange: {
                defaultValue: null,
                description: "",
                name: "onVolumeChange",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onVolumeChangeCapture: {
                defaultValue: null,
                description: "",
                name: "onVolumeChangeCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onWaiting: {
                defaultValue: null,
                description: "",
                name: "onWaiting",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onWaitingCapture: {
                defaultValue: null,
                description: "",
                name: "onWaitingCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onAuxClick: {
                defaultValue: null,
                description: "",
                name: "onAuxClick",
                required: !1,
                type: { name: "MouseEventHandler<HTMLDivElement>" },
              },
              onAuxClickCapture: {
                defaultValue: null,
                description: "",
                name: "onAuxClickCapture",
                required: !1,
                type: { name: "MouseEventHandler<HTMLDivElement>" },
              },
              onClick: {
                defaultValue: null,
                description: "",
                name: "onClick",
                required: !1,
                type: { name: "MouseEventHandler<HTMLDivElement>" },
              },
              onClickCapture: {
                defaultValue: null,
                description: "",
                name: "onClickCapture",
                required: !1,
                type: { name: "MouseEventHandler<HTMLDivElement>" },
              },
              onContextMenu: {
                defaultValue: null,
                description: "",
                name: "onContextMenu",
                required: !1,
                type: { name: "MouseEventHandler<HTMLDivElement>" },
              },
              onContextMenuCapture: {
                defaultValue: null,
                description: "",
                name: "onContextMenuCapture",
                required: !1,
                type: { name: "MouseEventHandler<HTMLDivElement>" },
              },
              onDoubleClick: {
                defaultValue: null,
                description: "",
                name: "onDoubleClick",
                required: !1,
                type: { name: "MouseEventHandler<HTMLDivElement>" },
              },
              onDoubleClickCapture: {
                defaultValue: null,
                description: "",
                name: "onDoubleClickCapture",
                required: !1,
                type: { name: "MouseEventHandler<HTMLDivElement>" },
              },
              onDrag: {
                defaultValue: null,
                description: "",
                name: "onDrag",
                required: !1,
                type: { name: "DragEventHandler<HTMLDivElement>" },
              },
              onDragCapture: {
                defaultValue: null,
                description: "",
                name: "onDragCapture",
                required: !1,
                type: { name: "DragEventHandler<HTMLDivElement>" },
              },
              onDragEnd: {
                defaultValue: null,
                description: "",
                name: "onDragEnd",
                required: !1,
                type: { name: "DragEventHandler<HTMLDivElement>" },
              },
              onDragEndCapture: {
                defaultValue: null,
                description: "",
                name: "onDragEndCapture",
                required: !1,
                type: { name: "DragEventHandler<HTMLDivElement>" },
              },
              onDragEnter: {
                defaultValue: null,
                description: "",
                name: "onDragEnter",
                required: !1,
                type: { name: "DragEventHandler<HTMLDivElement>" },
              },
              onDragEnterCapture: {
                defaultValue: null,
                description: "",
                name: "onDragEnterCapture",
                required: !1,
                type: { name: "DragEventHandler<HTMLDivElement>" },
              },
              onDragExit: {
                defaultValue: null,
                description: "",
                name: "onDragExit",
                required: !1,
                type: { name: "DragEventHandler<HTMLDivElement>" },
              },
              onDragExitCapture: {
                defaultValue: null,
                description: "",
                name: "onDragExitCapture",
                required: !1,
                type: { name: "DragEventHandler<HTMLDivElement>" },
              },
              onDragLeave: {
                defaultValue: null,
                description: "",
                name: "onDragLeave",
                required: !1,
                type: { name: "DragEventHandler<HTMLDivElement>" },
              },
              onDragLeaveCapture: {
                defaultValue: null,
                description: "",
                name: "onDragLeaveCapture",
                required: !1,
                type: { name: "DragEventHandler<HTMLDivElement>" },
              },
              onDragOver: {
                defaultValue: null,
                description: "",
                name: "onDragOver",
                required: !1,
                type: { name: "DragEventHandler<HTMLDivElement>" },
              },
              onDragOverCapture: {
                defaultValue: null,
                description: "",
                name: "onDragOverCapture",
                required: !1,
                type: { name: "DragEventHandler<HTMLDivElement>" },
              },
              onDragStart: {
                defaultValue: null,
                description: "",
                name: "onDragStart",
                required: !1,
                type: { name: "DragEventHandler<HTMLDivElement>" },
              },
              onDragStartCapture: {
                defaultValue: null,
                description: "",
                name: "onDragStartCapture",
                required: !1,
                type: { name: "DragEventHandler<HTMLDivElement>" },
              },
              onDrop: {
                defaultValue: null,
                description: "",
                name: "onDrop",
                required: !1,
                type: { name: "DragEventHandler<HTMLDivElement>" },
              },
              onDropCapture: {
                defaultValue: null,
                description: "",
                name: "onDropCapture",
                required: !1,
                type: { name: "DragEventHandler<HTMLDivElement>" },
              },
              onMouseDown: {
                defaultValue: null,
                description: "",
                name: "onMouseDown",
                required: !1,
                type: { name: "MouseEventHandler<HTMLDivElement>" },
              },
              onMouseDownCapture: {
                defaultValue: null,
                description: "",
                name: "onMouseDownCapture",
                required: !1,
                type: { name: "MouseEventHandler<HTMLDivElement>" },
              },
              onMouseEnter: {
                defaultValue: null,
                description: "",
                name: "onMouseEnter",
                required: !1,
                type: { name: "MouseEventHandler<HTMLDivElement>" },
              },
              onMouseLeave: {
                defaultValue: null,
                description: "",
                name: "onMouseLeave",
                required: !1,
                type: { name: "MouseEventHandler<HTMLDivElement>" },
              },
              onMouseMove: {
                defaultValue: null,
                description: "",
                name: "onMouseMove",
                required: !1,
                type: { name: "MouseEventHandler<HTMLDivElement>" },
              },
              onMouseMoveCapture: {
                defaultValue: null,
                description: "",
                name: "onMouseMoveCapture",
                required: !1,
                type: { name: "MouseEventHandler<HTMLDivElement>" },
              },
              onMouseOut: {
                defaultValue: null,
                description: "",
                name: "onMouseOut",
                required: !1,
                type: { name: "MouseEventHandler<HTMLDivElement>" },
              },
              onMouseOutCapture: {
                defaultValue: null,
                description: "",
                name: "onMouseOutCapture",
                required: !1,
                type: { name: "MouseEventHandler<HTMLDivElement>" },
              },
              onMouseOver: {
                defaultValue: null,
                description: "",
                name: "onMouseOver",
                required: !1,
                type: { name: "MouseEventHandler<HTMLDivElement>" },
              },
              onMouseOverCapture: {
                defaultValue: null,
                description: "",
                name: "onMouseOverCapture",
                required: !1,
                type: { name: "MouseEventHandler<HTMLDivElement>" },
              },
              onMouseUp: {
                defaultValue: null,
                description: "",
                name: "onMouseUp",
                required: !1,
                type: { name: "MouseEventHandler<HTMLDivElement>" },
              },
              onMouseUpCapture: {
                defaultValue: null,
                description: "",
                name: "onMouseUpCapture",
                required: !1,
                type: { name: "MouseEventHandler<HTMLDivElement>" },
              },
              onSelect: {
                defaultValue: null,
                description: "",
                name: "onSelect",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onSelectCapture: {
                defaultValue: null,
                description: "",
                name: "onSelectCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onTouchCancel: {
                defaultValue: null,
                description: "",
                name: "onTouchCancel",
                required: !1,
                type: { name: "TouchEventHandler<HTMLDivElement>" },
              },
              onTouchCancelCapture: {
                defaultValue: null,
                description: "",
                name: "onTouchCancelCapture",
                required: !1,
                type: { name: "TouchEventHandler<HTMLDivElement>" },
              },
              onTouchEnd: {
                defaultValue: null,
                description: "",
                name: "onTouchEnd",
                required: !1,
                type: { name: "TouchEventHandler<HTMLDivElement>" },
              },
              onTouchEndCapture: {
                defaultValue: null,
                description: "",
                name: "onTouchEndCapture",
                required: !1,
                type: { name: "TouchEventHandler<HTMLDivElement>" },
              },
              onTouchMove: {
                defaultValue: null,
                description: "",
                name: "onTouchMove",
                required: !1,
                type: { name: "TouchEventHandler<HTMLDivElement>" },
              },
              onTouchMoveCapture: {
                defaultValue: null,
                description: "",
                name: "onTouchMoveCapture",
                required: !1,
                type: { name: "TouchEventHandler<HTMLDivElement>" },
              },
              onTouchStart: {
                defaultValue: null,
                description: "",
                name: "onTouchStart",
                required: !1,
                type: { name: "TouchEventHandler<HTMLDivElement>" },
              },
              onTouchStartCapture: {
                defaultValue: null,
                description: "",
                name: "onTouchStartCapture",
                required: !1,
                type: { name: "TouchEventHandler<HTMLDivElement>" },
              },
              onPointerDown: {
                defaultValue: null,
                description: "",
                name: "onPointerDown",
                required: !1,
                type: { name: "PointerEventHandler<HTMLDivElement>" },
              },
              onPointerDownCapture: {
                defaultValue: null,
                description: "",
                name: "onPointerDownCapture",
                required: !1,
                type: { name: "PointerEventHandler<HTMLDivElement>" },
              },
              onPointerMove: {
                defaultValue: null,
                description: "",
                name: "onPointerMove",
                required: !1,
                type: { name: "PointerEventHandler<HTMLDivElement>" },
              },
              onPointerMoveCapture: {
                defaultValue: null,
                description: "",
                name: "onPointerMoveCapture",
                required: !1,
                type: { name: "PointerEventHandler<HTMLDivElement>" },
              },
              onPointerUp: {
                defaultValue: null,
                description: "",
                name: "onPointerUp",
                required: !1,
                type: { name: "PointerEventHandler<HTMLDivElement>" },
              },
              onPointerUpCapture: {
                defaultValue: null,
                description: "",
                name: "onPointerUpCapture",
                required: !1,
                type: { name: "PointerEventHandler<HTMLDivElement>" },
              },
              onPointerCancel: {
                defaultValue: null,
                description: "",
                name: "onPointerCancel",
                required: !1,
                type: { name: "PointerEventHandler<HTMLDivElement>" },
              },
              onPointerCancelCapture: {
                defaultValue: null,
                description: "",
                name: "onPointerCancelCapture",
                required: !1,
                type: { name: "PointerEventHandler<HTMLDivElement>" },
              },
              onPointerEnter: {
                defaultValue: null,
                description: "",
                name: "onPointerEnter",
                required: !1,
                type: { name: "PointerEventHandler<HTMLDivElement>" },
              },
              onPointerEnterCapture: {
                defaultValue: null,
                description: "",
                name: "onPointerEnterCapture",
                required: !1,
                type: { name: "PointerEventHandler<HTMLDivElement>" },
              },
              onPointerLeave: {
                defaultValue: null,
                description: "",
                name: "onPointerLeave",
                required: !1,
                type: { name: "PointerEventHandler<HTMLDivElement>" },
              },
              onPointerLeaveCapture: {
                defaultValue: null,
                description: "",
                name: "onPointerLeaveCapture",
                required: !1,
                type: { name: "PointerEventHandler<HTMLDivElement>" },
              },
              onPointerOver: {
                defaultValue: null,
                description: "",
                name: "onPointerOver",
                required: !1,
                type: { name: "PointerEventHandler<HTMLDivElement>" },
              },
              onPointerOverCapture: {
                defaultValue: null,
                description: "",
                name: "onPointerOverCapture",
                required: !1,
                type: { name: "PointerEventHandler<HTMLDivElement>" },
              },
              onPointerOut: {
                defaultValue: null,
                description: "",
                name: "onPointerOut",
                required: !1,
                type: { name: "PointerEventHandler<HTMLDivElement>" },
              },
              onPointerOutCapture: {
                defaultValue: null,
                description: "",
                name: "onPointerOutCapture",
                required: !1,
                type: { name: "PointerEventHandler<HTMLDivElement>" },
              },
              onGotPointerCapture: {
                defaultValue: null,
                description: "",
                name: "onGotPointerCapture",
                required: !1,
                type: { name: "PointerEventHandler<HTMLDivElement>" },
              },
              onGotPointerCaptureCapture: {
                defaultValue: null,
                description: "",
                name: "onGotPointerCaptureCapture",
                required: !1,
                type: { name: "PointerEventHandler<HTMLDivElement>" },
              },
              onLostPointerCapture: {
                defaultValue: null,
                description: "",
                name: "onLostPointerCapture",
                required: !1,
                type: { name: "PointerEventHandler<HTMLDivElement>" },
              },
              onLostPointerCaptureCapture: {
                defaultValue: null,
                description: "",
                name: "onLostPointerCaptureCapture",
                required: !1,
                type: { name: "PointerEventHandler<HTMLDivElement>" },
              },
              onScroll: {
                defaultValue: null,
                description: "",
                name: "onScroll",
                required: !1,
                type: { name: "UIEventHandler<HTMLDivElement>" },
              },
              onScrollCapture: {
                defaultValue: null,
                description: "",
                name: "onScrollCapture",
                required: !1,
                type: { name: "UIEventHandler<HTMLDivElement>" },
              },
              onWheel: {
                defaultValue: null,
                description: "",
                name: "onWheel",
                required: !1,
                type: { name: "WheelEventHandler<HTMLDivElement>" },
              },
              onWheelCapture: {
                defaultValue: null,
                description: "",
                name: "onWheelCapture",
                required: !1,
                type: { name: "WheelEventHandler<HTMLDivElement>" },
              },
              onAnimationStart: {
                defaultValue: null,
                description: "",
                name: "onAnimationStart",
                required: !1,
                type: { name: "AnimationEventHandler<HTMLDivElement>" },
              },
              onAnimationStartCapture: {
                defaultValue: null,
                description: "",
                name: "onAnimationStartCapture",
                required: !1,
                type: { name: "AnimationEventHandler<HTMLDivElement>" },
              },
              onAnimationEnd: {
                defaultValue: null,
                description: "",
                name: "onAnimationEnd",
                required: !1,
                type: { name: "AnimationEventHandler<HTMLDivElement>" },
              },
              onAnimationEndCapture: {
                defaultValue: null,
                description: "",
                name: "onAnimationEndCapture",
                required: !1,
                type: { name: "AnimationEventHandler<HTMLDivElement>" },
              },
              onAnimationIteration: {
                defaultValue: null,
                description: "",
                name: "onAnimationIteration",
                required: !1,
                type: { name: "AnimationEventHandler<HTMLDivElement>" },
              },
              onAnimationIterationCapture: {
                defaultValue: null,
                description: "",
                name: "onAnimationIterationCapture",
                required: !1,
                type: { name: "AnimationEventHandler<HTMLDivElement>" },
              },
              onTransitionEnd: {
                defaultValue: null,
                description: "",
                name: "onTransitionEnd",
                required: !1,
                type: { name: "TransitionEventHandler<HTMLDivElement>" },
              },
              onTransitionEndCapture: {
                defaultValue: null,
                description: "",
                name: "onTransitionEndCapture",
                required: !1,
                type: { name: "TransitionEventHandler<HTMLDivElement>" },
              },
              step: {
                defaultValue: null,
                description: "",
                name: "step",
                required: !1,
                type: { name: "number" },
              },
              max: {
                defaultValue: null,
                description: "",
                name: "max",
                required: !1,
                type: { name: "number" },
              },
              min: {
                defaultValue: null,
                description: "",
                name: "min",
                required: !1,
                type: { name: "number" },
              },
              orientation: {
                defaultValue: null,
                description: "",
                name: "orientation",
                required: !1,
                type: {
                  name: "enum",
                  value: [{ value: '"horizontal"' }, { value: '"vertical"' }],
                },
              },
              inverted: {
                defaultValue: null,
                description: "",
                name: "inverted",
                required: !1,
                type: { name: "boolean" },
              },
              asChild: {
                defaultValue: null,
                description: "",
                name: "asChild",
                required: !1,
                type: { name: "boolean" },
              },
              minStepsBetweenThumbs: {
                defaultValue: null,
                description: "",
                name: "minStepsBetweenThumbs",
                required: !1,
                type: { name: "number" },
              },
              onValueChange: {
                defaultValue: null,
                description: "",
                name: "onValueChange",
                required: !1,
                type: { name: "(value: number[]) => void" },
              },
              onValueCommit: {
                defaultValue: null,
                description: "",
                name: "onValueCommit",
                required: !1,
                type: { name: "(value: number[]) => void" },
              },
              alignItems: {
                defaultValue: null,
                description: "",
                name: "alignItems",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"stretch"' },
                    { value: '"center"' },
                    { value: '"end"' },
                    { value: '"start"' },
                    { value: '"baseline"' },
                  ],
                },
              },
              aspectRatio: {
                defaultValue: null,
                description: "",
                name: "aspectRatio",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"square"' },
                    { value: '"extraWide"' },
                    { value: '"tall"' },
                    { value: '"wide"' },
                  ],
                },
              },
              background: {
                defaultValue: null,
                description: "",
                name: "background",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"inherit"' },
                    { value: '"background"' },
                    { value: '"black"' },
                    { value: '"transparent"' },
                    { value: '"white"' },
                    { value: '"backdrop"' },
                    { value: '"border_active"' },
                    { value: '"border_default"' },
                    { value: '"button_active"' },
                    { value: '"button_default"' },
                    { value: '"button_tint"' },
                    { value: '"focus_ring"' },
                    { value: '"shadow"' },
                    { value: '"text_high_contrast"' },
                    { value: '"text_low_contrast"' },
                    { value: '"tint_active"' },
                    { value: '"tint_default"' },
                  ],
                },
              },
              border: {
                defaultValue: null,
                description: "",
                name: "border",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"border_active"' },
                    { value: '"border_default"' },
                  ],
                },
              },
              borderBottom: {
                defaultValue: null,
                description: "",
                name: "borderBottom",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"border_active"' },
                    { value: '"border_default"' },
                  ],
                },
              },
              borderLeft: {
                defaultValue: null,
                description: "",
                name: "borderLeft",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"border_active"' },
                    { value: '"border_default"' },
                  ],
                },
              },
              borderRadius: {
                defaultValue: null,
                description: "",
                name: "borderRadius",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"50%"' },
                    { value: '"lg"' },
                    { value: '"md"' },
                    { value: '"pill"' },
                    { value: '"sm"' },
                  ],
                },
              },
              borderRight: {
                defaultValue: null,
                description: "",
                name: "borderRight",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"border_active"' },
                    { value: '"border_default"' },
                  ],
                },
              },
              borderTop: {
                defaultValue: null,
                description: "",
                name: "borderTop",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"border_active"' },
                    { value: '"border_default"' },
                  ],
                },
              },
              bottom: {
                defaultValue: null,
                description: "",
                name: "bottom",
                required: !1,
                type: { name: '"0"' },
              },
              boxShadow: {
                defaultValue: null,
                description: "",
                name: "boxShadow",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"lg"' },
                    { value: '"md"' },
                    { value: '"sm"' },
                  ],
                },
              },
              color: {
                defaultValue: null,
                description: "",
                name: "color",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"inherit"' },
                    { value: '"background"' },
                    { value: '"black"' },
                    { value: '"white"' },
                    { value: '"currentColor"' },
                    { value: '"backdrop"' },
                    { value: '"border_active"' },
                    { value: '"border_default"' },
                    { value: '"button_active"' },
                    { value: '"button_default"' },
                    { value: '"button_tint"' },
                    { value: '"focus_ring"' },
                    { value: '"shadow"' },
                    { value: '"text_high_contrast"' },
                    { value: '"text_low_contrast"' },
                    { value: '"tint_active"' },
                    { value: '"tint_default"' },
                  ],
                },
              },
              flex: {
                defaultValue: null,
                description: "",
                name: "flex",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"0 1 auto"' },
                    { value: '"1 1 auto"' },
                    { value: '"1 1 0%"' },
                    { value: '"1 1 100%"' },
                  ],
                },
              },
              flexGrow: {
                defaultValue: null,
                description: "",
                name: "flexGrow",
                required: !1,
                type: {
                  name: "enum",
                  value: [{ value: '"0"' }, { value: '"1"' }],
                },
              },
              flexShrink: {
                defaultValue: null,
                description: "",
                name: "flexShrink",
                required: !1,
                type: {
                  name: "enum",
                  value: [{ value: '"0"' }, { value: '"1"' }],
                },
              },
              flexWrap: {
                defaultValue: null,
                description: "",
                name: "flexWrap",
                required: !1,
                type: {
                  name: "enum",
                  value: [{ value: '"nowrap"' }, { value: '"wrap"' }],
                },
              },
              fontSize: {
                defaultValue: null,
                description: "",
                name: "fontSize",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"h1"' },
                    { value: '"h2"' },
                    { value: '"h3"' },
                    { value: '"h4"' },
                    { value: '"h5"' },
                    { value: '"h6"' },
                    { value: '"body_lg"' },
                    { value: '"body_md"' },
                    { value: '"body_sm"' },
                    { value: '"body_xl"' },
                    { value: '"body_xs"' },
                    { value: '"h0"' },
                    { value: '"root"' },
                  ],
                },
              },
              fontWeight: {
                defaultValue: null,
                description: "",
                name: "fontWeight",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"normal"' },
                    { value: '"bold"' },
                    { value: '"medium"' },
                    { value: '"light"' },
                    { value: '"extrabold"' },
                    { value: '"semibold"' },
                  ],
                },
              },
              height: {
                defaultValue: null,
                description: "",
                name: "height",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '""' },
                    { value: '"none"' },
                    { value: '"auto"' },
                    { value: '"min-content"' },
                    { value: '"50%"' },
                    { value: '"100%"' },
                    { value: '"100vh"' },
                    { value: '"25%"' },
                    { value: '"25vh"' },
                    { value: '"50vh"' },
                    { value: '"75%"' },
                    { value: '"75vh"' },
                    { value: '"90vh"' },
                    { value: '"spacing_0.25"' },
                    { value: '"spacing_0.5"' },
                    { value: '"spacing_1"' },
                    { value: '"spacing_1.5"' },
                    { value: '"spacing_2"' },
                    { value: '"spacing_3"' },
                    { value: '"spacing_4"' },
                    { value: '"spacing_5"' },
                    { value: '"spacing_6"' },
                  ],
                },
              },
              inset: {
                defaultValue: null,
                description: "",
                name: "inset",
                required: !1,
                type: { name: '"0"' },
              },
              isolation: {
                defaultValue: null,
                description: "",
                name: "isolation",
                required: !1,
                type: { name: '"isolate"' },
              },
              justifyContent: {
                defaultValue: null,
                description: "",
                name: "justifyContent",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"space-around"' },
                    { value: '"space-between"' },
                    { value: '"stretch"' },
                    { value: '"center"' },
                    { value: '"end"' },
                    { value: '"start"' },
                  ],
                },
              },
              left: {
                defaultValue: null,
                description: "",
                name: "left",
                required: !1,
                type: { name: '"0"' },
              },
              lineHeight: {
                defaultValue: null,
                description: "",
                name: "lineHeight",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"h1"' },
                    { value: '"h2"' },
                    { value: '"h3"' },
                    { value: '"h4"' },
                    { value: '"h5"' },
                    { value: '"h6"' },
                    { value: '"body_lg"' },
                    { value: '"body_md"' },
                    { value: '"body_sm"' },
                    { value: '"body_xl"' },
                    { value: '"body_xs"' },
                    { value: '"h0"' },
                    { value: '"root"' },
                  ],
                },
              },
              margin: {
                defaultValue: null,
                description: "",
                name: "margin",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"none"' },
                    { value: '"auto"' },
                    { value: '"spacing_0.25"' },
                    { value: '"spacing_0.5"' },
                    { value: '"spacing_1"' },
                    { value: '"spacing_1.5"' },
                    { value: '"spacing_2"' },
                    { value: '"spacing_3"' },
                    { value: '"spacing_4"' },
                    { value: '"spacing_5"' },
                    { value: '"spacing_6"' },
                  ],
                },
              },
              marginBottom: {
                defaultValue: null,
                description: "",
                name: "marginBottom",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"none"' },
                    { value: '"auto"' },
                    { value: '"spacing_0.25"' },
                    { value: '"spacing_0.5"' },
                    { value: '"spacing_1"' },
                    { value: '"spacing_1.5"' },
                    { value: '"spacing_2"' },
                    { value: '"spacing_3"' },
                    { value: '"spacing_4"' },
                    { value: '"spacing_5"' },
                    { value: '"spacing_6"' },
                  ],
                },
              },
              marginLeft: {
                defaultValue: null,
                description: "",
                name: "marginLeft",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"none"' },
                    { value: '"auto"' },
                    { value: '"spacing_0.25"' },
                    { value: '"spacing_0.5"' },
                    { value: '"spacing_1"' },
                    { value: '"spacing_1.5"' },
                    { value: '"spacing_2"' },
                    { value: '"spacing_3"' },
                    { value: '"spacing_4"' },
                    { value: '"spacing_5"' },
                    { value: '"spacing_6"' },
                  ],
                },
              },
              marginRight: {
                defaultValue: null,
                description: "",
                name: "marginRight",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"none"' },
                    { value: '"auto"' },
                    { value: '"spacing_0.25"' },
                    { value: '"spacing_0.5"' },
                    { value: '"spacing_1"' },
                    { value: '"spacing_1.5"' },
                    { value: '"spacing_2"' },
                    { value: '"spacing_3"' },
                    { value: '"spacing_4"' },
                    { value: '"spacing_5"' },
                    { value: '"spacing_6"' },
                  ],
                },
              },
              marginTop: {
                defaultValue: null,
                description: "",
                name: "marginTop",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"none"' },
                    { value: '"auto"' },
                    { value: '"spacing_0.25"' },
                    { value: '"spacing_0.5"' },
                    { value: '"spacing_1"' },
                    { value: '"spacing_1.5"' },
                    { value: '"spacing_2"' },
                    { value: '"spacing_3"' },
                    { value: '"spacing_4"' },
                    { value: '"spacing_5"' },
                    { value: '"spacing_6"' },
                  ],
                },
              },
              maxHeight: {
                defaultValue: null,
                description: "",
                name: "maxHeight",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '""' },
                    { value: '"none"' },
                    { value: '"auto"' },
                    { value: '"min-content"' },
                    { value: '"50%"' },
                    { value: '"100%"' },
                    { value: '"100vh"' },
                    { value: '"25%"' },
                    { value: '"25vh"' },
                    { value: '"50vh"' },
                    { value: '"75%"' },
                    { value: '"75vh"' },
                    { value: '"90vh"' },
                    { value: '"spacing_0.25"' },
                    { value: '"spacing_0.5"' },
                    { value: '"spacing_1"' },
                    { value: '"spacing_1.5"' },
                    { value: '"spacing_2"' },
                    { value: '"spacing_3"' },
                    { value: '"spacing_4"' },
                    { value: '"spacing_5"' },
                    { value: '"spacing_6"' },
                  ],
                },
              },
              maxWidth: {
                defaultValue: null,
                description: "",
                name: "maxWidth",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '""' },
                    { value: '"none"' },
                    { value: '"auto"' },
                    { value: '"max-content"' },
                    { value: '"min-content"' },
                    { value: '"50%"' },
                    { value: '"100%"' },
                    { value: '"25%"' },
                    { value: '"spacing_0.25"' },
                    { value: '"spacing_0.5"' },
                    { value: '"spacing_1"' },
                    { value: '"spacing_1.5"' },
                    { value: '"spacing_2"' },
                    { value: '"spacing_3"' },
                    { value: '"spacing_4"' },
                    { value: '"spacing_5"' },
                    { value: '"spacing_6"' },
                    { value: '"col_1"' },
                    { value: '"col_10"' },
                    { value: '"col_11"' },
                    { value: '"col_12"' },
                    { value: '"col_2"' },
                    { value: '"col_3"' },
                    { value: '"col_4"' },
                    { value: '"col_5"' },
                    { value: '"col_6"' },
                    { value: '"col_7"' },
                    { value: '"col_8"' },
                    { value: '"col_9"' },
                  ],
                },
              },
              minHeight: {
                defaultValue: null,
                description: "",
                name: "minHeight",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '""' },
                    { value: '"none"' },
                    { value: '"auto"' },
                    { value: '"min-content"' },
                    { value: '"50%"' },
                    { value: '"100%"' },
                    { value: '"100vh"' },
                    { value: '"25%"' },
                    { value: '"25vh"' },
                    { value: '"50vh"' },
                    { value: '"75%"' },
                    { value: '"75vh"' },
                    { value: '"90vh"' },
                    { value: '"spacing_0.25"' },
                    { value: '"spacing_0.5"' },
                    { value: '"spacing_1"' },
                    { value: '"spacing_1.5"' },
                    { value: '"spacing_2"' },
                    { value: '"spacing_3"' },
                    { value: '"spacing_4"' },
                    { value: '"spacing_5"' },
                    { value: '"spacing_6"' },
                  ],
                },
              },
              minWidth: {
                defaultValue: null,
                description: "",
                name: "minWidth",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '""' },
                    { value: '"none"' },
                    { value: '"auto"' },
                    { value: '"max-content"' },
                    { value: '"min-content"' },
                    { value: '"50%"' },
                    { value: '"100%"' },
                    { value: '"25%"' },
                    { value: '"spacing_0.25"' },
                    { value: '"spacing_0.5"' },
                    { value: '"spacing_1"' },
                    { value: '"spacing_1.5"' },
                    { value: '"spacing_2"' },
                    { value: '"spacing_3"' },
                    { value: '"spacing_4"' },
                    { value: '"spacing_5"' },
                    { value: '"spacing_6"' },
                    { value: '"col_1"' },
                    { value: '"col_10"' },
                    { value: '"col_11"' },
                    { value: '"col_12"' },
                    { value: '"col_2"' },
                    { value: '"col_3"' },
                    { value: '"col_4"' },
                    { value: '"col_5"' },
                    { value: '"col_6"' },
                    { value: '"col_7"' },
                    { value: '"col_8"' },
                    { value: '"col_9"' },
                  ],
                },
              },
              overflow: {
                defaultValue: null,
                description: "",
                name: "overflow",
                required: !1,
                type: { name: '"hidden"' },
              },
              overflowY: {
                defaultValue: null,
                description: "",
                name: "overflowY",
                required: !1,
                type: { name: '"auto"' },
              },
              right: {
                defaultValue: null,
                description: "",
                name: "right",
                required: !1,
                type: { name: '"0"' },
              },
              textAlign: {
                defaultValue: null,
                description: "",
                name: "textAlign",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"left"' },
                    { value: '"right"' },
                    { value: '"center"' },
                  ],
                },
              },
              textDecoration: {
                defaultValue: null,
                description: "",
                name: "textDecoration",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"none"' },
                    { value: '"line-through"' },
                    { value: '"underline"' },
                  ],
                },
              },
              textTransform: {
                defaultValue: null,
                description: "",
                name: "textTransform",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"capitalize"' },
                    { value: '"lowercase"' },
                    { value: '"uppercase"' },
                  ],
                },
              },
              top: {
                defaultValue: null,
                description: "",
                name: "top",
                required: !1,
                type: { name: '"0"' },
              },
              whiteSpace: {
                defaultValue: null,
                description: "",
                name: "whiteSpace",
                required: !1,
                type: {
                  name: "enum",
                  value: [{ value: '"normal"' }, { value: '"nowrap"' }],
                },
              },
              zIndex: {
                defaultValue: null,
                description: "",
                name: "zIndex",
                required: !1,
                type: {
                  name: "enum",
                  value: [{ value: '"1"' }, { value: '"-1"' }],
                },
              },
              fontStyle: {
                defaultValue: null,
                description: "",
                name: "fontStyle",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"h1"' },
                    { value: '"h2"' },
                    { value: '"h3"' },
                    { value: '"h4"' },
                    { value: '"h5"' },
                    { value: '"h6"' },
                    { value: '"body_lg"' },
                    { value: '"body_md"' },
                    { value: '"body_sm"' },
                    { value: '"body_xl"' },
                    { value: '"body_xs"' },
                    { value: '"h0"' },
                    { value: '"root"' },
                  ],
                },
              },
              marginX: {
                defaultValue: null,
                description: "",
                name: "marginX",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"none"' },
                    { value: '"auto"' },
                    { value: '"spacing_0.25"' },
                    { value: '"spacing_0.5"' },
                    { value: '"spacing_1"' },
                    { value: '"spacing_1.5"' },
                    { value: '"spacing_2"' },
                    { value: '"spacing_3"' },
                    { value: '"spacing_4"' },
                    { value: '"spacing_5"' },
                    { value: '"spacing_6"' },
                  ],
                },
              },
              marginY: {
                defaultValue: null,
                description: "",
                name: "marginY",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"none"' },
                    { value: '"auto"' },
                    { value: '"spacing_0.25"' },
                    { value: '"spacing_0.5"' },
                    { value: '"spacing_1"' },
                    { value: '"spacing_1.5"' },
                    { value: '"spacing_2"' },
                    { value: '"spacing_3"' },
                    { value: '"spacing_4"' },
                    { value: '"spacing_5"' },
                    { value: '"spacing_6"' },
                  ],
                },
              },
              placeItems: {
                defaultValue: null,
                description: "",
                name: "placeItems",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"stretch"' },
                    { value: '"center"' },
                    { value: '"end"' },
                    { value: '"start"' },
                  ],
                },
              },
              display: {
                defaultValue: null,
                description: "",
                name: "display",
                required: !1,
                type: {
                  name: 'ConditionalStyle<Values<MapLeafNodes<{ block: string; flex: string; grid: string; inline: string; "inline-block": string; "inline-flex": string; none: string; table: string; "table-cell": string; }, CSSVarFunction>, { ...; }>>',
                },
              },
              flexDirection: {
                defaultValue: null,
                description: "",
                name: "flexDirection",
                required: !1,
                type: {
                  name: 'ConditionalStyle<Values<("column" | "column-reverse" | "row" | "row-reverse")[], { defaultClass: string; conditions: { mobile: string; tablet: string; desktop: string; }; }>>',
                },
              },
              gap: {
                defaultValue: null,
                description: "",
                name: "gap",
                required: !1,
                type: {
                  name: 'ConditionalStyle<Values<MapLeafNodes<{ auto: string; none: string; "spacing_0.25": string; "spacing_0.5": string; spacing_1: string; "spacing_1.5": string; spacing_2: string; spacing_3: string; spacing_4: string; spacing_5: string; spacing_6: string; }, CSSVarFunction>, { ...; }>>',
                },
              },
              gridTemplateColumns: {
                defaultValue: null,
                description: "",
                name: "gridTemplateColumns",
                required: !1,
                type: {
                  name: 'ConditionalStyle<Values<MapLeafNodes<{ "1_2": string; "1_3": string; "1x": string; "2_1": string; "2x": string; "3_1": string; "3x": string; "4x": string; "5_7": string; "5x": string; "6x": string; "7_5": string; "7x": string; }, CSSVarFunction>, { ...; }>>',
                },
              },
              padding: {
                defaultValue: null,
                description: "",
                name: "padding",
                required: !1,
                type: {
                  name: 'ConditionalStyle<Values<MapLeafNodes<{ auto: string; none: string; "spacing_0.25": string; "spacing_0.5": string; spacing_1: string; "spacing_1.5": string; spacing_2: string; spacing_3: string; spacing_4: string; spacing_5: string; spacing_6: string; }, CSSVarFunction>, { ...; }>>',
                },
              },
              paddingBottom: {
                defaultValue: null,
                description: "",
                name: "paddingBottom",
                required: !1,
                type: {
                  name: 'ConditionalStyle<Values<MapLeafNodes<{ auto: string; none: string; "spacing_0.25": string; "spacing_0.5": string; spacing_1: string; "spacing_1.5": string; spacing_2: string; spacing_3: string; spacing_4: string; spacing_5: string; spacing_6: string; }, CSSVarFunction>, { ...; }>>',
                },
              },
              paddingLeft: {
                defaultValue: null,
                description: "",
                name: "paddingLeft",
                required: !1,
                type: {
                  name: 'ConditionalStyle<Values<MapLeafNodes<{ auto: string; none: string; "spacing_0.25": string; "spacing_0.5": string; spacing_1: string; "spacing_1.5": string; spacing_2: string; spacing_3: string; spacing_4: string; spacing_5: string; spacing_6: string; }, CSSVarFunction>, { ...; }>>',
                },
              },
              paddingRight: {
                defaultValue: null,
                description: "",
                name: "paddingRight",
                required: !1,
                type: {
                  name: 'ConditionalStyle<Values<MapLeafNodes<{ auto: string; none: string; "spacing_0.25": string; "spacing_0.5": string; spacing_1: string; "spacing_1.5": string; spacing_2: string; spacing_3: string; spacing_4: string; spacing_5: string; spacing_6: string; }, CSSVarFunction>, { ...; }>>',
                },
              },
              paddingTop: {
                defaultValue: null,
                description: "",
                name: "paddingTop",
                required: !1,
                type: {
                  name: 'ConditionalStyle<Values<MapLeafNodes<{ auto: string; none: string; "spacing_0.25": string; "spacing_0.5": string; spacing_1: string; "spacing_1.5": string; spacing_2: string; spacing_3: string; spacing_4: string; spacing_5: string; spacing_6: string; }, CSSVarFunction>, { ...; }>>',
                },
              },
              position: {
                defaultValue: null,
                description: "",
                name: "position",
                required: !1,
                type: {
                  name: 'ConditionalStyle<Values<("absolute" | "relative" | "sticky")[], { defaultClass: string; conditions: { mobile: string; tablet: string; desktop: string; }; }>>',
                },
              },
              width: {
                defaultValue: null,
                description: "",
                name: "width",
                required: !1,
                type: {
                  name: 'ConditionalStyle<Values<{ auto: CSSVarFunction; none: CSSVarFunction; "spacing_0.25": CSSVarFunction; "spacing_0.5": CSSVarFunction; spacing_1: CSSVarFunction; ... 23 more ...; "min-content": CSSVarFunction; }, { ...; }>>',
                },
              },
              paddingX: {
                defaultValue: null,
                description: "",
                name: "paddingX",
                required: !1,
                type: {
                  name: 'ConditionalStyle<Values<MapLeafNodes<{ auto: string; none: string; "spacing_0.25": string; "spacing_0.5": string; spacing_1: string; "spacing_1.5": string; spacing_2: string; spacing_3: string; spacing_4: string; spacing_5: string; spacing_6: string; }, CSSVarFunction>, { ...; }>>',
                },
              },
              paddingY: {
                defaultValue: null,
                description: "",
                name: "paddingY",
                required: !1,
                type: {
                  name: 'ConditionalStyle<Values<MapLeafNodes<{ auto: string; none: string; "spacing_0.25": string; "spacing_0.5": string; spacing_1: string; "spacing_1.5": string; spacing_2: string; spacing_3: string; spacing_4: string; spacing_5: string; spacing_6: string; }, CSSVarFunction>, { ...; }>>',
                },
              },
              label: {
                defaultValue: null,
                description: "",
                name: "label",
                required: !1,
                type: { name: "string" },
              },
              autoComplete: {
                defaultValue: null,
                description: "",
                name: "autoComplete",
                required: !1,
                type: { name: "string" },
              },
              errorMessage: {
                defaultValue: null,
                description:
                  "Message shown when `invalid=true`. May originate from controlling library, like `react-hook-form`\nMessage to render when erroring.",
                name: "errorMessage",
                required: !1,
                type: { name: "string" },
              },
              invalid: {
                defaultValue: null,
                description:
                  "Allow controlling components to set error styles, `aria-invalid` prop and display error message.",
                name: "invalid",
                required: !1,
                type: { name: "boolean" },
              },
              labelTooltip: {
                defaultValue: null,
                description: "Optional tooltip for label",
                name: "labelTooltip",
                required: !1,
                type: { name: "string" },
              },
              required: {
                defaultValue: null,
                description:
                  "Controls `aria-required` and input `required` attributes.\nWhether the slider is a required form element",
                name: "required",
                required: !1,
                type: { name: "boolean" },
              },
              size: {
                defaultValue: null,
                description:
                  "Common interactive element size, shared with button, select, etc",
                name: "size",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"lg"' },
                    { value: '"md"' },
                    { value: '"sm"' },
                  ],
                },
              },
              slotLeft: {
                defaultValue: null,
                description: "React node shown on the left side of input.",
                name: "slotLeft",
                required: !1,
                type: { name: "ReactNode" },
              },
              slotRight: {
                defaultValue: null,
                description: "React node shown on the right side of input.",
                name: "slotRight",
                required: !1,
                type: { name: "ReactNode" },
              },
              type: {
                defaultValue: null,
                description: "",
                name: "type",
                required: !1,
                type: { name: "HTMLInputTypeAttribute" },
              },
              validateFunction: {
                defaultValue: null,
                description:
                  "Callback for validation, else simply validates is non-empty.",
                name: "validateFunction",
                required: !1,
                type: { name: "(value: string) => boolean" },
              },
            },
          }),
          "undefined" != typeof STORYBOOK_REACT_CLASSES &&
            (STORYBOOK_REACT_CLASSES[
              "src/components/form/sub_components/form_slider.comp.tsx#FormSlider"
            ] = {
              docgenInfo: FormSlider.__docgenInfo,
              name: "FormSlider",
              path: "src/components/form/sub_components/form_slider.comp.tsx#FormSlider",
            });
      } catch (__react_docgen_typescript_loader_error) {}
      var button_comp = __webpack_require__(
          "./src/components/button/button.comp.tsx"
        ),
        icon_comp = __webpack_require__("./src/components/icon/icon.comp.tsx"),
        pro_light_svg_icons = __webpack_require__(
          "./node_modules/@fortawesome/pro-light-svg-icons/index.mjs"
        );
      const FormSubmitButton = (0, react.forwardRef)(
        ({ children, slotRight, ...rest }, ref) => {
          const formMethods = (0, index_esm.cI)(),
            { buttonIcon, buttonIconProps } = (0, react.useMemo)(
              () =>
                (function getSubmitButtonIcon({
                  errors,
                  isSubmitSuccessful,
                  isSubmitted,
                  isSubmitting,
                }) {
                  return isSubmitted && isSubmitSuccessful
                    ? {
                        buttonIcon: pro_light_svg_icons.f8k,
                        buttonIconProps: void 0,
                      }
                    : isSubmitted && !isSubmitSuccessful && errors
                    ? {
                        buttonIcon: pro_light_svg_icons.eHv,
                        buttonIconProps: void 0,
                      }
                    : isSubmitted &&
                      !isSubmitSuccessful &&
                      !errors &&
                      isSubmitting
                    ? {
                        buttonIcon: pro_light_svg_icons.LM3,
                        buttonIconProps: { spin: !0 },
                      }
                    : {
                        buttonIcon: pro_light_svg_icons.f8k,
                        buttonIconProps: void 0,
                      };
                })(formMethods.formState),
              [formMethods.formState]
            );
          return (0, jsx_runtime.jsx)(button_comp.z, {
            name: "submit",
            ref,
            size: "md",
            type: "submit",
            slotRight:
              slotRight ||
              (buttonIcon
                ? (0, jsx_runtime.jsx)(icon_comp.J, {
                    icon: buttonIcon,
                    ...buttonIconProps,
                  })
                : void 0),
            ...rest,
            children,
          });
        }
      );
      try {
        (FormSubmitButton.displayName = "FormSubmitButton"),
          (FormSubmitButton.__docgenInfo = {
            description: "",
            displayName: "FormSubmitButton",
            props: {
              ref: {
                defaultValue: null,
                description:
                  "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
                name: "ref",
                required: !1,
                type: { name: "Ref<HTMLButtonElement>" },
              },
              key: {
                defaultValue: null,
                description: "",
                name: "key",
                required: !1,
                type: { name: "Key" },
              },
            },
          }),
          "undefined" != typeof STORYBOOK_REACT_CLASSES &&
            (STORYBOOK_REACT_CLASSES[
              "src/components/form/sub_components/form_submit_button.comp.tsx#FormSubmitButton"
            ] = {
              docgenInfo: FormSubmitButton.__docgenInfo,
              name: "FormSubmitButton",
              path: "src/components/form/sub_components/form_submit_button.comp.tsx#FormSubmitButton",
            });
      } catch (__react_docgen_typescript_loader_error) {}
      var text_area_comp = __webpack_require__(
        "./src/components/text_area/text_area.comp.tsx"
      );
      function FormTextArea({
        defaultValue,
        errorMessage,
        name,
        required,
        validateFunction,
        wrapperProps,
        ...rest
      }) {
        const { control } = (0, index_esm.Gc)(),
          {
            field: { onBlur, onChange, ref, value: controlledValue = "" },
            fieldState: { error },
          } = (0, index_esm.bc)({
            control,
            defaultValue,
            name,
            rules: {
              required: required && errorMessage,
              validate: (value) =>
                validateFunction
                  ? validateFunction(value) || errorMessage
                  : !!value,
            },
          });
        return (0, jsx_runtime.jsx)(text_area_comp.K, {
          "aria-required": required,
          errorMessage,
          invalid: !!error,
          name,
          onBlur,
          onChange,
          ref,
          value: controlledValue,
          wrapperProps,
          ...rest,
        });
      }
      FormTextArea.displayName = "FormTextArea";
      try {
        (FormTextArea.displayName = "FormTextArea"),
          (FormTextArea.__docgenInfo = {
            description: "",
            displayName: "FormTextArea",
            props: {
              content: {
                defaultValue: null,
                description: "",
                name: "content",
                required: !1,
                type: { name: "string" },
              },
              translate: {
                defaultValue: null,
                description: "",
                name: "translate",
                required: !1,
                type: {
                  name: "enum",
                  value: [{ value: '"yes"' }, { value: '"no"' }],
                },
              },
              hidden: {
                defaultValue: null,
                description: "",
                name: "hidden",
                required: !1,
                type: { name: "boolean" },
              },
              style: {
                defaultValue: null,
                description: "",
                name: "style",
                required: !1,
                type: { name: "CSSProperties" },
              },
              wrap: {
                defaultValue: null,
                description: "",
                name: "wrap",
                required: !1,
                type: { name: "string" },
              },
              disabled: {
                defaultValue: null,
                description: "",
                name: "disabled",
                required: !1,
                type: { name: "boolean" },
              },
              name: {
                defaultValue: null,
                description: "",
                name: "name",
                required: !1,
                type: { name: "string" },
              },
              form: {
                defaultValue: null,
                description: "",
                name: "form",
                required: !1,
                type: { name: "string" },
              },
              slot: {
                defaultValue: null,
                description: "",
                name: "slot",
                required: !1,
                type: { name: "string" },
              },
              title: {
                defaultValue: null,
                description: "",
                name: "title",
                required: !1,
                type: { name: "string" },
              },
              key: {
                defaultValue: null,
                description: "",
                name: "key",
                required: !1,
                type: { name: "Key" },
              },
              autoComplete: {
                defaultValue: null,
                description: "",
                name: "autoComplete",
                required: !1,
                type: { name: "string" },
              },
              cols: {
                defaultValue: null,
                description: "",
                name: "cols",
                required: !1,
                type: { name: "number" },
              },
              dirName: {
                defaultValue: null,
                description: "",
                name: "dirName",
                required: !1,
                type: { name: "string" },
              },
              maxLength: {
                defaultValue: null,
                description: "",
                name: "maxLength",
                required: !1,
                type: { name: "number" },
              },
              minLength: {
                defaultValue: null,
                description: "",
                name: "minLength",
                required: !1,
                type: { name: "number" },
              },
              placeholder: {
                defaultValue: null,
                description: "Placeholder text to display when input is empty.",
                name: "placeholder",
                required: !1,
                type: { name: "string" },
              },
              readOnly: {
                defaultValue: null,
                description: "",
                name: "readOnly",
                required: !1,
                type: { name: "boolean" },
              },
              required: {
                defaultValue: null,
                description: "",
                name: "required",
                required: !1,
                type: { name: "boolean" },
              },
              rows: {
                defaultValue: null,
                description: "",
                name: "rows",
                required: !1,
                type: { name: "number" },
              },
              value: {
                defaultValue: null,
                description: "",
                name: "value",
                required: !1,
                type: { name: "string | number | readonly string[]" },
              },
              onChange: {
                defaultValue: null,
                description: "",
                name: "onChange",
                required: !1,
                type: { name: "ChangeEventHandler<HTMLTextAreaElement>" },
              },
              defaultChecked: {
                defaultValue: null,
                description: "",
                name: "defaultChecked",
                required: !1,
                type: { name: "boolean" },
              },
              defaultValue: {
                defaultValue: null,
                description: "",
                name: "defaultValue",
                required: !1,
                type: { name: "string | number | readonly string[]" },
              },
              suppressContentEditableWarning: {
                defaultValue: null,
                description: "",
                name: "suppressContentEditableWarning",
                required: !1,
                type: { name: "boolean" },
              },
              suppressHydrationWarning: {
                defaultValue: null,
                description: "",
                name: "suppressHydrationWarning",
                required: !1,
                type: { name: "boolean" },
              },
              accessKey: {
                defaultValue: null,
                description: "",
                name: "accessKey",
                required: !1,
                type: { name: "string" },
              },
              autoFocus: {
                defaultValue: null,
                description: "",
                name: "autoFocus",
                required: !1,
                type: { name: "boolean" },
              },
              className: {
                defaultValue: null,
                description: "",
                name: "className",
                required: !1,
                type: { name: "string" },
              },
              contentEditable: {
                defaultValue: null,
                description: "",
                name: "contentEditable",
                required: !1,
                type: { name: '"inherit" | Booleanish' },
              },
              contextMenu: {
                defaultValue: null,
                description: "",
                name: "contextMenu",
                required: !1,
                type: { name: "string" },
              },
              dir: {
                defaultValue: null,
                description: "",
                name: "dir",
                required: !1,
                type: { name: "string" },
              },
              draggable: {
                defaultValue: null,
                description: "",
                name: "draggable",
                required: !1,
                type: { name: "Booleanish" },
              },
              id: {
                defaultValue: null,
                description: "",
                name: "id",
                required: !1,
                type: { name: "string" },
              },
              lang: {
                defaultValue: null,
                description: "",
                name: "lang",
                required: !1,
                type: { name: "string" },
              },
              nonce: {
                defaultValue: null,
                description: "",
                name: "nonce",
                required: !1,
                type: { name: "string" },
              },
              spellCheck: {
                defaultValue: null,
                description: "",
                name: "spellCheck",
                required: !1,
                type: { name: "Booleanish" },
              },
              tabIndex: {
                defaultValue: null,
                description: "",
                name: "tabIndex",
                required: !1,
                type: { name: "number" },
              },
              radioGroup: {
                defaultValue: null,
                description: "",
                name: "radioGroup",
                required: !1,
                type: { name: "string" },
              },
              role: {
                defaultValue: null,
                description: "",
                name: "role",
                required: !1,
                type: { name: "AriaRole" },
              },
              about: {
                defaultValue: null,
                description: "",
                name: "about",
                required: !1,
                type: { name: "string" },
              },
              datatype: {
                defaultValue: null,
                description: "",
                name: "datatype",
                required: !1,
                type: { name: "string" },
              },
              inlist: {
                defaultValue: null,
                description: "",
                name: "inlist",
                required: !1,
                type: { name: "any" },
              },
              prefix: {
                defaultValue: null,
                description: "",
                name: "prefix",
                required: !1,
                type: { name: "string" },
              },
              property: {
                defaultValue: null,
                description: "",
                name: "property",
                required: !1,
                type: { name: "string" },
              },
              rel: {
                defaultValue: null,
                description: "",
                name: "rel",
                required: !1,
                type: { name: "string" },
              },
              resource: {
                defaultValue: null,
                description: "",
                name: "resource",
                required: !1,
                type: { name: "string" },
              },
              rev: {
                defaultValue: null,
                description: "",
                name: "rev",
                required: !1,
                type: { name: "string" },
              },
              typeof: {
                defaultValue: null,
                description: "",
                name: "typeof",
                required: !1,
                type: { name: "string" },
              },
              vocab: {
                defaultValue: null,
                description: "",
                name: "vocab",
                required: !1,
                type: { name: "string" },
              },
              autoCapitalize: {
                defaultValue: null,
                description: "",
                name: "autoCapitalize",
                required: !1,
                type: { name: "string" },
              },
              autoCorrect: {
                defaultValue: null,
                description: "",
                name: "autoCorrect",
                required: !1,
                type: { name: "string" },
              },
              autoSave: {
                defaultValue: null,
                description: "",
                name: "autoSave",
                required: !1,
                type: { name: "string" },
              },
              itemProp: {
                defaultValue: null,
                description: "",
                name: "itemProp",
                required: !1,
                type: { name: "string" },
              },
              itemScope: {
                defaultValue: null,
                description: "",
                name: "itemScope",
                required: !1,
                type: { name: "boolean" },
              },
              itemType: {
                defaultValue: null,
                description: "",
                name: "itemType",
                required: !1,
                type: { name: "string" },
              },
              itemID: {
                defaultValue: null,
                description: "",
                name: "itemID",
                required: !1,
                type: { name: "string" },
              },
              itemRef: {
                defaultValue: null,
                description: "",
                name: "itemRef",
                required: !1,
                type: { name: "string" },
              },
              results: {
                defaultValue: null,
                description: "",
                name: "results",
                required: !1,
                type: { name: "number" },
              },
              security: {
                defaultValue: null,
                description: "",
                name: "security",
                required: !1,
                type: { name: "string" },
              },
              unselectable: {
                defaultValue: null,
                description: "",
                name: "unselectable",
                required: !1,
                type: {
                  name: "enum",
                  value: [{ value: '"on"' }, { value: '"off"' }],
                },
              },
              inputMode: {
                defaultValue: null,
                description:
                  "Hints at the type of data that might be entered by the user while editing the element or its contents\n@see https://html.spec.whatwg.org/multipage/interaction.html#input-modalities:-the-inputmode-attribute",
                name: "inputMode",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"none"' },
                    { value: '"search"' },
                    { value: '"text"' },
                    { value: '"tel"' },
                    { value: '"url"' },
                    { value: '"email"' },
                    { value: '"numeric"' },
                    { value: '"decimal"' },
                  ],
                },
              },
              is: {
                defaultValue: null,
                description:
                  "Specify that a standard HTML element should behave like a defined custom built-in element\n@see https://html.spec.whatwg.org/multipage/custom-elements.html#attr-is",
                name: "is",
                required: !1,
                type: { name: "string" },
              },
              "aria-activedescendant": {
                defaultValue: null,
                description:
                  "Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.",
                name: "aria-activedescendant",
                required: !1,
                type: { name: "string" },
              },
              "aria-atomic": {
                defaultValue: null,
                description:
                  "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.",
                name: "aria-atomic",
                required: !1,
                type: { name: "Booleanish" },
              },
              "aria-autocomplete": {
                defaultValue: null,
                description:
                  "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be\npresented if they are made.",
                name: "aria-autocomplete",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"none"' },
                    { value: '"both"' },
                    { value: '"inline"' },
                    { value: '"list"' },
                  ],
                },
              },
              "aria-busy": {
                defaultValue: null,
                description:
                  "Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.",
                name: "aria-busy",
                required: !1,
                type: { name: "Booleanish" },
              },
              "aria-checked": {
                defaultValue: null,
                description:
                  'Indicates the current "checked" state of checkboxes, radio buttons, and other widgets.\n@see aria-pressed\n@see aria-selected.',
                name: "aria-checked",
                required: !1,
                type: { name: 'boolean | "mixed" | "false" | "true"' },
              },
              "aria-colcount": {
                defaultValue: null,
                description:
                  "Defines the total number of columns in a table, grid, or treegrid.\n@see aria-colindex.",
                name: "aria-colcount",
                required: !1,
                type: { name: "number" },
              },
              "aria-colindex": {
                defaultValue: null,
                description:
                  "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.\n@see aria-colcount\n@see aria-colspan.",
                name: "aria-colindex",
                required: !1,
                type: { name: "number" },
              },
              "aria-colspan": {
                defaultValue: null,
                description:
                  "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.\n@see aria-colindex\n@see aria-rowspan.",
                name: "aria-colspan",
                required: !1,
                type: { name: "number" },
              },
              "aria-controls": {
                defaultValue: null,
                description:
                  "Identifies the element (or elements) whose contents or presence are controlled by the current element.\n@see aria-owns.",
                name: "aria-controls",
                required: !1,
                type: { name: "string" },
              },
              "aria-current": {
                defaultValue: null,
                description:
                  "Indicates the element that represents the current item within a container or set of related elements.",
                name: "aria-current",
                required: !1,
                type: {
                  name: 'boolean | "page" | "false" | "true" | "time" | "step" | "location" | "date"',
                },
              },
              "aria-describedby": {
                defaultValue: null,
                description:
                  "Identifies the element (or elements) that describes the object.\n@see aria-labelledby",
                name: "aria-describedby",
                required: !1,
                type: { name: "string" },
              },
              "aria-details": {
                defaultValue: null,
                description:
                  "Identifies the element that provides a detailed, extended description for the object.\n@see aria-describedby.",
                name: "aria-details",
                required: !1,
                type: { name: "string" },
              },
              "aria-disabled": {
                defaultValue: null,
                description:
                  "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.\n@see aria-hidden\n@see aria-readonly.",
                name: "aria-disabled",
                required: !1,
                type: { name: "Booleanish" },
              },
              "aria-dropeffect": {
                defaultValue: null,
                description:
                  "Indicates what functions can be performed when a dragged object is released on the drop target.\n@deprecated in ARIA 1.1",
                name: "aria-dropeffect",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"none"' },
                    { value: '"link"' },
                    { value: '"copy"' },
                    { value: '"move"' },
                    { value: '"execute"' },
                    { value: '"popup"' },
                  ],
                },
              },
              "aria-errormessage": {
                defaultValue: null,
                description:
                  "Identifies the element that provides an error message for the object.\n@see aria-invalid\n@see aria-describedby.",
                name: "aria-errormessage",
                required: !1,
                type: { name: "string" },
              },
              "aria-expanded": {
                defaultValue: null,
                description:
                  "Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.",
                name: "aria-expanded",
                required: !1,
                type: { name: "Booleanish" },
              },
              "aria-flowto": {
                defaultValue: null,
                description:
                  "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,\nallows assistive technology to override the general default of reading in document source order.",
                name: "aria-flowto",
                required: !1,
                type: { name: "string" },
              },
              "aria-grabbed": {
                defaultValue: null,
                description:
                  'Indicates an element\'s "grabbed" state in a drag-and-drop operation.\n@deprecated in ARIA 1.1',
                name: "aria-grabbed",
                required: !1,
                type: { name: "Booleanish" },
              },
              "aria-haspopup": {
                defaultValue: null,
                description:
                  "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.",
                name: "aria-haspopup",
                required: !1,
                type: {
                  name: 'boolean | "grid" | "listbox" | "menu" | "false" | "true" | "dialog" | "tree"',
                },
              },
              "aria-hidden": {
                defaultValue: null,
                description:
                  "Indicates whether the element is exposed to an accessibility API.\n@see aria-disabled.",
                name: "aria-hidden",
                required: !1,
                type: { name: "Booleanish" },
              },
              "aria-invalid": {
                defaultValue: null,
                description:
                  "Indicates the entered value does not conform to the format expected by the application.\n@see aria-errormessage.",
                name: "aria-invalid",
                required: !1,
                type: {
                  name: 'boolean | "false" | "true" | "grammar" | "spelling"',
                },
              },
              "aria-keyshortcuts": {
                defaultValue: null,
                description:
                  "Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.",
                name: "aria-keyshortcuts",
                required: !1,
                type: { name: "string" },
              },
              "aria-label": {
                defaultValue: null,
                description:
                  "Defines a string value that labels the current element.\n@see aria-labelledby.",
                name: "aria-label",
                required: !1,
                type: { name: "string" },
              },
              "aria-labelledby": {
                defaultValue: null,
                description:
                  "Identifies the element (or elements) that labels the current element.\n@see aria-describedby.",
                name: "aria-labelledby",
                required: !1,
                type: { name: "string" },
              },
              "aria-level": {
                defaultValue: null,
                description:
                  "Defines the hierarchical level of an element within a structure.",
                name: "aria-level",
                required: !1,
                type: { name: "number" },
              },
              "aria-live": {
                defaultValue: null,
                description:
                  "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.",
                name: "aria-live",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"off"' },
                    { value: '"assertive"' },
                    { value: '"polite"' },
                  ],
                },
              },
              "aria-modal": {
                defaultValue: null,
                description:
                  "Indicates whether an element is modal when displayed.",
                name: "aria-modal",
                required: !1,
                type: { name: "Booleanish" },
              },
              "aria-multiline": {
                defaultValue: null,
                description:
                  "Indicates whether a text box accepts multiple lines of input or only a single line.",
                name: "aria-multiline",
                required: !1,
                type: { name: "Booleanish" },
              },
              "aria-multiselectable": {
                defaultValue: null,
                description:
                  "Indicates that the user may select more than one item from the current selectable descendants.",
                name: "aria-multiselectable",
                required: !1,
                type: { name: "Booleanish" },
              },
              "aria-orientation": {
                defaultValue: null,
                description:
                  "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous.",
                name: "aria-orientation",
                required: !1,
                type: {
                  name: "enum",
                  value: [{ value: '"horizontal"' }, { value: '"vertical"' }],
                },
              },
              "aria-owns": {
                defaultValue: null,
                description:
                  "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship\nbetween DOM elements where the DOM hierarchy cannot be used to represent the relationship.\n@see aria-controls.",
                name: "aria-owns",
                required: !1,
                type: { name: "string" },
              },
              "aria-placeholder": {
                defaultValue: null,
                description:
                  "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.\nA hint could be a sample value or a brief description of the expected format.",
                name: "aria-placeholder",
                required: !1,
                type: { name: "string" },
              },
              "aria-posinset": {
                defaultValue: null,
                description:
                  "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\n@see aria-setsize.",
                name: "aria-posinset",
                required: !1,
                type: { name: "number" },
              },
              "aria-pressed": {
                defaultValue: null,
                description:
                  'Indicates the current "pressed" state of toggle buttons.\n@see aria-checked\n@see aria-selected.',
                name: "aria-pressed",
                required: !1,
                type: { name: 'boolean | "mixed" | "false" | "true"' },
              },
              "aria-readonly": {
                defaultValue: null,
                description:
                  "Indicates that the element is not editable, but is otherwise operable.\n@see aria-disabled.",
                name: "aria-readonly",
                required: !1,
                type: { name: "Booleanish" },
              },
              "aria-relevant": {
                defaultValue: null,
                description:
                  "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.\n@see aria-atomic.",
                name: "aria-relevant",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"all"' },
                    { value: '"text"' },
                    { value: '"additions"' },
                    { value: '"additions removals"' },
                    { value: '"additions text"' },
                    { value: '"removals"' },
                    { value: '"removals additions"' },
                    { value: '"removals text"' },
                    { value: '"text additions"' },
                    { value: '"text removals"' },
                  ],
                },
              },
              "aria-required": {
                defaultValue: null,
                description:
                  "Indicates that user input is required on the element before a form may be submitted.",
                name: "aria-required",
                required: !1,
                type: { name: "Booleanish" },
              },
              "aria-roledescription": {
                defaultValue: null,
                description:
                  "Defines a human-readable, author-localized description for the role of an element.",
                name: "aria-roledescription",
                required: !1,
                type: { name: "string" },
              },
              "aria-rowcount": {
                defaultValue: null,
                description:
                  "Defines the total number of rows in a table, grid, or treegrid.\n@see aria-rowindex.",
                name: "aria-rowcount",
                required: !1,
                type: { name: "number" },
              },
              "aria-rowindex": {
                defaultValue: null,
                description:
                  "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.\n@see aria-rowcount\n@see aria-rowspan.",
                name: "aria-rowindex",
                required: !1,
                type: { name: "number" },
              },
              "aria-rowspan": {
                defaultValue: null,
                description:
                  "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.\n@see aria-rowindex\n@see aria-colspan.",
                name: "aria-rowspan",
                required: !1,
                type: { name: "number" },
              },
              "aria-selected": {
                defaultValue: null,
                description:
                  'Indicates the current "selected" state of various widgets.\n@see aria-checked\n@see aria-pressed.',
                name: "aria-selected",
                required: !1,
                type: { name: "Booleanish" },
              },
              "aria-setsize": {
                defaultValue: null,
                description:
                  "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\n@see aria-posinset.",
                name: "aria-setsize",
                required: !1,
                type: { name: "number" },
              },
              "aria-sort": {
                defaultValue: null,
                description:
                  "Indicates if items in a table or grid are sorted in ascending or descending order.",
                name: "aria-sort",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"none"' },
                    { value: '"ascending"' },
                    { value: '"descending"' },
                    { value: '"other"' },
                  ],
                },
              },
              "aria-valuemax": {
                defaultValue: null,
                description:
                  "Defines the maximum allowed value for a range widget.",
                name: "aria-valuemax",
                required: !1,
                type: { name: "number" },
              },
              "aria-valuemin": {
                defaultValue: null,
                description:
                  "Defines the minimum allowed value for a range widget.",
                name: "aria-valuemin",
                required: !1,
                type: { name: "number" },
              },
              "aria-valuenow": {
                defaultValue: null,
                description:
                  "Defines the current value for a range widget.\n@see aria-valuetext.",
                name: "aria-valuenow",
                required: !1,
                type: { name: "number" },
              },
              "aria-valuetext": {
                defaultValue: null,
                description:
                  "Defines the human readable text alternative of aria-valuenow for a range widget.",
                name: "aria-valuetext",
                required: !1,
                type: { name: "string" },
              },
              dangerouslySetInnerHTML: {
                defaultValue: null,
                description: "",
                name: "dangerouslySetInnerHTML",
                required: !1,
                type: { name: "{ __html: string | TrustedHTML; }" },
              },
              onCopy: {
                defaultValue: null,
                description: "",
                name: "onCopy",
                required: !1,
                type: { name: "ClipboardEventHandler<HTMLTextAreaElement>" },
              },
              onCopyCapture: {
                defaultValue: null,
                description: "",
                name: "onCopyCapture",
                required: !1,
                type: { name: "ClipboardEventHandler<HTMLTextAreaElement>" },
              },
              onCut: {
                defaultValue: null,
                description: "",
                name: "onCut",
                required: !1,
                type: { name: "ClipboardEventHandler<HTMLTextAreaElement>" },
              },
              onCutCapture: {
                defaultValue: null,
                description: "",
                name: "onCutCapture",
                required: !1,
                type: { name: "ClipboardEventHandler<HTMLTextAreaElement>" },
              },
              onPaste: {
                defaultValue: null,
                description: "",
                name: "onPaste",
                required: !1,
                type: { name: "ClipboardEventHandler<HTMLTextAreaElement>" },
              },
              onPasteCapture: {
                defaultValue: null,
                description: "",
                name: "onPasteCapture",
                required: !1,
                type: { name: "ClipboardEventHandler<HTMLTextAreaElement>" },
              },
              onCompositionEnd: {
                defaultValue: null,
                description: "",
                name: "onCompositionEnd",
                required: !1,
                type: { name: "CompositionEventHandler<HTMLTextAreaElement>" },
              },
              onCompositionEndCapture: {
                defaultValue: null,
                description: "",
                name: "onCompositionEndCapture",
                required: !1,
                type: { name: "CompositionEventHandler<HTMLTextAreaElement>" },
              },
              onCompositionStart: {
                defaultValue: null,
                description: "",
                name: "onCompositionStart",
                required: !1,
                type: { name: "CompositionEventHandler<HTMLTextAreaElement>" },
              },
              onCompositionStartCapture: {
                defaultValue: null,
                description: "",
                name: "onCompositionStartCapture",
                required: !1,
                type: { name: "CompositionEventHandler<HTMLTextAreaElement>" },
              },
              onCompositionUpdate: {
                defaultValue: null,
                description: "",
                name: "onCompositionUpdate",
                required: !1,
                type: { name: "CompositionEventHandler<HTMLTextAreaElement>" },
              },
              onCompositionUpdateCapture: {
                defaultValue: null,
                description: "",
                name: "onCompositionUpdateCapture",
                required: !1,
                type: { name: "CompositionEventHandler<HTMLTextAreaElement>" },
              },
              onFocus: {
                defaultValue: null,
                description: "",
                name: "onFocus",
                required: !1,
                type: { name: "FocusEventHandler<HTMLTextAreaElement>" },
              },
              onFocusCapture: {
                defaultValue: null,
                description: "",
                name: "onFocusCapture",
                required: !1,
                type: { name: "FocusEventHandler<HTMLTextAreaElement>" },
              },
              onBlur: {
                defaultValue: null,
                description: "",
                name: "onBlur",
                required: !1,
                type: { name: "FocusEventHandler<HTMLTextAreaElement>" },
              },
              onBlurCapture: {
                defaultValue: null,
                description: "",
                name: "onBlurCapture",
                required: !1,
                type: { name: "FocusEventHandler<HTMLTextAreaElement>" },
              },
              onChangeCapture: {
                defaultValue: null,
                description: "",
                name: "onChangeCapture",
                required: !1,
                type: { name: "FormEventHandler<HTMLTextAreaElement>" },
              },
              onBeforeInput: {
                defaultValue: null,
                description: "",
                name: "onBeforeInput",
                required: !1,
                type: { name: "FormEventHandler<HTMLTextAreaElement>" },
              },
              onBeforeInputCapture: {
                defaultValue: null,
                description: "",
                name: "onBeforeInputCapture",
                required: !1,
                type: { name: "FormEventHandler<HTMLTextAreaElement>" },
              },
              onInput: {
                defaultValue: null,
                description: "",
                name: "onInput",
                required: !1,
                type: { name: "FormEventHandler<HTMLTextAreaElement>" },
              },
              onInputCapture: {
                defaultValue: null,
                description: "",
                name: "onInputCapture",
                required: !1,
                type: { name: "FormEventHandler<HTMLTextAreaElement>" },
              },
              onReset: {
                defaultValue: null,
                description: "",
                name: "onReset",
                required: !1,
                type: { name: "FormEventHandler<HTMLTextAreaElement>" },
              },
              onResetCapture: {
                defaultValue: null,
                description: "",
                name: "onResetCapture",
                required: !1,
                type: { name: "FormEventHandler<HTMLTextAreaElement>" },
              },
              onSubmit: {
                defaultValue: null,
                description: "",
                name: "onSubmit",
                required: !1,
                type: { name: "FormEventHandler<HTMLTextAreaElement>" },
              },
              onSubmitCapture: {
                defaultValue: null,
                description: "",
                name: "onSubmitCapture",
                required: !1,
                type: { name: "FormEventHandler<HTMLTextAreaElement>" },
              },
              onInvalid: {
                defaultValue: null,
                description: "",
                name: "onInvalid",
                required: !1,
                type: { name: "FormEventHandler<HTMLTextAreaElement>" },
              },
              onInvalidCapture: {
                defaultValue: null,
                description: "",
                name: "onInvalidCapture",
                required: !1,
                type: { name: "FormEventHandler<HTMLTextAreaElement>" },
              },
              onLoad: {
                defaultValue: null,
                description: "",
                name: "onLoad",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onLoadCapture: {
                defaultValue: null,
                description: "",
                name: "onLoadCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onError: {
                defaultValue: null,
                description: "",
                name: "onError",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onErrorCapture: {
                defaultValue: null,
                description: "",
                name: "onErrorCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onKeyDown: {
                defaultValue: null,
                description: "",
                name: "onKeyDown",
                required: !1,
                type: { name: "KeyboardEventHandler<HTMLTextAreaElement>" },
              },
              onKeyDownCapture: {
                defaultValue: null,
                description: "",
                name: "onKeyDownCapture",
                required: !1,
                type: { name: "KeyboardEventHandler<HTMLTextAreaElement>" },
              },
              onKeyPress: {
                defaultValue: null,
                description: "@deprecated",
                name: "onKeyPress",
                required: !1,
                type: { name: "KeyboardEventHandler<HTMLTextAreaElement>" },
              },
              onKeyPressCapture: {
                defaultValue: null,
                description: "@deprecated",
                name: "onKeyPressCapture",
                required: !1,
                type: { name: "KeyboardEventHandler<HTMLTextAreaElement>" },
              },
              onKeyUp: {
                defaultValue: null,
                description: "",
                name: "onKeyUp",
                required: !1,
                type: { name: "KeyboardEventHandler<HTMLTextAreaElement>" },
              },
              onKeyUpCapture: {
                defaultValue: null,
                description: "",
                name: "onKeyUpCapture",
                required: !1,
                type: { name: "KeyboardEventHandler<HTMLTextAreaElement>" },
              },
              onAbort: {
                defaultValue: null,
                description: "",
                name: "onAbort",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onAbortCapture: {
                defaultValue: null,
                description: "",
                name: "onAbortCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onCanPlay: {
                defaultValue: null,
                description: "",
                name: "onCanPlay",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onCanPlayCapture: {
                defaultValue: null,
                description: "",
                name: "onCanPlayCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onCanPlayThrough: {
                defaultValue: null,
                description: "",
                name: "onCanPlayThrough",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onCanPlayThroughCapture: {
                defaultValue: null,
                description: "",
                name: "onCanPlayThroughCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onDurationChange: {
                defaultValue: null,
                description: "",
                name: "onDurationChange",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onDurationChangeCapture: {
                defaultValue: null,
                description: "",
                name: "onDurationChangeCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onEmptied: {
                defaultValue: null,
                description: "",
                name: "onEmptied",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onEmptiedCapture: {
                defaultValue: null,
                description: "",
                name: "onEmptiedCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onEncrypted: {
                defaultValue: null,
                description: "",
                name: "onEncrypted",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onEncryptedCapture: {
                defaultValue: null,
                description: "",
                name: "onEncryptedCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onEnded: {
                defaultValue: null,
                description: "",
                name: "onEnded",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onEndedCapture: {
                defaultValue: null,
                description: "",
                name: "onEndedCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onLoadedData: {
                defaultValue: null,
                description: "",
                name: "onLoadedData",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onLoadedDataCapture: {
                defaultValue: null,
                description: "",
                name: "onLoadedDataCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onLoadedMetadata: {
                defaultValue: null,
                description: "",
                name: "onLoadedMetadata",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onLoadedMetadataCapture: {
                defaultValue: null,
                description: "",
                name: "onLoadedMetadataCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onLoadStart: {
                defaultValue: null,
                description: "",
                name: "onLoadStart",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onLoadStartCapture: {
                defaultValue: null,
                description: "",
                name: "onLoadStartCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onPause: {
                defaultValue: null,
                description: "",
                name: "onPause",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onPauseCapture: {
                defaultValue: null,
                description: "",
                name: "onPauseCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onPlay: {
                defaultValue: null,
                description: "",
                name: "onPlay",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onPlayCapture: {
                defaultValue: null,
                description: "",
                name: "onPlayCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onPlaying: {
                defaultValue: null,
                description: "",
                name: "onPlaying",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onPlayingCapture: {
                defaultValue: null,
                description: "",
                name: "onPlayingCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onProgress: {
                defaultValue: null,
                description: "",
                name: "onProgress",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onProgressCapture: {
                defaultValue: null,
                description: "",
                name: "onProgressCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onRateChange: {
                defaultValue: null,
                description: "",
                name: "onRateChange",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onRateChangeCapture: {
                defaultValue: null,
                description: "",
                name: "onRateChangeCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onResize: {
                defaultValue: null,
                description: "",
                name: "onResize",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onResizeCapture: {
                defaultValue: null,
                description: "",
                name: "onResizeCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onSeeked: {
                defaultValue: null,
                description: "",
                name: "onSeeked",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onSeekedCapture: {
                defaultValue: null,
                description: "",
                name: "onSeekedCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onSeeking: {
                defaultValue: null,
                description: "",
                name: "onSeeking",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onSeekingCapture: {
                defaultValue: null,
                description: "",
                name: "onSeekingCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onStalled: {
                defaultValue: null,
                description: "",
                name: "onStalled",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onStalledCapture: {
                defaultValue: null,
                description: "",
                name: "onStalledCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onSuspend: {
                defaultValue: null,
                description: "",
                name: "onSuspend",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onSuspendCapture: {
                defaultValue: null,
                description: "",
                name: "onSuspendCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onTimeUpdate: {
                defaultValue: null,
                description: "",
                name: "onTimeUpdate",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onTimeUpdateCapture: {
                defaultValue: null,
                description: "",
                name: "onTimeUpdateCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onVolumeChange: {
                defaultValue: null,
                description: "",
                name: "onVolumeChange",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onVolumeChangeCapture: {
                defaultValue: null,
                description: "",
                name: "onVolumeChangeCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onWaiting: {
                defaultValue: null,
                description: "",
                name: "onWaiting",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onWaitingCapture: {
                defaultValue: null,
                description: "",
                name: "onWaitingCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onAuxClick: {
                defaultValue: null,
                description: "",
                name: "onAuxClick",
                required: !1,
                type: { name: "MouseEventHandler<HTMLTextAreaElement>" },
              },
              onAuxClickCapture: {
                defaultValue: null,
                description: "",
                name: "onAuxClickCapture",
                required: !1,
                type: { name: "MouseEventHandler<HTMLTextAreaElement>" },
              },
              onClick: {
                defaultValue: null,
                description: "",
                name: "onClick",
                required: !1,
                type: { name: "MouseEventHandler<HTMLTextAreaElement>" },
              },
              onClickCapture: {
                defaultValue: null,
                description: "",
                name: "onClickCapture",
                required: !1,
                type: { name: "MouseEventHandler<HTMLTextAreaElement>" },
              },
              onContextMenu: {
                defaultValue: null,
                description: "",
                name: "onContextMenu",
                required: !1,
                type: { name: "MouseEventHandler<HTMLTextAreaElement>" },
              },
              onContextMenuCapture: {
                defaultValue: null,
                description: "",
                name: "onContextMenuCapture",
                required: !1,
                type: { name: "MouseEventHandler<HTMLTextAreaElement>" },
              },
              onDoubleClick: {
                defaultValue: null,
                description: "",
                name: "onDoubleClick",
                required: !1,
                type: { name: "MouseEventHandler<HTMLTextAreaElement>" },
              },
              onDoubleClickCapture: {
                defaultValue: null,
                description: "",
                name: "onDoubleClickCapture",
                required: !1,
                type: { name: "MouseEventHandler<HTMLTextAreaElement>" },
              },
              onDrag: {
                defaultValue: null,
                description: "",
                name: "onDrag",
                required: !1,
                type: { name: "DragEventHandler<HTMLTextAreaElement>" },
              },
              onDragCapture: {
                defaultValue: null,
                description: "",
                name: "onDragCapture",
                required: !1,
                type: { name: "DragEventHandler<HTMLTextAreaElement>" },
              },
              onDragEnd: {
                defaultValue: null,
                description: "",
                name: "onDragEnd",
                required: !1,
                type: { name: "DragEventHandler<HTMLTextAreaElement>" },
              },
              onDragEndCapture: {
                defaultValue: null,
                description: "",
                name: "onDragEndCapture",
                required: !1,
                type: { name: "DragEventHandler<HTMLTextAreaElement>" },
              },
              onDragEnter: {
                defaultValue: null,
                description: "",
                name: "onDragEnter",
                required: !1,
                type: { name: "DragEventHandler<HTMLTextAreaElement>" },
              },
              onDragEnterCapture: {
                defaultValue: null,
                description: "",
                name: "onDragEnterCapture",
                required: !1,
                type: { name: "DragEventHandler<HTMLTextAreaElement>" },
              },
              onDragExit: {
                defaultValue: null,
                description: "",
                name: "onDragExit",
                required: !1,
                type: { name: "DragEventHandler<HTMLTextAreaElement>" },
              },
              onDragExitCapture: {
                defaultValue: null,
                description: "",
                name: "onDragExitCapture",
                required: !1,
                type: { name: "DragEventHandler<HTMLTextAreaElement>" },
              },
              onDragLeave: {
                defaultValue: null,
                description: "",
                name: "onDragLeave",
                required: !1,
                type: { name: "DragEventHandler<HTMLTextAreaElement>" },
              },
              onDragLeaveCapture: {
                defaultValue: null,
                description: "",
                name: "onDragLeaveCapture",
                required: !1,
                type: { name: "DragEventHandler<HTMLTextAreaElement>" },
              },
              onDragOver: {
                defaultValue: null,
                description: "",
                name: "onDragOver",
                required: !1,
                type: { name: "DragEventHandler<HTMLTextAreaElement>" },
              },
              onDragOverCapture: {
                defaultValue: null,
                description: "",
                name: "onDragOverCapture",
                required: !1,
                type: { name: "DragEventHandler<HTMLTextAreaElement>" },
              },
              onDragStart: {
                defaultValue: null,
                description: "",
                name: "onDragStart",
                required: !1,
                type: { name: "DragEventHandler<HTMLTextAreaElement>" },
              },
              onDragStartCapture: {
                defaultValue: null,
                description: "",
                name: "onDragStartCapture",
                required: !1,
                type: { name: "DragEventHandler<HTMLTextAreaElement>" },
              },
              onDrop: {
                defaultValue: null,
                description: "",
                name: "onDrop",
                required: !1,
                type: { name: "DragEventHandler<HTMLTextAreaElement>" },
              },
              onDropCapture: {
                defaultValue: null,
                description: "",
                name: "onDropCapture",
                required: !1,
                type: { name: "DragEventHandler<HTMLTextAreaElement>" },
              },
              onMouseDown: {
                defaultValue: null,
                description: "",
                name: "onMouseDown",
                required: !1,
                type: { name: "MouseEventHandler<HTMLTextAreaElement>" },
              },
              onMouseDownCapture: {
                defaultValue: null,
                description: "",
                name: "onMouseDownCapture",
                required: !1,
                type: { name: "MouseEventHandler<HTMLTextAreaElement>" },
              },
              onMouseEnter: {
                defaultValue: null,
                description: "",
                name: "onMouseEnter",
                required: !1,
                type: { name: "MouseEventHandler<HTMLTextAreaElement>" },
              },
              onMouseLeave: {
                defaultValue: null,
                description: "",
                name: "onMouseLeave",
                required: !1,
                type: { name: "MouseEventHandler<HTMLTextAreaElement>" },
              },
              onMouseMove: {
                defaultValue: null,
                description: "",
                name: "onMouseMove",
                required: !1,
                type: { name: "MouseEventHandler<HTMLTextAreaElement>" },
              },
              onMouseMoveCapture: {
                defaultValue: null,
                description: "",
                name: "onMouseMoveCapture",
                required: !1,
                type: { name: "MouseEventHandler<HTMLTextAreaElement>" },
              },
              onMouseOut: {
                defaultValue: null,
                description: "",
                name: "onMouseOut",
                required: !1,
                type: { name: "MouseEventHandler<HTMLTextAreaElement>" },
              },
              onMouseOutCapture: {
                defaultValue: null,
                description: "",
                name: "onMouseOutCapture",
                required: !1,
                type: { name: "MouseEventHandler<HTMLTextAreaElement>" },
              },
              onMouseOver: {
                defaultValue: null,
                description: "",
                name: "onMouseOver",
                required: !1,
                type: { name: "MouseEventHandler<HTMLTextAreaElement>" },
              },
              onMouseOverCapture: {
                defaultValue: null,
                description: "",
                name: "onMouseOverCapture",
                required: !1,
                type: { name: "MouseEventHandler<HTMLTextAreaElement>" },
              },
              onMouseUp: {
                defaultValue: null,
                description: "",
                name: "onMouseUp",
                required: !1,
                type: { name: "MouseEventHandler<HTMLTextAreaElement>" },
              },
              onMouseUpCapture: {
                defaultValue: null,
                description: "",
                name: "onMouseUpCapture",
                required: !1,
                type: { name: "MouseEventHandler<HTMLTextAreaElement>" },
              },
              onSelect: {
                defaultValue: null,
                description: "",
                name: "onSelect",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onSelectCapture: {
                defaultValue: null,
                description: "",
                name: "onSelectCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onTouchCancel: {
                defaultValue: null,
                description: "",
                name: "onTouchCancel",
                required: !1,
                type: { name: "TouchEventHandler<HTMLTextAreaElement>" },
              },
              onTouchCancelCapture: {
                defaultValue: null,
                description: "",
                name: "onTouchCancelCapture",
                required: !1,
                type: { name: "TouchEventHandler<HTMLTextAreaElement>" },
              },
              onTouchEnd: {
                defaultValue: null,
                description: "",
                name: "onTouchEnd",
                required: !1,
                type: { name: "TouchEventHandler<HTMLTextAreaElement>" },
              },
              onTouchEndCapture: {
                defaultValue: null,
                description: "",
                name: "onTouchEndCapture",
                required: !1,
                type: { name: "TouchEventHandler<HTMLTextAreaElement>" },
              },
              onTouchMove: {
                defaultValue: null,
                description: "",
                name: "onTouchMove",
                required: !1,
                type: { name: "TouchEventHandler<HTMLTextAreaElement>" },
              },
              onTouchMoveCapture: {
                defaultValue: null,
                description: "",
                name: "onTouchMoveCapture",
                required: !1,
                type: { name: "TouchEventHandler<HTMLTextAreaElement>" },
              },
              onTouchStart: {
                defaultValue: null,
                description: "",
                name: "onTouchStart",
                required: !1,
                type: { name: "TouchEventHandler<HTMLTextAreaElement>" },
              },
              onTouchStartCapture: {
                defaultValue: null,
                description: "",
                name: "onTouchStartCapture",
                required: !1,
                type: { name: "TouchEventHandler<HTMLTextAreaElement>" },
              },
              onPointerDown: {
                defaultValue: null,
                description: "",
                name: "onPointerDown",
                required: !1,
                type: { name: "PointerEventHandler<HTMLTextAreaElement>" },
              },
              onPointerDownCapture: {
                defaultValue: null,
                description: "",
                name: "onPointerDownCapture",
                required: !1,
                type: { name: "PointerEventHandler<HTMLTextAreaElement>" },
              },
              onPointerMove: {
                defaultValue: null,
                description: "",
                name: "onPointerMove",
                required: !1,
                type: { name: "PointerEventHandler<HTMLTextAreaElement>" },
              },
              onPointerMoveCapture: {
                defaultValue: null,
                description: "",
                name: "onPointerMoveCapture",
                required: !1,
                type: { name: "PointerEventHandler<HTMLTextAreaElement>" },
              },
              onPointerUp: {
                defaultValue: null,
                description: "",
                name: "onPointerUp",
                required: !1,
                type: { name: "PointerEventHandler<HTMLTextAreaElement>" },
              },
              onPointerUpCapture: {
                defaultValue: null,
                description: "",
                name: "onPointerUpCapture",
                required: !1,
                type: { name: "PointerEventHandler<HTMLTextAreaElement>" },
              },
              onPointerCancel: {
                defaultValue: null,
                description: "",
                name: "onPointerCancel",
                required: !1,
                type: { name: "PointerEventHandler<HTMLTextAreaElement>" },
              },
              onPointerCancelCapture: {
                defaultValue: null,
                description: "",
                name: "onPointerCancelCapture",
                required: !1,
                type: { name: "PointerEventHandler<HTMLTextAreaElement>" },
              },
              onPointerEnter: {
                defaultValue: null,
                description: "",
                name: "onPointerEnter",
                required: !1,
                type: { name: "PointerEventHandler<HTMLTextAreaElement>" },
              },
              onPointerEnterCapture: {
                defaultValue: null,
                description: "",
                name: "onPointerEnterCapture",
                required: !1,
                type: { name: "PointerEventHandler<HTMLTextAreaElement>" },
              },
              onPointerLeave: {
                defaultValue: null,
                description: "",
                name: "onPointerLeave",
                required: !1,
                type: { name: "PointerEventHandler<HTMLTextAreaElement>" },
              },
              onPointerLeaveCapture: {
                defaultValue: null,
                description: "",
                name: "onPointerLeaveCapture",
                required: !1,
                type: { name: "PointerEventHandler<HTMLTextAreaElement>" },
              },
              onPointerOver: {
                defaultValue: null,
                description: "",
                name: "onPointerOver",
                required: !1,
                type: { name: "PointerEventHandler<HTMLTextAreaElement>" },
              },
              onPointerOverCapture: {
                defaultValue: null,
                description: "",
                name: "onPointerOverCapture",
                required: !1,
                type: { name: "PointerEventHandler<HTMLTextAreaElement>" },
              },
              onPointerOut: {
                defaultValue: null,
                description: "",
                name: "onPointerOut",
                required: !1,
                type: { name: "PointerEventHandler<HTMLTextAreaElement>" },
              },
              onPointerOutCapture: {
                defaultValue: null,
                description: "",
                name: "onPointerOutCapture",
                required: !1,
                type: { name: "PointerEventHandler<HTMLTextAreaElement>" },
              },
              onGotPointerCapture: {
                defaultValue: null,
                description: "",
                name: "onGotPointerCapture",
                required: !1,
                type: { name: "PointerEventHandler<HTMLTextAreaElement>" },
              },
              onGotPointerCaptureCapture: {
                defaultValue: null,
                description: "",
                name: "onGotPointerCaptureCapture",
                required: !1,
                type: { name: "PointerEventHandler<HTMLTextAreaElement>" },
              },
              onLostPointerCapture: {
                defaultValue: null,
                description: "",
                name: "onLostPointerCapture",
                required: !1,
                type: { name: "PointerEventHandler<HTMLTextAreaElement>" },
              },
              onLostPointerCaptureCapture: {
                defaultValue: null,
                description: "",
                name: "onLostPointerCaptureCapture",
                required: !1,
                type: { name: "PointerEventHandler<HTMLTextAreaElement>" },
              },
              onScroll: {
                defaultValue: null,
                description: "",
                name: "onScroll",
                required: !1,
                type: { name: "UIEventHandler<HTMLTextAreaElement>" },
              },
              onScrollCapture: {
                defaultValue: null,
                description: "",
                name: "onScrollCapture",
                required: !1,
                type: { name: "UIEventHandler<HTMLTextAreaElement>" },
              },
              onWheel: {
                defaultValue: null,
                description: "",
                name: "onWheel",
                required: !1,
                type: { name: "WheelEventHandler<HTMLTextAreaElement>" },
              },
              onWheelCapture: {
                defaultValue: null,
                description: "",
                name: "onWheelCapture",
                required: !1,
                type: { name: "WheelEventHandler<HTMLTextAreaElement>" },
              },
              onAnimationStart: {
                defaultValue: null,
                description: "",
                name: "onAnimationStart",
                required: !1,
                type: { name: "AnimationEventHandler<HTMLTextAreaElement>" },
              },
              onAnimationStartCapture: {
                defaultValue: null,
                description: "",
                name: "onAnimationStartCapture",
                required: !1,
                type: { name: "AnimationEventHandler<HTMLTextAreaElement>" },
              },
              onAnimationEnd: {
                defaultValue: null,
                description: "",
                name: "onAnimationEnd",
                required: !1,
                type: { name: "AnimationEventHandler<HTMLTextAreaElement>" },
              },
              onAnimationEndCapture: {
                defaultValue: null,
                description: "",
                name: "onAnimationEndCapture",
                required: !1,
                type: { name: "AnimationEventHandler<HTMLTextAreaElement>" },
              },
              onAnimationIteration: {
                defaultValue: null,
                description: "",
                name: "onAnimationIteration",
                required: !1,
                type: { name: "AnimationEventHandler<HTMLTextAreaElement>" },
              },
              onAnimationIterationCapture: {
                defaultValue: null,
                description: "",
                name: "onAnimationIterationCapture",
                required: !1,
                type: { name: "AnimationEventHandler<HTMLTextAreaElement>" },
              },
              onTransitionEnd: {
                defaultValue: null,
                description: "",
                name: "onTransitionEnd",
                required: !1,
                type: { name: "TransitionEventHandler<HTMLTextAreaElement>" },
              },
              onTransitionEndCapture: {
                defaultValue: null,
                description: "",
                name: "onTransitionEndCapture",
                required: !1,
                type: { name: "TransitionEventHandler<HTMLTextAreaElement>" },
              },
              alignItems: {
                defaultValue: null,
                description: "",
                name: "alignItems",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"stretch"' },
                    { value: '"center"' },
                    { value: '"end"' },
                    { value: '"start"' },
                    { value: '"baseline"' },
                  ],
                },
              },
              aspectRatio: {
                defaultValue: null,
                description: "",
                name: "aspectRatio",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"square"' },
                    { value: '"extraWide"' },
                    { value: '"tall"' },
                    { value: '"wide"' },
                  ],
                },
              },
              background: {
                defaultValue: null,
                description: "",
                name: "background",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"inherit"' },
                    { value: '"background"' },
                    { value: '"black"' },
                    { value: '"transparent"' },
                    { value: '"white"' },
                    { value: '"backdrop"' },
                    { value: '"border_active"' },
                    { value: '"border_default"' },
                    { value: '"button_active"' },
                    { value: '"button_default"' },
                    { value: '"button_tint"' },
                    { value: '"focus_ring"' },
                    { value: '"shadow"' },
                    { value: '"text_high_contrast"' },
                    { value: '"text_low_contrast"' },
                    { value: '"tint_active"' },
                    { value: '"tint_default"' },
                  ],
                },
              },
              border: {
                defaultValue: null,
                description: "",
                name: "border",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"border_active"' },
                    { value: '"border_default"' },
                  ],
                },
              },
              borderBottom: {
                defaultValue: null,
                description: "",
                name: "borderBottom",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"border_active"' },
                    { value: '"border_default"' },
                  ],
                },
              },
              borderLeft: {
                defaultValue: null,
                description: "",
                name: "borderLeft",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"border_active"' },
                    { value: '"border_default"' },
                  ],
                },
              },
              borderRadius: {
                defaultValue: null,
                description: "",
                name: "borderRadius",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"50%"' },
                    { value: '"lg"' },
                    { value: '"md"' },
                    { value: '"pill"' },
                    { value: '"sm"' },
                  ],
                },
              },
              borderRight: {
                defaultValue: null,
                description: "",
                name: "borderRight",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"border_active"' },
                    { value: '"border_default"' },
                  ],
                },
              },
              borderTop: {
                defaultValue: null,
                description: "",
                name: "borderTop",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"border_active"' },
                    { value: '"border_default"' },
                  ],
                },
              },
              bottom: {
                defaultValue: null,
                description: "",
                name: "bottom",
                required: !1,
                type: { name: '"0"' },
              },
              boxShadow: {
                defaultValue: null,
                description: "",
                name: "boxShadow",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"lg"' },
                    { value: '"md"' },
                    { value: '"sm"' },
                  ],
                },
              },
              color: {
                defaultValue: null,
                description: "",
                name: "color",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"inherit"' },
                    { value: '"background"' },
                    { value: '"black"' },
                    { value: '"white"' },
                    { value: '"currentColor"' },
                    { value: '"backdrop"' },
                    { value: '"border_active"' },
                    { value: '"border_default"' },
                    { value: '"button_active"' },
                    { value: '"button_default"' },
                    { value: '"button_tint"' },
                    { value: '"focus_ring"' },
                    { value: '"shadow"' },
                    { value: '"text_high_contrast"' },
                    { value: '"text_low_contrast"' },
                    { value: '"tint_active"' },
                    { value: '"tint_default"' },
                  ],
                },
              },
              flex: {
                defaultValue: null,
                description: "",
                name: "flex",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"0 1 auto"' },
                    { value: '"1 1 auto"' },
                    { value: '"1 1 0%"' },
                    { value: '"1 1 100%"' },
                  ],
                },
              },
              flexGrow: {
                defaultValue: null,
                description: "",
                name: "flexGrow",
                required: !1,
                type: {
                  name: "enum",
                  value: [{ value: '"0"' }, { value: '"1"' }],
                },
              },
              flexShrink: {
                defaultValue: null,
                description: "",
                name: "flexShrink",
                required: !1,
                type: {
                  name: "enum",
                  value: [{ value: '"0"' }, { value: '"1"' }],
                },
              },
              flexWrap: {
                defaultValue: null,
                description: "",
                name: "flexWrap",
                required: !1,
                type: {
                  name: "enum",
                  value: [{ value: '"nowrap"' }, { value: '"wrap"' }],
                },
              },
              fontSize: {
                defaultValue: null,
                description: "",
                name: "fontSize",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"h1"' },
                    { value: '"h2"' },
                    { value: '"h3"' },
                    { value: '"h4"' },
                    { value: '"h5"' },
                    { value: '"h6"' },
                    { value: '"body_lg"' },
                    { value: '"body_md"' },
                    { value: '"body_sm"' },
                    { value: '"body_xl"' },
                    { value: '"body_xs"' },
                    { value: '"h0"' },
                    { value: '"root"' },
                  ],
                },
              },
              fontWeight: {
                defaultValue: null,
                description: "",
                name: "fontWeight",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"normal"' },
                    { value: '"bold"' },
                    { value: '"medium"' },
                    { value: '"light"' },
                    { value: '"extrabold"' },
                    { value: '"semibold"' },
                  ],
                },
              },
              height: {
                defaultValue: null,
                description: "",
                name: "height",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '""' },
                    { value: '"none"' },
                    { value: '"auto"' },
                    { value: '"min-content"' },
                    { value: '"50%"' },
                    { value: '"100%"' },
                    { value: '"100vh"' },
                    { value: '"25%"' },
                    { value: '"25vh"' },
                    { value: '"50vh"' },
                    { value: '"75%"' },
                    { value: '"75vh"' },
                    { value: '"90vh"' },
                    { value: '"spacing_0.25"' },
                    { value: '"spacing_0.5"' },
                    { value: '"spacing_1"' },
                    { value: '"spacing_1.5"' },
                    { value: '"spacing_2"' },
                    { value: '"spacing_3"' },
                    { value: '"spacing_4"' },
                    { value: '"spacing_5"' },
                    { value: '"spacing_6"' },
                  ],
                },
              },
              inset: {
                defaultValue: null,
                description: "",
                name: "inset",
                required: !1,
                type: { name: '"0"' },
              },
              isolation: {
                defaultValue: null,
                description: "",
                name: "isolation",
                required: !1,
                type: { name: '"isolate"' },
              },
              justifyContent: {
                defaultValue: null,
                description: "",
                name: "justifyContent",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"space-around"' },
                    { value: '"space-between"' },
                    { value: '"stretch"' },
                    { value: '"center"' },
                    { value: '"end"' },
                    { value: '"start"' },
                  ],
                },
              },
              left: {
                defaultValue: null,
                description: "",
                name: "left",
                required: !1,
                type: { name: '"0"' },
              },
              lineHeight: {
                defaultValue: null,
                description: "",
                name: "lineHeight",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"h1"' },
                    { value: '"h2"' },
                    { value: '"h3"' },
                    { value: '"h4"' },
                    { value: '"h5"' },
                    { value: '"h6"' },
                    { value: '"body_lg"' },
                    { value: '"body_md"' },
                    { value: '"body_sm"' },
                    { value: '"body_xl"' },
                    { value: '"body_xs"' },
                    { value: '"h0"' },
                    { value: '"root"' },
                  ],
                },
              },
              margin: {
                defaultValue: null,
                description: "",
                name: "margin",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"none"' },
                    { value: '"auto"' },
                    { value: '"spacing_0.25"' },
                    { value: '"spacing_0.5"' },
                    { value: '"spacing_1"' },
                    { value: '"spacing_1.5"' },
                    { value: '"spacing_2"' },
                    { value: '"spacing_3"' },
                    { value: '"spacing_4"' },
                    { value: '"spacing_5"' },
                    { value: '"spacing_6"' },
                  ],
                },
              },
              marginBottom: {
                defaultValue: null,
                description: "",
                name: "marginBottom",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"none"' },
                    { value: '"auto"' },
                    { value: '"spacing_0.25"' },
                    { value: '"spacing_0.5"' },
                    { value: '"spacing_1"' },
                    { value: '"spacing_1.5"' },
                    { value: '"spacing_2"' },
                    { value: '"spacing_3"' },
                    { value: '"spacing_4"' },
                    { value: '"spacing_5"' },
                    { value: '"spacing_6"' },
                  ],
                },
              },
              marginLeft: {
                defaultValue: null,
                description: "",
                name: "marginLeft",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"none"' },
                    { value: '"auto"' },
                    { value: '"spacing_0.25"' },
                    { value: '"spacing_0.5"' },
                    { value: '"spacing_1"' },
                    { value: '"spacing_1.5"' },
                    { value: '"spacing_2"' },
                    { value: '"spacing_3"' },
                    { value: '"spacing_4"' },
                    { value: '"spacing_5"' },
                    { value: '"spacing_6"' },
                  ],
                },
              },
              marginRight: {
                defaultValue: null,
                description: "",
                name: "marginRight",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"none"' },
                    { value: '"auto"' },
                    { value: '"spacing_0.25"' },
                    { value: '"spacing_0.5"' },
                    { value: '"spacing_1"' },
                    { value: '"spacing_1.5"' },
                    { value: '"spacing_2"' },
                    { value: '"spacing_3"' },
                    { value: '"spacing_4"' },
                    { value: '"spacing_5"' },
                    { value: '"spacing_6"' },
                  ],
                },
              },
              marginTop: {
                defaultValue: null,
                description: "",
                name: "marginTop",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"none"' },
                    { value: '"auto"' },
                    { value: '"spacing_0.25"' },
                    { value: '"spacing_0.5"' },
                    { value: '"spacing_1"' },
                    { value: '"spacing_1.5"' },
                    { value: '"spacing_2"' },
                    { value: '"spacing_3"' },
                    { value: '"spacing_4"' },
                    { value: '"spacing_5"' },
                    { value: '"spacing_6"' },
                  ],
                },
              },
              maxHeight: {
                defaultValue: null,
                description: "",
                name: "maxHeight",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '""' },
                    { value: '"none"' },
                    { value: '"auto"' },
                    { value: '"min-content"' },
                    { value: '"50%"' },
                    { value: '"100%"' },
                    { value: '"100vh"' },
                    { value: '"25%"' },
                    { value: '"25vh"' },
                    { value: '"50vh"' },
                    { value: '"75%"' },
                    { value: '"75vh"' },
                    { value: '"90vh"' },
                    { value: '"spacing_0.25"' },
                    { value: '"spacing_0.5"' },
                    { value: '"spacing_1"' },
                    { value: '"spacing_1.5"' },
                    { value: '"spacing_2"' },
                    { value: '"spacing_3"' },
                    { value: '"spacing_4"' },
                    { value: '"spacing_5"' },
                    { value: '"spacing_6"' },
                  ],
                },
              },
              maxWidth: {
                defaultValue: null,
                description: "",
                name: "maxWidth",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '""' },
                    { value: '"none"' },
                    { value: '"auto"' },
                    { value: '"max-content"' },
                    { value: '"min-content"' },
                    { value: '"50%"' },
                    { value: '"100%"' },
                    { value: '"25%"' },
                    { value: '"spacing_0.25"' },
                    { value: '"spacing_0.5"' },
                    { value: '"spacing_1"' },
                    { value: '"spacing_1.5"' },
                    { value: '"spacing_2"' },
                    { value: '"spacing_3"' },
                    { value: '"spacing_4"' },
                    { value: '"spacing_5"' },
                    { value: '"spacing_6"' },
                    { value: '"col_1"' },
                    { value: '"col_10"' },
                    { value: '"col_11"' },
                    { value: '"col_12"' },
                    { value: '"col_2"' },
                    { value: '"col_3"' },
                    { value: '"col_4"' },
                    { value: '"col_5"' },
                    { value: '"col_6"' },
                    { value: '"col_7"' },
                    { value: '"col_8"' },
                    { value: '"col_9"' },
                  ],
                },
              },
              minHeight: {
                defaultValue: null,
                description: "",
                name: "minHeight",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '""' },
                    { value: '"none"' },
                    { value: '"auto"' },
                    { value: '"min-content"' },
                    { value: '"50%"' },
                    { value: '"100%"' },
                    { value: '"100vh"' },
                    { value: '"25%"' },
                    { value: '"25vh"' },
                    { value: '"50vh"' },
                    { value: '"75%"' },
                    { value: '"75vh"' },
                    { value: '"90vh"' },
                    { value: '"spacing_0.25"' },
                    { value: '"spacing_0.5"' },
                    { value: '"spacing_1"' },
                    { value: '"spacing_1.5"' },
                    { value: '"spacing_2"' },
                    { value: '"spacing_3"' },
                    { value: '"spacing_4"' },
                    { value: '"spacing_5"' },
                    { value: '"spacing_6"' },
                  ],
                },
              },
              minWidth: {
                defaultValue: null,
                description: "",
                name: "minWidth",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '""' },
                    { value: '"none"' },
                    { value: '"auto"' },
                    { value: '"max-content"' },
                    { value: '"min-content"' },
                    { value: '"50%"' },
                    { value: '"100%"' },
                    { value: '"25%"' },
                    { value: '"spacing_0.25"' },
                    { value: '"spacing_0.5"' },
                    { value: '"spacing_1"' },
                    { value: '"spacing_1.5"' },
                    { value: '"spacing_2"' },
                    { value: '"spacing_3"' },
                    { value: '"spacing_4"' },
                    { value: '"spacing_5"' },
                    { value: '"spacing_6"' },
                    { value: '"col_1"' },
                    { value: '"col_10"' },
                    { value: '"col_11"' },
                    { value: '"col_12"' },
                    { value: '"col_2"' },
                    { value: '"col_3"' },
                    { value: '"col_4"' },
                    { value: '"col_5"' },
                    { value: '"col_6"' },
                    { value: '"col_7"' },
                    { value: '"col_8"' },
                    { value: '"col_9"' },
                  ],
                },
              },
              overflow: {
                defaultValue: null,
                description: "",
                name: "overflow",
                required: !1,
                type: { name: '"hidden"' },
              },
              overflowY: {
                defaultValue: null,
                description: "",
                name: "overflowY",
                required: !1,
                type: { name: '"auto"' },
              },
              right: {
                defaultValue: null,
                description: "",
                name: "right",
                required: !1,
                type: { name: '"0"' },
              },
              textAlign: {
                defaultValue: null,
                description: "",
                name: "textAlign",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"left"' },
                    { value: '"right"' },
                    { value: '"center"' },
                  ],
                },
              },
              textDecoration: {
                defaultValue: null,
                description: "",
                name: "textDecoration",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"none"' },
                    { value: '"line-through"' },
                    { value: '"underline"' },
                  ],
                },
              },
              textTransform: {
                defaultValue: null,
                description: "",
                name: "textTransform",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"capitalize"' },
                    { value: '"lowercase"' },
                    { value: '"uppercase"' },
                  ],
                },
              },
              top: {
                defaultValue: null,
                description: "",
                name: "top",
                required: !1,
                type: { name: '"0"' },
              },
              whiteSpace: {
                defaultValue: null,
                description: "",
                name: "whiteSpace",
                required: !1,
                type: {
                  name: "enum",
                  value: [{ value: '"normal"' }, { value: '"nowrap"' }],
                },
              },
              zIndex: {
                defaultValue: null,
                description: "",
                name: "zIndex",
                required: !1,
                type: {
                  name: "enum",
                  value: [{ value: '"1"' }, { value: '"-1"' }],
                },
              },
              fontStyle: {
                defaultValue: null,
                description: "",
                name: "fontStyle",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"h1"' },
                    { value: '"h2"' },
                    { value: '"h3"' },
                    { value: '"h4"' },
                    { value: '"h5"' },
                    { value: '"h6"' },
                    { value: '"body_lg"' },
                    { value: '"body_md"' },
                    { value: '"body_sm"' },
                    { value: '"body_xl"' },
                    { value: '"body_xs"' },
                    { value: '"h0"' },
                    { value: '"root"' },
                  ],
                },
              },
              marginX: {
                defaultValue: null,
                description: "",
                name: "marginX",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"none"' },
                    { value: '"auto"' },
                    { value: '"spacing_0.25"' },
                    { value: '"spacing_0.5"' },
                    { value: '"spacing_1"' },
                    { value: '"spacing_1.5"' },
                    { value: '"spacing_2"' },
                    { value: '"spacing_3"' },
                    { value: '"spacing_4"' },
                    { value: '"spacing_5"' },
                    { value: '"spacing_6"' },
                  ],
                },
              },
              marginY: {
                defaultValue: null,
                description: "",
                name: "marginY",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"none"' },
                    { value: '"auto"' },
                    { value: '"spacing_0.25"' },
                    { value: '"spacing_0.5"' },
                    { value: '"spacing_1"' },
                    { value: '"spacing_1.5"' },
                    { value: '"spacing_2"' },
                    { value: '"spacing_3"' },
                    { value: '"spacing_4"' },
                    { value: '"spacing_5"' },
                    { value: '"spacing_6"' },
                  ],
                },
              },
              placeItems: {
                defaultValue: null,
                description: "",
                name: "placeItems",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"stretch"' },
                    { value: '"center"' },
                    { value: '"end"' },
                    { value: '"start"' },
                  ],
                },
              },
              display: {
                defaultValue: null,
                description: "",
                name: "display",
                required: !1,
                type: {
                  name: 'ConditionalStyle<Values<MapLeafNodes<{ block: string; flex: string; grid: string; inline: string; "inline-block": string; "inline-flex": string; none: string; table: string; "table-cell": string; }, CSSVarFunction>, { ...; }>>',
                },
              },
              flexDirection: {
                defaultValue: null,
                description: "",
                name: "flexDirection",
                required: !1,
                type: {
                  name: 'ConditionalStyle<Values<("column" | "column-reverse" | "row" | "row-reverse")[], { defaultClass: string; conditions: { mobile: string; tablet: string; desktop: string; }; }>>',
                },
              },
              gap: {
                defaultValue: null,
                description: "",
                name: "gap",
                required: !1,
                type: {
                  name: 'ConditionalStyle<Values<MapLeafNodes<{ auto: string; none: string; "spacing_0.25": string; "spacing_0.5": string; spacing_1: string; "spacing_1.5": string; spacing_2: string; spacing_3: string; spacing_4: string; spacing_5: string; spacing_6: string; }, CSSVarFunction>, { ...; }>>',
                },
              },
              gridTemplateColumns: {
                defaultValue: null,
                description: "",
                name: "gridTemplateColumns",
                required: !1,
                type: {
                  name: 'ConditionalStyle<Values<MapLeafNodes<{ "1_2": string; "1_3": string; "1x": string; "2_1": string; "2x": string; "3_1": string; "3x": string; "4x": string; "5_7": string; "5x": string; "6x": string; "7_5": string; "7x": string; }, CSSVarFunction>, { ...; }>>',
                },
              },
              padding: {
                defaultValue: null,
                description: "",
                name: "padding",
                required: !1,
                type: {
                  name: 'ConditionalStyle<Values<MapLeafNodes<{ auto: string; none: string; "spacing_0.25": string; "spacing_0.5": string; spacing_1: string; "spacing_1.5": string; spacing_2: string; spacing_3: string; spacing_4: string; spacing_5: string; spacing_6: string; }, CSSVarFunction>, { ...; }>>',
                },
              },
              paddingBottom: {
                defaultValue: null,
                description: "",
                name: "paddingBottom",
                required: !1,
                type: {
                  name: 'ConditionalStyle<Values<MapLeafNodes<{ auto: string; none: string; "spacing_0.25": string; "spacing_0.5": string; spacing_1: string; "spacing_1.5": string; spacing_2: string; spacing_3: string; spacing_4: string; spacing_5: string; spacing_6: string; }, CSSVarFunction>, { ...; }>>',
                },
              },
              paddingLeft: {
                defaultValue: null,
                description: "",
                name: "paddingLeft",
                required: !1,
                type: {
                  name: 'ConditionalStyle<Values<MapLeafNodes<{ auto: string; none: string; "spacing_0.25": string; "spacing_0.5": string; spacing_1: string; "spacing_1.5": string; spacing_2: string; spacing_3: string; spacing_4: string; spacing_5: string; spacing_6: string; }, CSSVarFunction>, { ...; }>>',
                },
              },
              paddingRight: {
                defaultValue: null,
                description: "",
                name: "paddingRight",
                required: !1,
                type: {
                  name: 'ConditionalStyle<Values<MapLeafNodes<{ auto: string; none: string; "spacing_0.25": string; "spacing_0.5": string; spacing_1: string; "spacing_1.5": string; spacing_2: string; spacing_3: string; spacing_4: string; spacing_5: string; spacing_6: string; }, CSSVarFunction>, { ...; }>>',
                },
              },
              paddingTop: {
                defaultValue: null,
                description: "",
                name: "paddingTop",
                required: !1,
                type: {
                  name: 'ConditionalStyle<Values<MapLeafNodes<{ auto: string; none: string; "spacing_0.25": string; "spacing_0.5": string; spacing_1: string; "spacing_1.5": string; spacing_2: string; spacing_3: string; spacing_4: string; spacing_5: string; spacing_6: string; }, CSSVarFunction>, { ...; }>>',
                },
              },
              position: {
                defaultValue: null,
                description: "",
                name: "position",
                required: !1,
                type: {
                  name: 'ConditionalStyle<Values<("absolute" | "relative" | "sticky")[], { defaultClass: string; conditions: { mobile: string; tablet: string; desktop: string; }; }>>',
                },
              },
              width: {
                defaultValue: null,
                description: "",
                name: "width",
                required: !1,
                type: {
                  name: 'ConditionalStyle<Values<{ auto: CSSVarFunction; none: CSSVarFunction; "spacing_0.25": CSSVarFunction; "spacing_0.5": CSSVarFunction; spacing_1: CSSVarFunction; ... 23 more ...; "min-content": CSSVarFunction; }, { ...; }>>',
                },
              },
              paddingX: {
                defaultValue: null,
                description: "",
                name: "paddingX",
                required: !1,
                type: {
                  name: 'ConditionalStyle<Values<MapLeafNodes<{ auto: string; none: string; "spacing_0.25": string; "spacing_0.5": string; spacing_1: string; "spacing_1.5": string; spacing_2: string; spacing_3: string; spacing_4: string; spacing_5: string; spacing_6: string; }, CSSVarFunction>, { ...; }>>',
                },
              },
              paddingY: {
                defaultValue: null,
                description: "",
                name: "paddingY",
                required: !1,
                type: {
                  name: 'ConditionalStyle<Values<MapLeafNodes<{ auto: string; none: string; "spacing_0.25": string; "spacing_0.5": string; spacing_1: string; "spacing_1.5": string; spacing_2: string; spacing_3: string; spacing_4: string; spacing_5: string; spacing_6: string; }, CSSVarFunction>, { ...; }>>',
                },
              },
              labelProps: {
                defaultValue: null,
                description: "",
                name: "labelProps",
                required: !1,
                type: { name: "LabelProps" },
              },
              wrapperProps: {
                defaultValue: null,
                description: "",
                name: "wrapperProps",
                required: !1,
                type: { name: "BoxProps" },
              },
              label: {
                defaultValue: null,
                description: "",
                name: "label",
                required: !1,
                type: { name: "string" },
              },
              errorMessage: {
                defaultValue: null,
                description: "Message to render when erroring.",
                name: "errorMessage",
                required: !1,
                type: { name: "string" },
              },
              invalid: {
                defaultValue: null,
                description: "",
                name: "invalid",
                required: !1,
                type: { name: "boolean" },
              },
              labelTooltip: {
                defaultValue: null,
                description: "Optional tooltip for label",
                name: "labelTooltip",
                required: !1,
                type: { name: "string" },
              },
              size: {
                defaultValue: null,
                description: "",
                name: "size",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"lg"' },
                    { value: '"md"' },
                    { value: '"sm"' },
                  ],
                },
              },
              slotLeft: {
                defaultValue: null,
                description: "React node shown on the left side of text area.",
                name: "slotLeft",
                required: !1,
                type: { name: "ReactNode" },
              },
              slotRight: {
                defaultValue: null,
                description: "React node shown on the right side of text area.",
                name: "slotRight",
                required: !1,
                type: { name: "ReactNode" },
              },
              validateFunction: {
                defaultValue: null,
                description:
                  "Callback for validation, else simply validates is non-empty.",
                name: "validateFunction",
                required: !1,
                type: { name: "(value: string) => boolean" },
              },
            },
          }),
          "undefined" != typeof STORYBOOK_REACT_CLASSES &&
            (STORYBOOK_REACT_CLASSES[
              "src/components/form/sub_components/form_textarea.comp.tsx#FormTextArea"
            ] = {
              docgenInfo: FormTextArea.__docgenInfo,
              name: "FormTextArea",
              path: "src/components/form/sub_components/form_textarea.comp.tsx#FormTextArea",
            });
      } catch (__react_docgen_typescript_loader_error) {}
      const mockFormSchema = lib.Ry({
          amount: lib.Rx().min(1),
          description: lib.Z_().min(1),
          email: lib.Z_().email().min(2),
          radio: lib.Z_().min(1),
          select: lib.Z_().min(1),
        }),
        WRAPPER_PROPS = { marginBottom: "spacing_3" },
        mockForm = ({
          handleErrors = async () => {},
          handleFormSubmission = async () => {},
          withDefaultValues = !1,
        }) => ({
          children: (0, jsx_runtime.jsxs)(jsx_runtime.Fragment, {
            children: [
              (0, jsx_runtime.jsx)(FormInput, {
                defaultValue: withDefaultValues ? LOREM_mock.m.email() : void 0,
                errorMessage: "Enter a valid email address",
                id: "email",
                label: LOREM_mock.m.labelEmail(),
                name: "email",
                placeholder: "Enter your email address",
                wrapperProps: WRAPPER_PROPS,
              }),
              (0, jsx_runtime.jsx)(FormTextArea, {
                defaultValue: withDefaultValues
                  ? LOREM_mock.m.text_xxs
                  : void 0,
                errorMessage: "Enter a valid description",
                id: "description",
                label: LOREM_mock.m.labelDescription(),
                name: "description",
                placeholder: "Enter your description",
                wrapperProps: WRAPPER_PROPS,
              }),
              (0, jsx_runtime.jsx)(FormSelectSingle, {
                errorMessage: "Select an option",
                id: "select",
                items: (0, select_mock.S)({}),
                label: LOREM_mock.m.labelDropdown(),
                name: "select",
                placeholder: "Select an option from the dropdown",
                wrapperProps: WRAPPER_PROPS,
                initialSelectedItem: withDefaultValues
                  ? (0, select_mock.S)({})[0]
                  : null,
              }),
              (0, jsx_runtime.jsx)(FormSlider, {
                defaultValue: withDefaultValues ? [50] : void 0,
                errorMessage: "Pick a value from the range",
                id: "amount",
                label: LOREM_mock.m.labelSlider(),
                name: "amount",
                placeholder: "Enter an amount",
                wrapperProps: WRAPPER_PROPS,
              }),
              (0, jsx_runtime.jsx)(FormRadioButtonCards, {
                errorMessage: "Select an option",
                id: "radio",
                items: radio_button_cards_mock.y,
                label: LOREM_mock.m.labelRadioButtons(),
                name: "radio",
                wrapperProps: WRAPPER_PROPS,
                defaultValue: withDefaultValues
                  ? radio_button_cards_mock.y[0].value
                  : void 0,
              }),
              (0, jsx_runtime.jsx)(FormSubmitButton, {
                width: "100%",
                children: "Submit",
              }),
            ],
          }),
          handleErrors,
          handleFormSubmission,
          name: LOREM_mock.m.name(),
          resolver: (0, zod.F)(mockFormSchema),
        });
      try {
        (mockForm.displayName = "mockForm"),
          (mockForm.__docgenInfo = {
            description: "",
            displayName: "mockForm",
            props: {
              handleFormSubmission: {
                defaultValue: { value: "async () => {}" },
                description: "",
                name: "handleFormSubmission",
                required: !1,
                type: {
                  name: "((fieldValues: FieldValues) => Promise<void>) | ((fieldValues: FieldValues) => void)",
                },
              },
              handleErrors: {
                defaultValue: { value: "async () => {}" },
                description: "",
                name: "handleErrors",
                required: !1,
                type: {
                  name: "((errors: FieldErrors) => Promise<void>) | ((errors: FieldErrors) => void)",
                },
              },
              withDefaultValues: {
                defaultValue: { value: "false" },
                description: "",
                name: "withDefaultValues",
                required: !1,
                type: { name: "boolean" },
              },
            },
          }),
          "undefined" != typeof STORYBOOK_REACT_CLASSES &&
            (STORYBOOK_REACT_CLASSES[
              "src/components/form/__mocks__/mock_form.mock.tsx#mockForm"
            ] = {
              docgenInfo: mockForm.__docgenInfo,
              name: "mockForm",
              path: "src/components/form/__mocks__/mock_form.mock.tsx#mockForm",
            });
      } catch (__react_docgen_typescript_loader_error) {}
      const handleFormSubmissionMock = esm.e.fn(),
        handleErrorsMock = esm.e.fn();
      handleFormSubmissionMock.mockImplementation(async (fieldValues) =>
        alert(JSON.stringify(fieldValues))
      ),
        handleErrorsMock.mockImplementation(async (errors) =>
          alert(JSON.stringify(errors))
        );
      const form_stories = {
          args: mockForm({
            handleErrors: handleErrorsMock,
            handleFormSubmission: handleFormSubmissionMock,
          }),
          component: Form,
          title: "React components/Form",
        },
        Default = {
          name: "default",
          play: async ({ canvasElement }) => {
            const { getByLabelText, getByRole } = (0, dist_esm.uh)(
                canvasElement
              ),
              emailInput = getByLabelText(LOREM_mock.m.labelEmail()),
              descriptionTextArea = getByLabelText(
                LOREM_mock.m.labelDescription()
              ),
              sliderThumb = getByRole("slider"),
              firstRadioItem = getByRole("radio", {
                name: `${radio_button_cards_mock.y[0].title} ${radio_button_cards_mock.y[0].body}`,
              });
            await (0, test_utils.act)(async () => {
              await dist_esm.mV.type(emailInput, LOREM_mock.m.email()),
                await dist_esm.mV.type(
                  descriptionTextArea,
                  LOREM_mock.m.text_xxs
                );
            }),
              (0, esm.l)(emailInput).toHaveValue(LOREM_mock.m.email()),
              (0, esm.l)(descriptionTextArea).toHaveValue(
                LOREM_mock.m.text_xxs
              ),
              await (async ({
                expected_value,
                getByRole,
                item_label,
                select_label,
              }) => {
                const select = getByRole("combobox", { name: select_label }),
                  { getByRole: getByRoleScoped } = (0, dist_esm.uh)(
                    select.parentNode.parentNode.parentNode.parentNode
                  );
                await dist_esm.mV.click(select);
                const item = getByRoleScoped("option", { name: item_label });
                await dist_esm.mV.click(item),
                  await (0, dist_esm.X_)(() => {
                    (0, esm.l)(select).toHaveValue(expected_value);
                  });
              })({
                expected_value: (0, select_mock.S)({})[0].label,
                getByRole,
                item_label: (0, select_mock.S)({})[0].label,
                select_label: LOREM_mock.m.labelDropdown(),
              }),
              await (0, test_utils.act)(async () => {
                await dist_esm.mV.click(sliderThumb),
                  await dist_esm.mV.keyboard("{arrowright}");
              }),
              await dist_esm.mV.click(firstRadioItem),
              await (0, test_utils.act)(async () => {
                dist_esm.BX.submit(getByRole("form"));
              }),
              await (0, dist_esm.X_)(() => {
                (0, esm.l)(handleErrorsMock).not.toHaveBeenCalled(),
                  (0, esm.l)(handleFormSubmissionMock).toHaveBeenCalledWith(
                    esm.l.objectContaining({
                      amount: 1,
                      description: LOREM_mock.m.text_xxs,
                      email: LOREM_mock.m.email(),
                      radio: radio_button_cards_mock.y[0].value,
                      select: (0, select_mock.S)({})[0].value,
                    }),
                    esm.l.objectContaining({ type: "submit" })
                  );
              });
          },
        },
        WithDefaultValues = {
          args: mockForm({
            handleErrors: handleErrorsMock,
            handleFormSubmission: handleFormSubmissionMock,
            withDefaultValues: !0,
          }),
        };
      (Default.parameters = {
        ...Default.parameters,
        docs: {
          ...Default.parameters?.docs,
          source: {
            originalSource:
              '{\n  name: "default",\n  play: async ({\n    canvasElement\n  }) => {\n    const {\n      getByLabelText,\n      getByRole\n    } = within(canvasElement);\n    const emailInput = getByLabelText(LOREM.labelEmail());\n    const descriptionTextArea = getByLabelText(LOREM.labelDescription());\n    const sliderThumb = getByRole("slider");\n    const firstRadioItem = getByRole("radio", {\n      name: `${RADIO_BUTTON_CARDS_MOCK[0].title} ${RADIO_BUTTON_CARDS_MOCK[0].body}`\n    });\n\n    /** --------------------------------------------- */\n\n    await act(async () => {\n      await userEvent.type(emailInput, LOREM.email());\n      await userEvent.type(descriptionTextArea, LOREM.text_xxs);\n    });\n    expect(emailInput).toHaveValue(LOREM.email());\n    expect(descriptionTextArea).toHaveValue(LOREM.text_xxs);\n    await selectFromSingleSelect({\n      expected_value: mockSelectItems({})[0].label,\n      getByRole,\n      item_label: mockSelectItems({})[0].label,\n      select_label: LOREM.labelDropdown()\n    });\n    await act(async () => {\n      await userEvent.click(sliderThumb);\n      await userEvent.keyboard("{arrowright}");\n    });\n    await userEvent.click(firstRadioItem);\n\n    /** --------------------------------------------- */\n\n    await act(async () => {\n      fireEvent.submit(getByRole("form"));\n    });\n\n    /** --------------------------------------------- */\n\n    await waitFor(() => {\n      expect(handleErrorsMock).not.toHaveBeenCalled();\n      expect(handleFormSubmissionMock).toHaveBeenCalledWith(expect.objectContaining({\n        amount: 1,\n        description: LOREM.text_xxs,\n        email: LOREM.email(),\n        radio: RADIO_BUTTON_CARDS_MOCK[0].value,\n        select: mockSelectItems({})[0].value\n      }), expect.objectContaining({\n        type: "submit"\n      }));\n    });\n  }\n}',
            ...Default.parameters?.docs?.source,
          },
          description: {
            story:
              "-----------------------------------------------------------------------------",
            ...Default.parameters?.docs?.description,
          },
        },
      }),
        (WithDefaultValues.parameters = {
          ...WithDefaultValues.parameters,
          docs: {
            ...WithDefaultValues.parameters?.docs,
            source: {
              originalSource:
                "{\n  args: mockForm({\n    handleErrors: handleErrorsMock,\n    handleFormSubmission: handleFormSubmissionMock,\n    withDefaultValues: true\n  })\n}",
              ...WithDefaultValues.parameters?.docs?.source,
            },
          },
        });
      const __namedExportsOrder = ["Default", "WithDefaultValues"];
      try {
        (Default.displayName = "Default"),
          (Default.__docgenInfo = {
            description:
              "-----------------------------------------------------------------------------",
            displayName: "Default",
            props: {},
          }),
          "undefined" != typeof STORYBOOK_REACT_CLASSES &&
            (STORYBOOK_REACT_CLASSES[
              "src/components/form/__storybook__/form.stories.tsx#Default"
            ] = {
              docgenInfo: Default.__docgenInfo,
              name: "Default",
              path: "src/components/form/__storybook__/form.stories.tsx#Default",
            });
      } catch (__react_docgen_typescript_loader_error) {}
    },
    "./src/components/select/select_single/select_single.comp.tsx": (
      __unused_webpack_module,
      __webpack_exports__,
      __webpack_require__
    ) => {
      "use strict";
      __webpack_require__.d(__webpack_exports__, { N: () => SelectSingle });
      var downshift__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
          "./node_modules/downshift/dist/downshift.esm.js"
        ),
        react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
          "./node_modules/react/index.js"
        ),
        _box__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
          "./src/components/box/box.comp.tsx"
        ),
        _input__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
          "./src/components/input/input.comp.tsx"
        ),
        _input_clear_button_input_clear_button_comp__WEBPACK_IMPORTED_MODULE_6__ =
          __webpack_require__(
            "./src/components/input_clear_button/input_clear_button.comp.tsx"
          ),
        _select_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
          "./src/components/select/select_utils.ts"
        ),
        _shared_DEFAULT_SLOT_RIGHT__WEBPACK_IMPORTED_MODULE_3__ =
          __webpack_require__(
            "./src/components/select/shared/DEFAULT_SLOT_RIGHT.tsx"
          ),
        _shared_dropdown_menu_dropdown_menu_comp__WEBPACK_IMPORTED_MODULE_8__ =
          __webpack_require__(
            "./src/components/select/shared/dropdown_menu/dropdown_menu.comp.tsx"
          ),
        _shared_select_input_styles_css__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            "./src/components/select/shared/select_input.styles.css.ts"
          ),
        react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
          "./node_modules/react/jsx-runtime.js"
        );
      const defaultItemToString = (item) => item?.label || "",
        SelectSingle = (0, react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(
          (
            {
              disabled,
              errorMessage,
              id,
              initialHighlightedItem,
              initialSelectedItem,
              inputProps,
              invalid,
              isFilterable,
              isOpen: controlledIsOpen,
              itemToString = defaultItemToString,
              items,
              label,
              labelTooltip,
              name,
              onChange,
              onIsOpenChange,
              placeholder,
              size,
              slotLeft,
              slotRight = _shared_DEFAULT_SLOT_RIGHT__WEBPACK_IMPORTED_MODULE_3__.m,
              wrapperProps,
              ...rest
            },
            ref
          ) => {
            const localInitialSelectedItem = (0,
              react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(
                () =>
                  initialSelectedItem ||
                  items.find((item) => item.isSelected) ||
                  null,
                [initialSelectedItem, items]
              ),
              [selectedItem, setSelectedItem] = (0,
              react__WEBPACK_IMPORTED_MODULE_0__.useState)(
                localInitialSelectedItem
              ),
              [inputValue, setInputValue] = (0,
              react__WEBPACK_IMPORTED_MODULE_0__.useState)(
                localInitialSelectedItem?.label || ""
              ),
              [localSlotLeft, setLocalSlotLeft] = (0,
              react__WEBPACK_IMPORTED_MODULE_0__.useState)(slotLeft),
              filteredItems = (0, react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(
                () =>
                  items && isFilterable
                    ? (0, _select_utils__WEBPACK_IMPORTED_MODULE_4__.DW)({
                        inputValue,
                        items,
                      })
                    : items,
                [items, isFilterable, inputValue]
              ),
              {
                getInputProps,
                getItemProps,
                getLabelProps,
                getMenuProps,
                highlightedIndex,
                isOpen,
                reset,
                toggleMenu,
              } = (0, downshift__WEBPACK_IMPORTED_MODULE_5__.Kb)({
                defaultHighlightedIndex: (0,
                _select_utils__WEBPACK_IMPORTED_MODULE_4__.Nj)({
                  initialHighlightedItem,
                  items,
                  selectedItem,
                }),
                initialSelectedItem,
                isOpen: controlledIsOpen,
                items: filteredItems,
                itemToString,
                onIsOpenChange,
                onSelectedItemChange: onChange,
                onStateChange({
                  inputValue: newInputValue,
                  selectedItem: newSelectedItem,
                  type,
                }) {
                  switch (type) {
                    case downshift__WEBPACK_IMPORTED_MODULE_5__.Kb
                      .stateChangeTypes.InputKeyDownEnter:
                    case downshift__WEBPACK_IMPORTED_MODULE_5__.Kb
                      .stateChangeTypes.ItemClick:
                    case downshift__WEBPACK_IMPORTED_MODULE_5__.Kb
                      .stateChangeTypes.InputBlur:
                      newSelectedItem &&
                        (newSelectedItem.onClick && newSelectedItem.onClick(),
                        setSelectedItem(newSelectedItem),
                        setInputValue(newSelectedItem.label),
                        newSelectedItem.slotLeft &&
                          setLocalSlotLeft(newSelectedItem.slotLeft));
                      break;
                    case downshift__WEBPACK_IMPORTED_MODULE_5__.Kb
                      .stateChangeTypes.InputChange:
                      void 0 !== newInputValue && setInputValue(newInputValue);
                  }
                },
                selectedItem,
                stateReducer: (state, actionAndChanges) =>
                  (0, _select_utils__WEBPACK_IMPORTED_MODULE_4__.j3)(
                    state,
                    actionAndChanges,
                    {}
                  ),
              }),
              getIsItemSelected = (0,
              react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(
                (item) =>
                  (0, _select_utils__WEBPACK_IMPORTED_MODULE_4__.x7)({
                    item,
                    selectedItem,
                  }),
                [selectedItem]
              ),
              SlotRight = (0, react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(
                () =>
                  isFilterable && inputValue.length > 0
                    ? (0, react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(
                        _input_clear_button_input_clear_button_comp__WEBPACK_IMPORTED_MODULE_6__.k,
                        {
                          onClick: () => {
                            setInputValue(""),
                              setSelectedItem(null),
                              setLocalSlotLeft(null),
                              reset();
                          },
                        }
                      )
                    : slotRight,
                [inputValue.length, isFilterable, reset, slotRight]
              );
            return (0, react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(
              _box__WEBPACK_IMPORTED_MODULE_7__.x,
              {
                ...wrapperProps,
                children: (0,
                react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(
                  _shared_dropdown_menu_dropdown_menu_comp__WEBPACK_IMPORTED_MODULE_8__.h,
                  {
                    getIsItemSelected,
                    getItemProps,
                    getMenuProps,
                    highlightedIndex,
                    isOpen,
                    items: filteredItems,
                    size,
                    width: "100%",
                    triggerNode: (0,
                    react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(
                      _input__WEBPACK_IMPORTED_MODULE_9__.I,
                      {
                        ...inputProps,
                        className:
                          _shared_select_input_styles_css__WEBPACK_IMPORTED_MODULE_1__.C,
                        errorMessage,
                        invalid,
                        label,
                        labelTooltip,
                        readOnly: !isFilterable,
                        size,
                        slotLeft: localSlotLeft,
                        slotRight: SlotRight,
                        labelProps: getLabelProps({ htmlFor: id }),
                        ...getInputProps?.({
                          disabled,
                          id,
                          name,
                          onClick: toggleMenu,
                          placeholder,
                          ref,
                          value: inputValue,
                          ...rest,
                        }),
                      }
                    ),
                  }
                ),
              }
            );
          }
        );
      try {
        (SelectSingle.displayName = "SelectSingle"),
          (SelectSingle.__docgenInfo = {
            description: "",
            displayName: "SelectSingle",
            props: {
              id: {
                defaultValue: null,
                description: "",
                name: "id",
                required: !1,
                type: { name: "string" },
              },
              label: {
                defaultValue: null,
                description: "",
                name: "label",
                required: !1,
                type: { name: "string" },
              },
              disabled: {
                defaultValue: null,
                description: "",
                name: "disabled",
                required: !1,
                type: { name: "boolean" },
              },
              errorMessage: {
                defaultValue: null,
                description: "",
                name: "errorMessage",
                required: !1,
                type: { name: "string" },
              },
              initialHighlightedItem: {
                defaultValue: null,
                description: "",
                name: "initialHighlightedItem",
                required: !1,
                type: { name: "SelectItemShape" },
              },
              inputProps: {
                defaultValue: null,
                description: "",
                name: "inputProps",
                required: !1,
                type: { name: "Partial<InputProps>" },
              },
              invalid: {
                defaultValue: null,
                description: "",
                name: "invalid",
                required: !1,
                type: { name: "boolean" },
              },
              isClearable: {
                defaultValue: null,
                description: "",
                name: "isClearable",
                required: !1,
                type: { name: "boolean" },
              },
              isFilterable: {
                defaultValue: null,
                description: "",
                name: "isFilterable",
                required: !1,
                type: { name: "boolean" },
              },
              isOpen: {
                defaultValue: null,
                description: "",
                name: "isOpen",
                required: !1,
                type: { name: "boolean" },
              },
              items: {
                defaultValue: null,
                description: "",
                name: "items",
                required: !0,
                type: { name: "SelectItemShape[]" },
              },
              name: {
                defaultValue: null,
                description: "",
                name: "name",
                required: !0,
                type: { name: "string" },
              },
              onIsOpenChange: {
                defaultValue: null,
                description: "",
                name: "onIsOpenChange",
                required: !1,
                type: {
                  name: "(changes: UseComboboxStateChange<SelectItemShape>) => void",
                },
              },
              size: {
                defaultValue: null,
                description: "",
                name: "size",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"lg"' },
                    { value: '"md"' },
                    { value: '"sm"' },
                  ],
                },
              },
              slotLeft: {
                defaultValue: null,
                description: "",
                name: "slotLeft",
                required: !1,
                type: { name: "ReactNode" },
              },
              slotRight: {
                defaultValue: { value: "<Icon icon={faAngleDown} />" },
                description: "",
                name: "slotRight",
                required: !1,
                type: { name: "ReactNode" },
              },
              labelProps: {
                defaultValue: null,
                description: "",
                name: "labelProps",
                required: !1,
                type: { name: "LabelProps" },
              },
              wrapperProps: {
                defaultValue: null,
                description: "",
                name: "wrapperProps",
                required: !1,
                type: { name: "BoxProps" },
              },
              initialSelectedItem: {
                defaultValue: null,
                description: "",
                name: "initialSelectedItem",
                required: !1,
                type: { name: "SelectItemShape" },
              },
              itemToString: {
                defaultValue: {
                  value:
                    '(item: SelectItemShape | null) => {\n  return item?.label || "";\n}',
                },
                description: "",
                name: "itemToString",
                required: !1,
                type: { name: "(item: SelectItemShape) => string" },
              },
              labelTooltip: {
                defaultValue: null,
                description: "Optional tooltip for label",
                name: "labelTooltip",
                required: !1,
                type: { name: "string" },
              },
              onChange: {
                defaultValue: null,
                description: "",
                name: "onChange",
                required: !1,
                type: {
                  name: "(changes: UseComboboxStateChange<SelectItemShape>) => void",
                },
              },
              placeholder: {
                defaultValue: null,
                description: "",
                name: "placeholder",
                required: !0,
                type: { name: "string" },
              },
              ref: {
                defaultValue: null,
                description:
                  "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
                name: "ref",
                required: !1,
                type: { name: "Ref<HTMLInputElement>" },
              },
              key: {
                defaultValue: null,
                description: "",
                name: "key",
                required: !1,
                type: { name: "Key" },
              },
            },
          }),
          "undefined" != typeof STORYBOOK_REACT_CLASSES &&
            (STORYBOOK_REACT_CLASSES[
              "src/components/select/select_single/select_single.comp.tsx#SelectSingle"
            ] = {
              docgenInfo: SelectSingle.__docgenInfo,
              name: "SelectSingle",
              path: "src/components/select/select_single/select_single.comp.tsx#SelectSingle",
            });
      } catch (__react_docgen_typescript_loader_error) {}
    },
    "./src/components/slider/slider.comp.tsx": (
      __unused_webpack_module,
      __webpack_exports__,
      __webpack_require__
    ) => {
      "use strict";
      __webpack_require__.d(__webpack_exports__, { i: () => Slider });
      var dessert_box_core_esm = __webpack_require__(
          "./node_modules/@dessert-box/core/dist/dessert-box-core.esm.js"
        ),
        index_module = __webpack_require__(
          "./node_modules/@radix-ui/react-slider/dist/index.module.js"
        ),
        clsx_m = __webpack_require__("./node_modules/clsx/dist/clsx.m.js"),
        react = __webpack_require__("./node_modules/react/index.js"),
        color_palette_css = __webpack_require__(
          "./src/styles/color_palette.css.ts"
        ),
        get_sprinkles_css = __webpack_require__(
          "./src/styles/utils/get_sprinkles.css.ts"
        ),
        box_comp = __webpack_require__("./src/components/box/box.comp.tsx"),
        input_error_message_comp = __webpack_require__(
          "./src/components/input_error_message/input_error_message.comp.tsx"
        ),
        label_comp = __webpack_require__(
          "./src/components/label/label.comp.tsx"
        ),
        slot_wrapper_comp = __webpack_require__(
          "./src/components/slot_wrapper/slot_wrapper.comp.tsx"
        ),
        injectStylesIntoStyleTag =
          (__webpack_require__(
            'src/styles/layers.css.ts.vanilla.css!=!./node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{"fileName":"src/styles/layers.css.ts.vanilla.css","source":"QGxheWVyIHJlc2V0OwpAbGF5ZXIgYmFzZTsKQGxheWVyIGJhc2VPdmVycmlkZXM7CkBsYXllciB0aGVtZTsKQGxheWVyIHZhcnM7CkBsYXllciBzcHJpbmtsZXM7"}!./node_modules/@vanilla-extract/webpack-plugin/extracted.js'
          ),
          __webpack_require__(
            'src/styles/color_palette.css.ts.vanilla.css!=!./node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{"fileName":"src/styles/color_palette.css.ts.vanilla.css","source":"#H4sIAAAAAAAAA62WTW7bMBCF9z4FNwVSwBFIkcMfZ5ObFLbs1E1TuHCzSFH47h0ORUWRxhYjeyPBwGcO3/DpcR5f1n93R/G63/3aPSxWx8PhdSlWq826+bk9Hn6Lfwsh7u+/KX2EN/ckV2L/52V9V0u7FMFV8stSmMrjU1YQ9NeHD7QiOsFaEhw80gOs7mG1SRg+B5TOFCyFkpVDyvkxZjLmEFOVQsxDFYYYtFiNNQGSDhivZnuYSwqQhiHmMmawmqOioR6v5vurQWWiBDNeLeQmq9jkpAEVB+qyDGGAr4vat+lRNunV49JNpjx1LzaZNjDAthkLiOlKRwzwNcB258//tHjsGY9cVuW/PdHPz9qOMZ4O3amFriWlzmO8p4HMVCcXqDHXmk/jct7SuVnHca37tIwHG6tqw5W17zISBo7DWveZOmNe5Y+Mcd+kiCL7sQbEhVO3FbvPTZnqpkxO60FjMhaiX0fYBQ8Kcerb7vutbEd4u6eAjb7WdsRhE+IJ2O4zY0MPP1vn8LPGl82hx8WeUnmHmALMDu1ICcgL1qMgCClGg+RM5UulzHbfuyQFF9w3Kb0plfQhBNNp25yo8xy4v5UDVUwg6GoxRvikBRVg14xMqWEuRJ8yUaUnC1p2RcgrakrHWLn2XN9sr3S+ohUHulxa0ZnGS8tbrrQvFTPXhAqAViYXsuG2KVXflIra5iMP1KYoKpjrfPjjpkk4qnVVFHLTX/H8x0UhNxCdi8LEgeU800UhNzqxUTglZf5FPNHMS7Ng8TRYPA/O8+DzzYZACL3b2NxgCAwUbZCm9/O3MYFI1GmEYWaTPAaCp9uQBHkOtD3QJRDYPbo8gEq6tep0Yoz7famYuSbUYLorCKPQnh8HJ9U3paK2PbC7kZnQmXDh6T9aPKtJFA8AAA=="}!./node_modules/@vanilla-extract/webpack-plugin/extracted.js'
          ),
          __webpack_require__(
            'src/styles/vars.css.ts.vanilla.css!=!./node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{"fileName":"src/styles/vars.css.ts.vanilla.css","source":"#H4sIAAAAAAAAA3WVTY/TMBCG7/wKqxLSIiUhtvNpTgsCwYHTas8obd02W+ejTrZ0F/HfGbfdoIynufV5ZyaTpO9rZbtuZH/eMRaGv/i+NIcyixXjMfvI5KcZ5oCB8jkVipWOZnMsoTgDXs5xArg/saEz9ZodK3vnJGnTU76RH+al6e3SBJVmiqXx+znL3QL9aQ4LxQrMSngAd2FeKZZgtlQsdhOYAInZ7bK640kc8KQMeFoGcSTQZivXIKE2o+t5ihrWrsE9d3wplzyQaQA9cRTjx9aKLU232s/pRrGN0WjxrWJbW6/ncKdY3Zq61XNcv+GQmP40if5N9oq1HZ5mFBurpUG0udJwpY2ZS61iYdX3oA0vw6ib4DPcbv+zWj2cf37r2jFYPOhtp9njj0XwXZujHutVFdzbujLBULVDOGhbb4LFvRvDvnSms+xr0z3Vi/+dVzC/dwd/moiL1OpmLvQgePAA3yoqcr/aujE+Hlw9UT4qJojyZ8AePNKjfztM7H2i9n65tffrjQV5TJmJQyDkcYwg5EHhQUgD6cHEuRZDcH3iQfB35kFn8I1lYmORUFwE6QnlWUAQbA4jCAG8bnWvq/FOBE5G5uNgbUk2rqdGSTbqSU9IHQycwuDcG7ydGlOycTfpGamDsWGoG46Ep6kxJxvB2PjtG3dG4MzlzZkedwiDpUWKazsHvdKeiHJ+cNArBZfl3tTBQa8UHFb6A8Bg1fPYIQoOa+o2XEHO6HZE4tlnKYInCr5Q8JWAIr54F1F32iIkfCR9lPgo9VHmo9xHBbVvSb02UXn/EeFOSzJNhTsWqbgS7vgj4k3oG8kkNlTAiS2dkmJHRaqo6fwVYAvp0/05jJoBYXMOLg+DIwSBW/9tdZSjRE9YRxwIkwhLfhbwQxHJ64VbwBaFjG6I4I6SR9nl8tQjua2zR/bWk2EVfCKSqLxeWAXDyGkZgVVwTjJtg1+IBAsl5dvkAqtgpXR6CRyr4Kps2jnBKhgsn3bOsQpea6oTnRUyRUHy9x+gyNKTbAsAAA=="}!./node_modules/@vanilla-extract/webpack-plugin/extracted.js'
          ),
          __webpack_require__(
            'src/styles/common/a11y.css.ts.vanilla.css!=!./node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{"fileName":"src/styles/common/a11y.css.ts.vanilla.css","source":"QGxheWVyIHRoZW1lOwpAbGF5ZXIgdGhlbWUgewogIC5yOGhlNXQwIHsKICAgIGJvcmRlci1jb2xvcjogdmFyKC0tXzEzcjV4N2Y2KTsKICB9CiAgLnI4aGU1dDA6aXMoLnI4aGU1dDA6Zm9jdXMsIC5yOGhlNXQwOmZvY3VzLXZpc2libGUpLCAucjhoZTV0MDpmb2N1cy13aXRoaW4gewogICAgYm9yZGVyLWNvbG9yOiB2YXIoLS1fMTNyNXg3ZjYpIDsKICAgIG91dGxpbmU6IDFweCBzb2xpZCB2YXIoLS1fMTNyNXg3ZjgpIDsKICB9CiAgLnI4aGU1dDFbZGlzYWJsZWRdLCAucjhoZTV0MVthcmlhLWRpc2FibGVkPSd0cnVlJ10gewogICAgb3BhY2l0eTogMC4zOwogIH0KICAucjhoZTV0MVtkaXNhYmxlZF06aG92ZXIsIC5yOGhlNXQxW2FyaWEtZGlzYWJsZWQ9J3RydWUnXTpob3ZlciB7CiAgICBjdXJzb3I6IG5vdC1hbGxvd2VkOwogIH0KICAucjhoZTV0Mjpmb2N1czpub3QoOmZvY3VzLXZpc2libGUpIHsKICAgIG91dGxpbmU6IG5vbmU7CiAgfQogIC5yOGhlNXQyOm5vdCg6aXMoW2Rpc2FibGVkXSwgW3JlYWRvbmx5XSkpOmZvY3VzLXZpc2libGUgewogICAgYm9yZGVyLWNvbG9yOiB2YXIoLS1fMTNyNXg3ZjYpIDsKICAgIG91dGxpbmU6IDFweCBzb2xpZCB2YXIoLS1fMTNyNXg3ZjgpIDsKICB9Cn0="}!./node_modules/@vanilla-extract/webpack-plugin/extracted.js'
          ),
          __webpack_require__(
            'src/styles/utils/get_sprinkles.css.ts.vanilla.css!=!./node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{"fileName":"src/styles/utils/get_sprinkles.css.ts.vanilla.css","source":"#H4sIAAAAAAAAA52cS3OrSBKF9/dXaDMRPQtNCBAP3d50xPyQCR4FlCWBDOg50f99ZPviq6wDmclsOrqjzydZrlOZpTpp/jqkd9Ot+lNnm/3B9H/++Jex9i3OksPqvz9Wq8L2p6fk5+qSdn+s1//x9rvD+y4y//zzx9/f0paTlkTacdKKSM+ctCbSGye1r9LdhpO+EWnASfdEGnHSA5HuOOmRSPNPaXkwt3VhO5MPtm1+rrr2+ioqJ0V5ezgfm1ednXuxdWcupuvNq/jAvOiU/ssBVXpyP5C/I5+om9WlRHee1WVEd5vV5a+6dDOrK4gumNURx6fRrI7YPd3N6ojX03xWR4yelrM64vLUzuqIxdOvda46W6wHc3w6cjDrr1XuXdKLCdkuIBNCdgtI4p70vIAkfkpvC0jisGyzgCSey4IFJHFhFi0giS+z3QKSODXLF5DEu1m5gCRuzuwCkvg7W+Jb4vjsy7entChsU/HVKutYLXFYdma11FM3VktclG9YLfFNHrBa4pQ8YrXEG/mO1RI35DmrJeufl6yWrHhuWS1Z4/zwql1n7TC0R36p81aDkBXPOw1CFj4/axC6/jcNQmxQbDQIcUMRaBBiiiLSIMQbxU6DEIsUuQYhTilKDUIMUxBzrQ+mHHi7FAcZIGYpWhkgVik6GSBGKc4yQG1ykwFiErORAWIRE8gAMYiJZIDYw+xkgJjD5DJArGGomzpb1YI3jFUQxBzmoCCIO0yrIIg9TKcgiD/MWUFQg9wUBHFIuVEQxCJloCCIR8pIQRCTlDsFQVxSUlsNrfA9qCxFPXFIaUU98Ud5EPXEHWUr6ok3yk7UE2eUZ1FPfXET9cQV1UbUE09UgagnjqgiUU/8UP1yUNvbX1+zzfOIai+v35mr3NGkWf88wQ5EUzqafrD5/v6q+HLG1RZDDT9TQ36mA6NsibJllCei7BjlO1GeGSXZG9WNUfavynrDKAeiDBjlmSgjRnkhyh2jvBJlzihvRFkyyjtRcuv+IEpm3YMNUTLrHnhEyax74BMls+5BQJTMugfbV6Vl1j0IiZJbd1JhLbfupLZabt1JVbXcupN6arl1J5XUcutOaqjl9jupnpbb76RuWm6/k4ppuf3+VSv/cq6eP4Ff+NcKr1bpwVbN2j6/4/cfxa8zQ17/+fw/f/+WetPStBscoT8lzE0zmM5RBlNK0xSObDsly9LeHGxjHG04avuTyYd19+wGrft7+diMBIoUkOdCsQLyXShRQIEL7X5BWZrvq649N8VvJOjCW1zCJ0pFBD5PJiLwaXIRgc9SiMjWRYyIhC5SikjkIpWIxC5Si0jiIlZEdi7yJiKpi+xFJHORg4jkLnIUkcJFGhExLtJOILapTWfdunOaUA5d2vSntHtWH0f9PqrbrjDdz5V3uq2e50JbSA7ulCD4uCfgzIUJUIOGgg1wptTU9294p4vMwPtcKdOlhT3DzTDstZuGgu1211Cw4x4aCjadt9FgsPE8z8GmvtLCL97zFRT86r2AUhNflvCdtiKD7xN+M1/W27iC6FtwW/d1WrRX90Wh3HixyEC98RKRgYLjjb0zbw9tJ7ZNL+Xk0DK9jJNDu/RyTg6Fxis4Oa6t4eS4rCUnhy3rVZwc9qpXc3LYpJ7l5Lg73zg57so9J0dvHjg52vLIydGRDSeH9ue1VJ6fu49m9u+P/3KlJyqd7pLe2Pg+hg6em3nlrdLz0Lqqjqi8GVUPqs0/XM0AGm+DqvOLav3s3teJOnNBjedqrq+avv74yjPxSrcpFbzW/VV17T5C/o9/urIHypp2QuiPPaVsm2Hd24dxy1frrr7vScgJEF9C3gEJJKQDZCshPSChhAyARBJyBiSWkAsgiYRcAdlJyA2QVELugGQS8gAklxAPmp5fvDJXM3X68KD3+UZBQQv0SwUFndCvFBQ0RL9WUNAXfaugoD36Y0eqp4E9AHseOABw4IEjAEceaABoeACrU8sDWJtOPICV6Z0HsC51PIBVqecBrEkDC/hwWPHP/DtgPbrw7wDnG//KA3DC8W88AGcc/84DcMrxHzwA55xgwwMlAB4PVAD4PFADEPCABWDLA28AjC3RNr0Z8JwSjP3P9u1HrvWRTH39q3vtGYxt7+3cD7a8r/Nn9XqeE+cuc4NkXo83usFuTj19rZvOyfFuN8hmf5BTmpt1+nmR40I5D2VmuBrTuNTY575uNuCXPTa0j1vl9cxmhZNAUCooOAwElYKC80BQKyg4EgRWpnw4FARvCgoOBcFeQcGhIDgoKDgUBEcFBYeCoFFQcCgIWgUFh4LgpKDgq3PwrqDgG3QwNr5j2lW2kdtS0PMAdJlg4AHoMsGZB6DLBBcegC4TXHkAu8yNB7DL3HkAu8yDB6DLbDc8AF1m6/EAdJmtTwBuTpNygYoDo2y3Kg78sg1VHNhmG6k4cM82VnFgom2i4sBL252KA0ttUxWHzspUHBosV3Hos4Jys+OdlDIKCj1WKih0WKWg0F+1gkJ3WQWF3npTUOisvYJCXx0UFLrqqKDQU42CQke1lJqfCqXYSYOhp941GJqq02Doql6Doa0GDYa+OmswNNZFg6GzrhoMrXXTYOituwZDc9FOPTtMSqBwI0NgrNCTIbBV6MsQmCoMZAgsFW5lCAwVhjIEdgojGQIzhbEMgZXCRIbASOFOhsBG4e/ufJv7Tga3f2EmQ3ADGOYyBLeAYSFDcBMYGhmC28CwlCG4EQwrGYJbwbCWIbgZDK0Mwe1g+CZDcEMY7kVoorAc5HeCm8LwKL8TVqNGhrAatTKE1egkQ1iN3mUIq1EnQ1iNehnCajTIEFajswxhNbrIEFaj6ws0P6xOmZvI4Ga/iwzu9YfIwFaPNiIDWynyRAY2euSLDOzzKBAZiCejrcjALo9CkYFrySgSGbiUjGKRgSvJKBEZuJCMdhIT4IRuKjJwGRllIgNXkVEuMnARGRUiA9eQkREZuISMSvF3DcU+qkQGan1UiwyU+siKDFT66E1koNBHe5GBOh8dRAbKfHQUGajyUSMyUOSjVmSgxkffbfV5RtWeOKN3GYITZ9TJEJw4o16GoAdFgwxBE4rOMgRdKLrIELahqwzBiTO6yRA2orsMYSd6iBC2yXgjvxP0otiT3wmKUOzLEFShOJAhKEPxVoagDsWhDEEhiiMZgkoUxzIEpShOZAhqUbyTIShGcSpDUI3i7AVSnjjjXGRgs8eFyMBej43IwFaPS5HBrVSJDGz0uBYZ2OexFRk4ccZvIoO7fC8ycOKMDyIDJ874KDJw4owbkYETZ9xKDJ4445PI4J+EvYsMnDjjTmTgxBn3IgMnzngQGThxxmfxd43F/iIyWOuvIoOl/iYyWOnvIoOF/iEyUOeTjchAmU88kYEqn/giA0U+CUQGanwyttX2Yrry8DF4XduigAmbJHR06/vPqbnxZGyev67q3VGcZOyTg7kN688/+5wZNUqSCeVHuOTqdhO6z3d3hemrsDB52/0avDo3hekm/uI0yeaIpkVxPif+nPYY6q49V+6wVlK8Qp9/0la23fH5K0lPdnh+mAe8jZkhzqeT6fK0B6CcAZ6LOA2MLe/zkhwWcGxu19oOZv05lTUzFZ/YaWl3TA+udGxlj7V9Lsbt52rtzuwne1fyS/H3j7+OprDpqm0O91Wfd8Y0q7QpVn+87IM4Sk63f36+wvh6Y4dins9Jf4ATD2Ct6HkAC8WFB7BK3HkASsTO4wGoD7stD8C30V3MA/BNdJfyAHwL3X0PtU891ZNKqxnp+GxPqn6bf+HfT+ykyJF9gzlqdNLc0z6pumfU0KR3F0YN7Xl3Z9TQmFOPUUNLTreMGnZXGjNq2FppyqhhX6UFo4ZNlVaMGnZU+saoYTulo1/0zwul/GkRD7OEab+IBy+ml0U8uDO9L+LBr9+PqtA/TZTy20U8ePr70RD6J4tSPl3Eg++/H7Kgf8oo5atFPOyN70cW6J84Svll/of98/0kAO7po5ToBQI8+v3X8tyTSClxFwjwYe4JBDgv3woEeC2PBQLclacCAX7KC4EAB+WVQIBn8jeBAJfkR0qo52Lzkw4Ez+S9DgTr5BcdiA6660AwUuHpQPBTsdWBYKsi1oHgriLVgWCyotCB4LWi0oFgucIxqXJEtnCdqpuRLVyf6oZkC9eluinZwvWobky2cB2qm5M1rj91g7LGdaduUta43tSNyhrXmbpZWeP6Ujcsa1xXKqdljWtK5biscV2pnJc1ri2VA7PG9aVyYta4xlSOzBrXmcqZ2dK1pnJotnS9qZyaLV1zKsdmS9edyrnZ0rWnanC2dN2pmpwtXW+qRmdL15mq2dnS9aVqeLZ0Xamani1dT6rGZ0vXkar52cr1o2qAtnLdqJqgrVwvqkZoq28nTjzHlSoLUP5+mitVVqAcn+lKdaPDlNFldWT1EFtWJ1YPkWXVs3qIK6sLq4d9WN1ZPcSUtcfqIaKst6we4sk6ZvUQTdYpq4dYsi5YPUSSdcXqIY6sef9AFFmz/sEYsmb9gxFkzfoH48ea9Q9GjzXrH4wdLesfjBwt7x/oEJb3D/QGy/sHuoLl/QP9wPL+gU5gef9AD7B8/YHqb/n6A3Xf8vUHKr7l689Y61Xxi7fxt27+Mqb96vzlnQcwfxl4APOXKw9g/vLgAcxffB7A/CXkAcxfEh7A/CXjAcxfvh8PJOcv9Yx0On/Zz7/wXJLSsG8wR41O0uUvA6PG/OXKqDF/eTBqzF98Ro35S8ioMX9JGDXmLxmjxvzFMGrMX2pGjfnLnlFj/jL65f/NX94X8Zi/DIt4zF+ui3jMXx6LeLzp9hfxmL+Ei3jMX5JFPOYv2SIe8xeziMf8pV7EY/6yX8Rj/rLM/5i/jP7X5y+DQGD+chUIdOVDIPD23BcIzF9CgcD8JREIzF8ygcD8xQgE5i+1QGD+shcIzF8aSujzl3cdiPnLoAMxf7nqQHTQQwfitbivAzF/CXUg5i+JDsT8JdOBmL8YHYj5S60DMX9xTKrNX1ynKvMX16fK/MV1qTJ/cT2qzF9chyrzF9efyvzFdacyf3G9qcxfXGcq8xfXl8r8xXWlNn9xTanNX1xXavMX15ba/MX1pTZ/cY2pzV9cZ2rzF9ea2vzF9aY2f3HNqc1fXHdq8xfXnrr8xXWnLn9xvanLX1xn6vIX15e6/MV1pS5/cT2py19cR+ryF9ePuvzFdaMuf3G9qMtfvp0o5i8GlHP5Sw3K6fxldJg2f2lYPeYv76we85eB1WP+cmX1mL88WD3mLz6rx/wlZPWYvySsHvOXjNVj/mJYPeYvNavH/IX3D+YvrH8m8hfWPxP5C+ufifyF9c9E/sL6ZyJ/Yf0zkb/w/sH8hfcP5i+8fzB/4f2D+QvvH8xfeP9g/sLXH8xf+PqD+QtffzB/4evPd/7yPzKUTbKAhgAA"}!./node_modules/@vanilla-extract/webpack-plugin/extracted.js'
          ),
          __webpack_require__(
            "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js"
          )),
        injectStylesIntoStyleTag_default = __webpack_require__.n(
          injectStylesIntoStyleTag
        ),
        styleDomAPI = __webpack_require__(
          "./node_modules/style-loader/dist/runtime/styleDomAPI.js"
        ),
        styleDomAPI_default = __webpack_require__.n(styleDomAPI),
        insertBySelector = __webpack_require__(
          "./node_modules/style-loader/dist/runtime/insertBySelector.js"
        ),
        insertBySelector_default = __webpack_require__.n(insertBySelector),
        setAttributesWithoutAttributes = __webpack_require__(
          "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js"
        ),
        setAttributesWithoutAttributes_default = __webpack_require__.n(
          setAttributesWithoutAttributes
        ),
        insertStyleElement = __webpack_require__(
          "./node_modules/style-loader/dist/runtime/insertStyleElement.js"
        ),
        insertStyleElement_default = __webpack_require__.n(insertStyleElement),
        styleTagTransform = __webpack_require__(
          "./node_modules/style-loader/dist/runtime/styleTagTransform.js"
        ),
        styleTagTransform_default = __webpack_require__.n(styleTagTransform),
        slider_styles_css_ts_vanilla_css_source_Ll8xYXVmYjdrMSB7CiAgdG91Y2gtYWN0aW9uOiBub25lOwogIHVzZXItc2VsZWN0OiBub25lOwp9Ci5fMWF1ZmI3azFbZGF0YS1vcmllbnRhdGlvbj0naG9yaXpvbnRhbCddIHsKICBoZWlnaHQ6IHZhcigtLV8xazlscTk2MmcpOwp9Ci5fMWF1ZmI3azFbZGF0YS1vcmllbnRhdGlvbj0ndmVydGljYWwnXSB7CiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjsKICB3aWR0aDogdmFyKC0tXzFrOWxxOTYyZyk7Cn0KLl8xYXVmYjdrMyB7CiAgYmFja2dyb3VuZDogdmFyKC0tXzEzcjV4N2Y0KTsKICBmbGV4LWdyb3c6IDE7Cn0KLl8xYXVmYjdrM1tkYXRhLW9yaWVudGF0aW9uPSdob3Jpem9udGFsJ10gewogIGhlaWdodDogdmFyKC0tXzFrOWxxOTYyYyk7Cn0KLl8xYXVmYjdrM1tkYXRhLW9yaWVudGF0aW9uPSd2ZXJ0aWNhbCddIHsKICB3aWR0aDogdmFyKC0tXzFrOWxxOTYyYyk7Cn0KLl8xYXVmYjdrNzppcyg6aG92ZXIpIHsKICBiYWNrZ3JvdW5kOiB2YXIoLS1fMTNyNXg3ZmMpOwogIGJvcmRlci1jb2xvcjogdmFyKC0tXzEzcjV4N2YzKTsKICBjdXJzb3I6IHBvaW50ZXI7Cn0KLl8xYXVmYjdrNzppcyg6Zm9jdXMtdmlzaWJsZSkgewogIGJveC1zaGFkb3c6IHZhcigtLV8xazlscTk2Yyk7CiAgb3V0bGluZTogMXB4IHNvbGlkIHZhcigtLV8xM3I1eDdmOCkgOwogIGJvcmRlci1jb2xvcjogdmFyKC0tXzEzcjV4N2Y2KSA7Cn0KLl8xYXVmYjdrOSB7CiAgY29sb3I6IHZhcigtLV8xM3I1eDdmYik7Cn0KLl8xYXVmYjdrYiB7CiAgY29sb3I6IHZhcigtLV8xM3I1eDdmYik7Cn0KQG1lZGlhIChwcmVmZXJzLXJlZHVjZWQtbW90aW9uOiBuby1wcmVmZXJlbmNlKSB7CiAgLl8xYXVmYjdrNyB7CiAgICB0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kIHZhcigtLV8xazlscTk2Mm0pIGVhc2UsIGJvcmRlci1jb2xvciB2YXIoLS1fMWs5bHE5NjJtKSBlYXNlOwogIH0KfQ_node_modules_vanilla_extract_webpack_plugin_extracted =
          __webpack_require__(
            './node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[8].use[1]!./node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{"fileName":"src/components/slider/slider.styles.css.ts.vanilla.css","source":"Ll8xYXVmYjdrMSB7CiAgdG91Y2gtYWN0aW9uOiBub25lOwogIHVzZXItc2VsZWN0OiBub25lOwp9Ci5fMWF1ZmI3azFbZGF0YS1vcmllbnRhdGlvbj0naG9yaXpvbnRhbCddIHsKICBoZWlnaHQ6IHZhcigtLV8xazlscTk2MmcpOwp9Ci5fMWF1ZmI3azFbZGF0YS1vcmllbnRhdGlvbj0ndmVydGljYWwnXSB7CiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjsKICB3aWR0aDogdmFyKC0tXzFrOWxxOTYyZyk7Cn0KLl8xYXVmYjdrMyB7CiAgYmFja2dyb3VuZDogdmFyKC0tXzEzcjV4N2Y0KTsKICBmbGV4LWdyb3c6IDE7Cn0KLl8xYXVmYjdrM1tkYXRhLW9yaWVudGF0aW9uPSdob3Jpem9udGFsJ10gewogIGhlaWdodDogdmFyKC0tXzFrOWxxOTYyYyk7Cn0KLl8xYXVmYjdrM1tkYXRhLW9yaWVudGF0aW9uPSd2ZXJ0aWNhbCddIHsKICB3aWR0aDogdmFyKC0tXzFrOWxxOTYyYyk7Cn0KLl8xYXVmYjdrNzppcyg6aG92ZXIpIHsKICBiYWNrZ3JvdW5kOiB2YXIoLS1fMTNyNXg3ZmMpOwogIGJvcmRlci1jb2xvcjogdmFyKC0tXzEzcjV4N2YzKTsKICBjdXJzb3I6IHBvaW50ZXI7Cn0KLl8xYXVmYjdrNzppcyg6Zm9jdXMtdmlzaWJsZSkgewogIGJveC1zaGFkb3c6IHZhcigtLV8xazlscTk2Yyk7CiAgb3V0bGluZTogMXB4IHNvbGlkIHZhcigtLV8xM3I1eDdmOCkgOwogIGJvcmRlci1jb2xvcjogdmFyKC0tXzEzcjV4N2Y2KSA7Cn0KLl8xYXVmYjdrOSB7CiAgY29sb3I6IHZhcigtLV8xM3I1eDdmYik7Cn0KLl8xYXVmYjdrYiB7CiAgY29sb3I6IHZhcigtLV8xM3I1eDdmYik7Cn0KQG1lZGlhIChwcmVmZXJzLXJlZHVjZWQtbW90aW9uOiBuby1wcmVmZXJlbmNlKSB7CiAgLl8xYXVmYjdrNyB7CiAgICB0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kIHZhcigtLV8xazlscTk2Mm0pIGVhc2UsIGJvcmRlci1jb2xvciB2YXIoLS1fMWs5bHE5NjJtKSBlYXNlOwogIH0KfQ=="}!./node_modules/@vanilla-extract/webpack-plugin/extracted.js'
          ),
        options = {};
      (options.styleTagTransform = styleTagTransform_default()),
        (options.setAttributes = setAttributesWithoutAttributes_default()),
        (options.insert = insertBySelector_default().bind(null, "head")),
        (options.domAPI = styleDomAPI_default()),
        (options.insertStyleElement = insertStyleElement_default());
      injectStylesIntoStyleTag_default()(
        slider_styles_css_ts_vanilla_css_source_Ll8xYXVmYjdrMSB7CiAgdG91Y2gtYWN0aW9uOiBub25lOwogIHVzZXItc2VsZWN0OiBub25lOwp9Ci5fMWF1ZmI3azFbZGF0YS1vcmllbnRhdGlvbj0naG9yaXpvbnRhbCddIHsKICBoZWlnaHQ6IHZhcigtLV8xazlscTk2MmcpOwp9Ci5fMWF1ZmI3azFbZGF0YS1vcmllbnRhdGlvbj0ndmVydGljYWwnXSB7CiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjsKICB3aWR0aDogdmFyKC0tXzFrOWxxOTYyZyk7Cn0KLl8xYXVmYjdrMyB7CiAgYmFja2dyb3VuZDogdmFyKC0tXzEzcjV4N2Y0KTsKICBmbGV4LWdyb3c6IDE7Cn0KLl8xYXVmYjdrM1tkYXRhLW9yaWVudGF0aW9uPSdob3Jpem9udGFsJ10gewogIGhlaWdodDogdmFyKC0tXzFrOWxxOTYyYyk7Cn0KLl8xYXVmYjdrM1tkYXRhLW9yaWVudGF0aW9uPSd2ZXJ0aWNhbCddIHsKICB3aWR0aDogdmFyKC0tXzFrOWxxOTYyYyk7Cn0KLl8xYXVmYjdrNzppcyg6aG92ZXIpIHsKICBiYWNrZ3JvdW5kOiB2YXIoLS1fMTNyNXg3ZmMpOwogIGJvcmRlci1jb2xvcjogdmFyKC0tXzEzcjV4N2YzKTsKICBjdXJzb3I6IHBvaW50ZXI7Cn0KLl8xYXVmYjdrNzppcyg6Zm9jdXMtdmlzaWJsZSkgewogIGJveC1zaGFkb3c6IHZhcigtLV8xazlscTk2Yyk7CiAgb3V0bGluZTogMXB4IHNvbGlkIHZhcigtLV8xM3I1eDdmOCkgOwogIGJvcmRlci1jb2xvcjogdmFyKC0tXzEzcjV4N2Y2KSA7Cn0KLl8xYXVmYjdrOSB7CiAgY29sb3I6IHZhcigtLV8xM3I1eDdmYik7Cn0KLl8xYXVmYjdrYiB7CiAgY29sb3I6IHZhcigtLV8xM3I1eDdmYik7Cn0KQG1lZGlhIChwcmVmZXJzLXJlZHVjZWQtbW90aW9uOiBuby1wcmVmZXJlbmNlKSB7CiAgLl8xYXVmYjdrNyB7CiAgICB0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kIHZhcigtLV8xazlscTk2Mm0pIGVhc2UsIGJvcmRlci1jb2xvciB2YXIoLS1fMWs5bHE5NjJtKSBlYXNlOwogIH0KfQ_node_modules_vanilla_extract_webpack_plugin_extracted.Z,
        options
      );
      slider_styles_css_ts_vanilla_css_source_Ll8xYXVmYjdrMSB7CiAgdG91Y2gtYWN0aW9uOiBub25lOwogIHVzZXItc2VsZWN0OiBub25lOwp9Ci5fMWF1ZmI3azFbZGF0YS1vcmllbnRhdGlvbj0naG9yaXpvbnRhbCddIHsKICBoZWlnaHQ6IHZhcigtLV8xazlscTk2MmcpOwp9Ci5fMWF1ZmI3azFbZGF0YS1vcmllbnRhdGlvbj0ndmVydGljYWwnXSB7CiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjsKICB3aWR0aDogdmFyKC0tXzFrOWxxOTYyZyk7Cn0KLl8xYXVmYjdrMyB7CiAgYmFja2dyb3VuZDogdmFyKC0tXzEzcjV4N2Y0KTsKICBmbGV4LWdyb3c6IDE7Cn0KLl8xYXVmYjdrM1tkYXRhLW9yaWVudGF0aW9uPSdob3Jpem9udGFsJ10gewogIGhlaWdodDogdmFyKC0tXzFrOWxxOTYyYyk7Cn0KLl8xYXVmYjdrM1tkYXRhLW9yaWVudGF0aW9uPSd2ZXJ0aWNhbCddIHsKICB3aWR0aDogdmFyKC0tXzFrOWxxOTYyYyk7Cn0KLl8xYXVmYjdrNzppcyg6aG92ZXIpIHsKICBiYWNrZ3JvdW5kOiB2YXIoLS1fMTNyNXg3ZmMpOwogIGJvcmRlci1jb2xvcjogdmFyKC0tXzEzcjV4N2YzKTsKICBjdXJzb3I6IHBvaW50ZXI7Cn0KLl8xYXVmYjdrNzppcyg6Zm9jdXMtdmlzaWJsZSkgewogIGJveC1zaGFkb3c6IHZhcigtLV8xazlscTk2Yyk7CiAgb3V0bGluZTogMXB4IHNvbGlkIHZhcigtLV8xM3I1eDdmOCkgOwogIGJvcmRlci1jb2xvcjogdmFyKC0tXzEzcjV4N2Y2KSA7Cn0KLl8xYXVmYjdrOSB7CiAgY29sb3I6IHZhcigtLV8xM3I1eDdmYik7Cn0KLl8xYXVmYjdrYiB7CiAgY29sb3I6IHZhcigtLV8xM3I1eDdmYik7Cn0KQG1lZGlhIChwcmVmZXJzLXJlZHVjZWQtbW90aW9uOiBuby1wcmVmZXJlbmNlKSB7CiAgLl8xYXVmYjdrNyB7CiAgICB0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kIHZhcigtLV8xazlscTk2Mm0pIGVhc2UsIGJvcmRlci1jb2xvciB2YXIoLS1fMWs5bHE5NjJtKSBlYXNlOwogIH0KfQ_node_modules_vanilla_extract_webpack_plugin_extracted.Z &&
        slider_styles_css_ts_vanilla_css_source_Ll8xYXVmYjdrMSB7CiAgdG91Y2gtYWN0aW9uOiBub25lOwogIHVzZXItc2VsZWN0OiBub25lOwp9Ci5fMWF1ZmI3azFbZGF0YS1vcmllbnRhdGlvbj0naG9yaXpvbnRhbCddIHsKICBoZWlnaHQ6IHZhcigtLV8xazlscTk2MmcpOwp9Ci5fMWF1ZmI3azFbZGF0YS1vcmllbnRhdGlvbj0ndmVydGljYWwnXSB7CiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjsKICB3aWR0aDogdmFyKC0tXzFrOWxxOTYyZyk7Cn0KLl8xYXVmYjdrMyB7CiAgYmFja2dyb3VuZDogdmFyKC0tXzEzcjV4N2Y0KTsKICBmbGV4LWdyb3c6IDE7Cn0KLl8xYXVmYjdrM1tkYXRhLW9yaWVudGF0aW9uPSdob3Jpem9udGFsJ10gewogIGhlaWdodDogdmFyKC0tXzFrOWxxOTYyYyk7Cn0KLl8xYXVmYjdrM1tkYXRhLW9yaWVudGF0aW9uPSd2ZXJ0aWNhbCddIHsKICB3aWR0aDogdmFyKC0tXzFrOWxxOTYyYyk7Cn0KLl8xYXVmYjdrNzppcyg6aG92ZXIpIHsKICBiYWNrZ3JvdW5kOiB2YXIoLS1fMTNyNXg3ZmMpOwogIGJvcmRlci1jb2xvcjogdmFyKC0tXzEzcjV4N2YzKTsKICBjdXJzb3I6IHBvaW50ZXI7Cn0KLl8xYXVmYjdrNzppcyg6Zm9jdXMtdmlzaWJsZSkgewogIGJveC1zaGFkb3c6IHZhcigtLV8xazlscTk2Yyk7CiAgb3V0bGluZTogMXB4IHNvbGlkIHZhcigtLV8xM3I1eDdmOCkgOwogIGJvcmRlci1jb2xvcjogdmFyKC0tXzEzcjV4N2Y2KSA7Cn0KLl8xYXVmYjdrOSB7CiAgY29sb3I6IHZhcigtLV8xM3I1eDdmYik7Cn0KLl8xYXVmYjdrYiB7CiAgY29sb3I6IHZhcigtLV8xM3I1eDdmYik7Cn0KQG1lZGlhIChwcmVmZXJzLXJlZHVjZWQtbW90aW9uOiBuby1wcmVmZXJlbmNlKSB7CiAgLl8xYXVmYjdrNyB7CiAgICB0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kIHZhcigtLV8xazlscTk2Mm0pIGVhc2UsIGJvcmRlci1jb2xvciB2YXIoLS1fMWs5bHE5NjJtKSBlYXNlOwogIH0KfQ_node_modules_vanilla_extract_webpack_plugin_extracted
          .Z.locals &&
        slider_styles_css_ts_vanilla_css_source_Ll8xYXVmYjdrMSB7CiAgdG91Y2gtYWN0aW9uOiBub25lOwogIHVzZXItc2VsZWN0OiBub25lOwp9Ci5fMWF1ZmI3azFbZGF0YS1vcmllbnRhdGlvbj0naG9yaXpvbnRhbCddIHsKICBoZWlnaHQ6IHZhcigtLV8xazlscTk2MmcpOwp9Ci5fMWF1ZmI3azFbZGF0YS1vcmllbnRhdGlvbj0ndmVydGljYWwnXSB7CiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjsKICB3aWR0aDogdmFyKC0tXzFrOWxxOTYyZyk7Cn0KLl8xYXVmYjdrMyB7CiAgYmFja2dyb3VuZDogdmFyKC0tXzEzcjV4N2Y0KTsKICBmbGV4LWdyb3c6IDE7Cn0KLl8xYXVmYjdrM1tkYXRhLW9yaWVudGF0aW9uPSdob3Jpem9udGFsJ10gewogIGhlaWdodDogdmFyKC0tXzFrOWxxOTYyYyk7Cn0KLl8xYXVmYjdrM1tkYXRhLW9yaWVudGF0aW9uPSd2ZXJ0aWNhbCddIHsKICB3aWR0aDogdmFyKC0tXzFrOWxxOTYyYyk7Cn0KLl8xYXVmYjdrNzppcyg6aG92ZXIpIHsKICBiYWNrZ3JvdW5kOiB2YXIoLS1fMTNyNXg3ZmMpOwogIGJvcmRlci1jb2xvcjogdmFyKC0tXzEzcjV4N2YzKTsKICBjdXJzb3I6IHBvaW50ZXI7Cn0KLl8xYXVmYjdrNzppcyg6Zm9jdXMtdmlzaWJsZSkgewogIGJveC1zaGFkb3c6IHZhcigtLV8xazlscTk2Yyk7CiAgb3V0bGluZTogMXB4IHNvbGlkIHZhcigtLV8xM3I1eDdmOCkgOwogIGJvcmRlci1jb2xvcjogdmFyKC0tXzEzcjV4N2Y2KSA7Cn0KLl8xYXVmYjdrOSB7CiAgY29sb3I6IHZhcigtLV8xM3I1eDdmYik7Cn0KLl8xYXVmYjdrYiB7CiAgY29sb3I6IHZhcigtLV8xM3I1eDdmYik7Cn0KQG1lZGlhIChwcmVmZXJzLXJlZHVjZWQtbW90aW9uOiBuby1wcmVmZXJlbmNlKSB7CiAgLl8xYXVmYjdrNyB7CiAgICB0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kIHZhcigtLV8xazlscTk2Mm0pIGVhc2UsIGJvcmRlci1jb2xvciB2YXIoLS1fMWs5bHE5NjJtKSBlYXNlOwogIH0KfQ_node_modules_vanilla_extract_webpack_plugin_extracted
          .Z.locals;
      var jsx_runtime = __webpack_require__(
        "./node_modules/react/jsx-runtime.js"
      );
      const Slider = (0, react.forwardRef)(
        (
          {
            errorMessage,
            id,
            invalid,
            label,
            labelTooltip,
            name,
            required,
            size,
            slotLeft,
            slotRight,
            wrapperProps,
            ...rest
          },
          ref
        ) => {
          const labelId = id ? `${id}-label` : void 0,
            { atomProps, otherProps } = (0, dessert_box_core_esm.q)(
              rest,
              get_sprinkles_css.eD
            );
          return (0, jsx_runtime.jsxs)(box_comp.x, {
            className: (0, clsx_m.Z)({ [color_palette_css.gx.red]: invalid }),
            color: "text_low_contrast",
            ...wrapperProps,
            children: [
              label &&
                id &&
                labelId &&
                (0, jsx_runtime.jsx)(label_comp._, {
                  htmlFor: id,
                  id: labelId,
                  label,
                  labelTooltip,
                }),
              (0, jsx_runtime.jsx)(slot_wrapper_comp.L, {
                size,
                slotLeft,
                slotRight,
                children: (0, jsx_runtime.jsxs)(index_module.fC, {
                  "aria-label": name,
                  "aria-labelledby": label && id ? labelId : void 0,
                  "aria-required": required,
                  className: (0, clsx_m.Z)(
                    "_1aufb7k1 eiij7b53 eiij7b46 eiij7b2 eiij7b8o eiij7bg9 eiij7bgl",
                    (0, get_sprinkles_css.eD)(atomProps)
                  ),
                  id,
                  name,
                  ref,
                  ...otherProps,
                  children: [
                    (0, jsx_runtime.jsx)(index_module.fQ, {
                      className: "_1aufb7k3 eiij7b10 eiij7bg9",
                      children: (0, jsx_runtime.jsx)(index_module.e6, {
                        className: "eiij7bf eiij7bz eiij7b2k eiij7bgc",
                      }),
                    }),
                    (0, jsx_runtime.jsx)(index_module.bU, {
                      className:
                        "_1aufb7k7 eiij7bm eiij7bq eiij7bw eiij7b8l eiij7b31 eiij7bil",
                    }),
                  ],
                }),
              }),
              invalid &&
                errorMessage &&
                (0, jsx_runtime.jsx)(input_error_message_comp.f, {
                  message: errorMessage,
                }),
            ],
          });
        }
      );
      try {
        (Slider.displayName = "Slider"),
          (Slider.__docgenInfo = {
            description: "",
            displayName: "Slider",
            props: {
              content: {
                defaultValue: null,
                description: "",
                name: "content",
                required: !1,
                type: { name: "string" },
              },
              translate: {
                defaultValue: null,
                description: "",
                name: "translate",
                required: !1,
                type: {
                  name: "enum",
                  value: [{ value: '"yes"' }, { value: '"no"' }],
                },
              },
              hidden: {
                defaultValue: null,
                description: "",
                name: "hidden",
                required: !1,
                type: { name: "boolean" },
              },
              style: {
                defaultValue: null,
                description: "",
                name: "style",
                required: !1,
                type: { name: "CSSProperties" },
              },
              disabled: {
                defaultValue: null,
                description:
                  "Is input disabled. Mapped to html5 <input> `disabled` attribute and `aria-disabled` attribute.",
                name: "disabled",
                required: !1,
                type: { name: "boolean" },
              },
              name: {
                defaultValue: null,
                description:
                  "Name of the form control. Submitted with the form as part of a name/value pair",
                name: "name",
                required: !1,
                type: { name: "string" },
              },
              slot: {
                defaultValue: null,
                description: "",
                name: "slot",
                required: !1,
                type: { name: "string" },
              },
              title: {
                defaultValue: null,
                description: "",
                name: "title",
                required: !1,
                type: { name: "string" },
              },
              key: {
                defaultValue: null,
                description: "",
                name: "key",
                required: !1,
                type: { name: "Key" },
              },
              placeholder: {
                defaultValue: null,
                description:
                  "Text shown before user has interacted with the input.",
                name: "placeholder",
                required: !1,
                type: { name: "string" },
              },
              value: {
                defaultValue: null,
                description: "",
                name: "value",
                required: !1,
                type: { name: "number[]" },
              },
              onChange: {
                defaultValue: null,
                description: "",
                name: "onChange",
                required: !1,
                type: { name: "FormEventHandler<HTMLDivElement>" },
              },
              defaultChecked: {
                defaultValue: null,
                description: "",
                name: "defaultChecked",
                required: !1,
                type: { name: "boolean" },
              },
              defaultValue: {
                defaultValue: null,
                description: "",
                name: "defaultValue",
                required: !1,
                type: { name: "number[]" },
              },
              suppressContentEditableWarning: {
                defaultValue: null,
                description: "",
                name: "suppressContentEditableWarning",
                required: !1,
                type: { name: "boolean" },
              },
              suppressHydrationWarning: {
                defaultValue: null,
                description: "",
                name: "suppressHydrationWarning",
                required: !1,
                type: { name: "boolean" },
              },
              accessKey: {
                defaultValue: null,
                description: "",
                name: "accessKey",
                required: !1,
                type: { name: "string" },
              },
              autoFocus: {
                defaultValue: null,
                description: "",
                name: "autoFocus",
                required: !1,
                type: { name: "boolean" },
              },
              className: {
                defaultValue: null,
                description: "",
                name: "className",
                required: !1,
                type: { name: "string" },
              },
              contentEditable: {
                defaultValue: null,
                description: "",
                name: "contentEditable",
                required: !1,
                type: { name: '"inherit" | Booleanish' },
              },
              contextMenu: {
                defaultValue: null,
                description: "",
                name: "contextMenu",
                required: !1,
                type: { name: "string" },
              },
              dir: {
                defaultValue: null,
                description: "",
                name: "dir",
                required: !1,
                type: {
                  name: "enum",
                  value: [{ value: '"ltr"' }, { value: '"rtl"' }],
                },
              },
              draggable: {
                defaultValue: null,
                description: "",
                name: "draggable",
                required: !1,
                type: { name: "Booleanish" },
              },
              id: {
                defaultValue: null,
                description: "",
                name: "id",
                required: !1,
                type: { name: "string" },
              },
              lang: {
                defaultValue: null,
                description: "",
                name: "lang",
                required: !1,
                type: { name: "string" },
              },
              nonce: {
                defaultValue: null,
                description: "",
                name: "nonce",
                required: !1,
                type: { name: "string" },
              },
              spellCheck: {
                defaultValue: null,
                description: "",
                name: "spellCheck",
                required: !1,
                type: { name: "Booleanish" },
              },
              tabIndex: {
                defaultValue: null,
                description: "",
                name: "tabIndex",
                required: !1,
                type: { name: "number" },
              },
              radioGroup: {
                defaultValue: null,
                description: "",
                name: "radioGroup",
                required: !1,
                type: { name: "string" },
              },
              role: {
                defaultValue: null,
                description: "Aria role to use for the input (e.g. `search`).",
                name: "role",
                required: !1,
                type: { name: "AriaRole" },
              },
              about: {
                defaultValue: null,
                description: "",
                name: "about",
                required: !1,
                type: { name: "string" },
              },
              datatype: {
                defaultValue: null,
                description: "",
                name: "datatype",
                required: !1,
                type: { name: "string" },
              },
              inlist: {
                defaultValue: null,
                description: "",
                name: "inlist",
                required: !1,
                type: { name: "any" },
              },
              prefix: {
                defaultValue: null,
                description: "",
                name: "prefix",
                required: !1,
                type: { name: "string" },
              },
              property: {
                defaultValue: null,
                description: "",
                name: "property",
                required: !1,
                type: { name: "string" },
              },
              rel: {
                defaultValue: null,
                description: "",
                name: "rel",
                required: !1,
                type: { name: "string" },
              },
              resource: {
                defaultValue: null,
                description: "",
                name: "resource",
                required: !1,
                type: { name: "string" },
              },
              rev: {
                defaultValue: null,
                description: "",
                name: "rev",
                required: !1,
                type: { name: "string" },
              },
              typeof: {
                defaultValue: null,
                description: "",
                name: "typeof",
                required: !1,
                type: { name: "string" },
              },
              vocab: {
                defaultValue: null,
                description: "",
                name: "vocab",
                required: !1,
                type: { name: "string" },
              },
              autoCapitalize: {
                defaultValue: null,
                description: "",
                name: "autoCapitalize",
                required: !1,
                type: { name: "string" },
              },
              autoCorrect: {
                defaultValue: null,
                description: "",
                name: "autoCorrect",
                required: !1,
                type: { name: "string" },
              },
              autoSave: {
                defaultValue: null,
                description: "",
                name: "autoSave",
                required: !1,
                type: { name: "string" },
              },
              itemProp: {
                defaultValue: null,
                description: "",
                name: "itemProp",
                required: !1,
                type: { name: "string" },
              },
              itemScope: {
                defaultValue: null,
                description: "",
                name: "itemScope",
                required: !1,
                type: { name: "boolean" },
              },
              itemType: {
                defaultValue: null,
                description: "",
                name: "itemType",
                required: !1,
                type: { name: "string" },
              },
              itemID: {
                defaultValue: null,
                description: "",
                name: "itemID",
                required: !1,
                type: { name: "string" },
              },
              itemRef: {
                defaultValue: null,
                description: "",
                name: "itemRef",
                required: !1,
                type: { name: "string" },
              },
              results: {
                defaultValue: null,
                description: "",
                name: "results",
                required: !1,
                type: { name: "number" },
              },
              security: {
                defaultValue: null,
                description: "",
                name: "security",
                required: !1,
                type: { name: "string" },
              },
              unselectable: {
                defaultValue: null,
                description: "",
                name: "unselectable",
                required: !1,
                type: {
                  name: "enum",
                  value: [{ value: '"on"' }, { value: '"off"' }],
                },
              },
              inputMode: {
                defaultValue: null,
                description:
                  "Hints at the type of data that might be entered by the user while editing the element or its contents\n@see https://html.spec.whatwg.org/multipage/interaction.html#input-modalities:-the-inputmode-attribute",
                name: "inputMode",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"none"' },
                    { value: '"search"' },
                    { value: '"text"' },
                    { value: '"tel"' },
                    { value: '"url"' },
                    { value: '"email"' },
                    { value: '"numeric"' },
                    { value: '"decimal"' },
                  ],
                },
              },
              is: {
                defaultValue: null,
                description:
                  "Specify that a standard HTML element should behave like a defined custom built-in element\n@see https://html.spec.whatwg.org/multipage/custom-elements.html#attr-is",
                name: "is",
                required: !1,
                type: { name: "string" },
              },
              "aria-activedescendant": {
                defaultValue: null,
                description:
                  "Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.",
                name: "aria-activedescendant",
                required: !1,
                type: { name: "string" },
              },
              "aria-atomic": {
                defaultValue: null,
                description:
                  "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.",
                name: "aria-atomic",
                required: !1,
                type: { name: "Booleanish" },
              },
              "aria-autocomplete": {
                defaultValue: null,
                description:
                  "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be\npresented if they are made.",
                name: "aria-autocomplete",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"none"' },
                    { value: '"both"' },
                    { value: '"inline"' },
                    { value: '"list"' },
                  ],
                },
              },
              "aria-busy": {
                defaultValue: null,
                description:
                  "Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.",
                name: "aria-busy",
                required: !1,
                type: { name: "Booleanish" },
              },
              "aria-checked": {
                defaultValue: null,
                description:
                  'Indicates the current "checked" state of checkboxes, radio buttons, and other widgets.\n@see aria-pressed\n@see aria-selected.',
                name: "aria-checked",
                required: !1,
                type: { name: 'boolean | "mixed" | "false" | "true"' },
              },
              "aria-colcount": {
                defaultValue: null,
                description:
                  "Defines the total number of columns in a table, grid, or treegrid.\n@see aria-colindex.",
                name: "aria-colcount",
                required: !1,
                type: { name: "number" },
              },
              "aria-colindex": {
                defaultValue: null,
                description:
                  "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.\n@see aria-colcount\n@see aria-colspan.",
                name: "aria-colindex",
                required: !1,
                type: { name: "number" },
              },
              "aria-colspan": {
                defaultValue: null,
                description:
                  "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.\n@see aria-colindex\n@see aria-rowspan.",
                name: "aria-colspan",
                required: !1,
                type: { name: "number" },
              },
              "aria-controls": {
                defaultValue: null,
                description:
                  "Identifies the element (or elements) whose contents or presence are controlled by the current element.\n@see aria-owns.",
                name: "aria-controls",
                required: !1,
                type: { name: "string" },
              },
              "aria-current": {
                defaultValue: null,
                description:
                  "Indicates the element that represents the current item within a container or set of related elements.",
                name: "aria-current",
                required: !1,
                type: {
                  name: 'boolean | "page" | "false" | "true" | "time" | "step" | "location" | "date"',
                },
              },
              "aria-describedby": {
                defaultValue: null,
                description:
                  "Identifies the element (or elements) that describes the object.\n@see aria-labelledby",
                name: "aria-describedby",
                required: !1,
                type: { name: "string" },
              },
              "aria-details": {
                defaultValue: null,
                description:
                  "Identifies the element that provides a detailed, extended description for the object.\n@see aria-describedby.",
                name: "aria-details",
                required: !1,
                type: { name: "string" },
              },
              "aria-disabled": {
                defaultValue: null,
                description:
                  "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.\n@see aria-hidden\n@see aria-readonly.",
                name: "aria-disabled",
                required: !1,
                type: { name: "Booleanish" },
              },
              "aria-dropeffect": {
                defaultValue: null,
                description:
                  "Indicates what functions can be performed when a dragged object is released on the drop target.\n@deprecated in ARIA 1.1",
                name: "aria-dropeffect",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"none"' },
                    { value: '"link"' },
                    { value: '"copy"' },
                    { value: '"move"' },
                    { value: '"execute"' },
                    { value: '"popup"' },
                  ],
                },
              },
              "aria-errormessage": {
                defaultValue: null,
                description:
                  "Identifies the element that provides an error message for the object.\n@see aria-invalid\n@see aria-describedby.",
                name: "aria-errormessage",
                required: !1,
                type: { name: "string" },
              },
              "aria-expanded": {
                defaultValue: null,
                description:
                  "Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.",
                name: "aria-expanded",
                required: !1,
                type: { name: "Booleanish" },
              },
              "aria-flowto": {
                defaultValue: null,
                description:
                  "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,\nallows assistive technology to override the general default of reading in document source order.",
                name: "aria-flowto",
                required: !1,
                type: { name: "string" },
              },
              "aria-grabbed": {
                defaultValue: null,
                description:
                  'Indicates an element\'s "grabbed" state in a drag-and-drop operation.\n@deprecated in ARIA 1.1',
                name: "aria-grabbed",
                required: !1,
                type: { name: "Booleanish" },
              },
              "aria-haspopup": {
                defaultValue: null,
                description:
                  "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.",
                name: "aria-haspopup",
                required: !1,
                type: {
                  name: 'boolean | "grid" | "listbox" | "menu" | "false" | "true" | "dialog" | "tree"',
                },
              },
              "aria-hidden": {
                defaultValue: null,
                description:
                  "Indicates whether the element is exposed to an accessibility API.\n@see aria-disabled.",
                name: "aria-hidden",
                required: !1,
                type: { name: "Booleanish" },
              },
              "aria-invalid": {
                defaultValue: null,
                description:
                  "Indicates the entered value does not conform to the format expected by the application.\n@see aria-errormessage.",
                name: "aria-invalid",
                required: !1,
                type: {
                  name: 'boolean | "false" | "true" | "grammar" | "spelling"',
                },
              },
              "aria-keyshortcuts": {
                defaultValue: null,
                description:
                  "Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.",
                name: "aria-keyshortcuts",
                required: !1,
                type: { name: "string" },
              },
              "aria-label": {
                defaultValue: null,
                description:
                  "Defines a string value that labels the current element.\n@see aria-labelledby.",
                name: "aria-label",
                required: !1,
                type: { name: "string" },
              },
              "aria-labelledby": {
                defaultValue: null,
                description:
                  "Identifies the element (or elements) that labels the current element.\n@see aria-describedby.",
                name: "aria-labelledby",
                required: !1,
                type: { name: "string" },
              },
              "aria-level": {
                defaultValue: null,
                description:
                  "Defines the hierarchical level of an element within a structure.",
                name: "aria-level",
                required: !1,
                type: { name: "number" },
              },
              "aria-live": {
                defaultValue: null,
                description:
                  "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.",
                name: "aria-live",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"off"' },
                    { value: '"assertive"' },
                    { value: '"polite"' },
                  ],
                },
              },
              "aria-modal": {
                defaultValue: null,
                description:
                  "Indicates whether an element is modal when displayed.",
                name: "aria-modal",
                required: !1,
                type: { name: "Booleanish" },
              },
              "aria-multiline": {
                defaultValue: null,
                description:
                  "Indicates whether a text box accepts multiple lines of input or only a single line.",
                name: "aria-multiline",
                required: !1,
                type: { name: "Booleanish" },
              },
              "aria-multiselectable": {
                defaultValue: null,
                description:
                  "Indicates that the user may select more than one item from the current selectable descendants.",
                name: "aria-multiselectable",
                required: !1,
                type: { name: "Booleanish" },
              },
              "aria-orientation": {
                defaultValue: null,
                description:
                  "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous.",
                name: "aria-orientation",
                required: !1,
                type: {
                  name: "enum",
                  value: [{ value: '"horizontal"' }, { value: '"vertical"' }],
                },
              },
              "aria-owns": {
                defaultValue: null,
                description:
                  "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship\nbetween DOM elements where the DOM hierarchy cannot be used to represent the relationship.\n@see aria-controls.",
                name: "aria-owns",
                required: !1,
                type: { name: "string" },
              },
              "aria-placeholder": {
                defaultValue: null,
                description:
                  "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.\nA hint could be a sample value or a brief description of the expected format.",
                name: "aria-placeholder",
                required: !1,
                type: { name: "string" },
              },
              "aria-posinset": {
                defaultValue: null,
                description:
                  "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\n@see aria-setsize.",
                name: "aria-posinset",
                required: !1,
                type: { name: "number" },
              },
              "aria-pressed": {
                defaultValue: null,
                description:
                  'Indicates the current "pressed" state of toggle buttons.\n@see aria-checked\n@see aria-selected.',
                name: "aria-pressed",
                required: !1,
                type: { name: 'boolean | "mixed" | "false" | "true"' },
              },
              "aria-readonly": {
                defaultValue: null,
                description:
                  "Indicates that the element is not editable, but is otherwise operable.\n@see aria-disabled.",
                name: "aria-readonly",
                required: !1,
                type: { name: "Booleanish" },
              },
              "aria-relevant": {
                defaultValue: null,
                description:
                  "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.\n@see aria-atomic.",
                name: "aria-relevant",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"all"' },
                    { value: '"text"' },
                    { value: '"additions"' },
                    { value: '"additions removals"' },
                    { value: '"additions text"' },
                    { value: '"removals"' },
                    { value: '"removals additions"' },
                    { value: '"removals text"' },
                    { value: '"text additions"' },
                    { value: '"text removals"' },
                  ],
                },
              },
              "aria-required": {
                defaultValue: null,
                description:
                  "Indicates that user input is required on the element before a form may be submitted.",
                name: "aria-required",
                required: !1,
                type: { name: "Booleanish" },
              },
              "aria-roledescription": {
                defaultValue: null,
                description:
                  "Defines a human-readable, author-localized description for the role of an element.",
                name: "aria-roledescription",
                required: !1,
                type: { name: "string" },
              },
              "aria-rowcount": {
                defaultValue: null,
                description:
                  "Defines the total number of rows in a table, grid, or treegrid.\n@see aria-rowindex.",
                name: "aria-rowcount",
                required: !1,
                type: { name: "number" },
              },
              "aria-rowindex": {
                defaultValue: null,
                description:
                  "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.\n@see aria-rowcount\n@see aria-rowspan.",
                name: "aria-rowindex",
                required: !1,
                type: { name: "number" },
              },
              "aria-rowspan": {
                defaultValue: null,
                description:
                  "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.\n@see aria-rowindex\n@see aria-colspan.",
                name: "aria-rowspan",
                required: !1,
                type: { name: "number" },
              },
              "aria-selected": {
                defaultValue: null,
                description:
                  'Indicates the current "selected" state of various widgets.\n@see aria-checked\n@see aria-pressed.',
                name: "aria-selected",
                required: !1,
                type: { name: "Booleanish" },
              },
              "aria-setsize": {
                defaultValue: null,
                description:
                  "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\n@see aria-posinset.",
                name: "aria-setsize",
                required: !1,
                type: { name: "number" },
              },
              "aria-sort": {
                defaultValue: null,
                description:
                  "Indicates if items in a table or grid are sorted in ascending or descending order.",
                name: "aria-sort",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"none"' },
                    { value: '"ascending"' },
                    { value: '"descending"' },
                    { value: '"other"' },
                  ],
                },
              },
              "aria-valuemax": {
                defaultValue: null,
                description:
                  "Defines the maximum allowed value for a range widget.",
                name: "aria-valuemax",
                required: !1,
                type: { name: "number" },
              },
              "aria-valuemin": {
                defaultValue: null,
                description:
                  "Defines the minimum allowed value for a range widget.",
                name: "aria-valuemin",
                required: !1,
                type: { name: "number" },
              },
              "aria-valuenow": {
                defaultValue: null,
                description:
                  "Defines the current value for a range widget.\n@see aria-valuetext.",
                name: "aria-valuenow",
                required: !1,
                type: { name: "number" },
              },
              "aria-valuetext": {
                defaultValue: null,
                description:
                  "Defines the human readable text alternative of aria-valuenow for a range widget.",
                name: "aria-valuetext",
                required: !1,
                type: { name: "string" },
              },
              dangerouslySetInnerHTML: {
                defaultValue: null,
                description: "",
                name: "dangerouslySetInnerHTML",
                required: !1,
                type: { name: "{ __html: string | TrustedHTML; }" },
              },
              onCopy: {
                defaultValue: null,
                description: "",
                name: "onCopy",
                required: !1,
                type: { name: "ClipboardEventHandler<HTMLDivElement>" },
              },
              onCopyCapture: {
                defaultValue: null,
                description: "",
                name: "onCopyCapture",
                required: !1,
                type: { name: "ClipboardEventHandler<HTMLDivElement>" },
              },
              onCut: {
                defaultValue: null,
                description: "",
                name: "onCut",
                required: !1,
                type: { name: "ClipboardEventHandler<HTMLDivElement>" },
              },
              onCutCapture: {
                defaultValue: null,
                description: "",
                name: "onCutCapture",
                required: !1,
                type: { name: "ClipboardEventHandler<HTMLDivElement>" },
              },
              onPaste: {
                defaultValue: null,
                description: "",
                name: "onPaste",
                required: !1,
                type: { name: "ClipboardEventHandler<HTMLDivElement>" },
              },
              onPasteCapture: {
                defaultValue: null,
                description: "",
                name: "onPasteCapture",
                required: !1,
                type: { name: "ClipboardEventHandler<HTMLDivElement>" },
              },
              onCompositionEnd: {
                defaultValue: null,
                description: "",
                name: "onCompositionEnd",
                required: !1,
                type: { name: "CompositionEventHandler<HTMLDivElement>" },
              },
              onCompositionEndCapture: {
                defaultValue: null,
                description: "",
                name: "onCompositionEndCapture",
                required: !1,
                type: { name: "CompositionEventHandler<HTMLDivElement>" },
              },
              onCompositionStart: {
                defaultValue: null,
                description: "",
                name: "onCompositionStart",
                required: !1,
                type: { name: "CompositionEventHandler<HTMLDivElement>" },
              },
              onCompositionStartCapture: {
                defaultValue: null,
                description: "",
                name: "onCompositionStartCapture",
                required: !1,
                type: { name: "CompositionEventHandler<HTMLDivElement>" },
              },
              onCompositionUpdate: {
                defaultValue: null,
                description: "",
                name: "onCompositionUpdate",
                required: !1,
                type: { name: "CompositionEventHandler<HTMLDivElement>" },
              },
              onCompositionUpdateCapture: {
                defaultValue: null,
                description: "",
                name: "onCompositionUpdateCapture",
                required: !1,
                type: { name: "CompositionEventHandler<HTMLDivElement>" },
              },
              onFocus: {
                defaultValue: null,
                description: "",
                name: "onFocus",
                required: !1,
                type: { name: "FocusEventHandler<HTMLDivElement>" },
              },
              onFocusCapture: {
                defaultValue: null,
                description: "",
                name: "onFocusCapture",
                required: !1,
                type: { name: "FocusEventHandler<HTMLDivElement>" },
              },
              onBlur: {
                defaultValue: null,
                description: "",
                name: "onBlur",
                required: !1,
                type: { name: "FocusEventHandler<HTMLDivElement>" },
              },
              onBlurCapture: {
                defaultValue: null,
                description: "",
                name: "onBlurCapture",
                required: !1,
                type: { name: "FocusEventHandler<HTMLDivElement>" },
              },
              onChangeCapture: {
                defaultValue: null,
                description: "",
                name: "onChangeCapture",
                required: !1,
                type: { name: "FormEventHandler<HTMLDivElement>" },
              },
              onBeforeInput: {
                defaultValue: null,
                description: "",
                name: "onBeforeInput",
                required: !1,
                type: { name: "FormEventHandler<HTMLDivElement>" },
              },
              onBeforeInputCapture: {
                defaultValue: null,
                description: "",
                name: "onBeforeInputCapture",
                required: !1,
                type: { name: "FormEventHandler<HTMLDivElement>" },
              },
              onInput: {
                defaultValue: null,
                description: "",
                name: "onInput",
                required: !1,
                type: { name: "FormEventHandler<HTMLDivElement>" },
              },
              onInputCapture: {
                defaultValue: null,
                description: "",
                name: "onInputCapture",
                required: !1,
                type: { name: "FormEventHandler<HTMLDivElement>" },
              },
              onReset: {
                defaultValue: null,
                description: "",
                name: "onReset",
                required: !1,
                type: { name: "FormEventHandler<HTMLDivElement>" },
              },
              onResetCapture: {
                defaultValue: null,
                description: "",
                name: "onResetCapture",
                required: !1,
                type: { name: "FormEventHandler<HTMLDivElement>" },
              },
              onSubmit: {
                defaultValue: null,
                description: "",
                name: "onSubmit",
                required: !1,
                type: { name: "FormEventHandler<HTMLDivElement>" },
              },
              onSubmitCapture: {
                defaultValue: null,
                description: "",
                name: "onSubmitCapture",
                required: !1,
                type: { name: "FormEventHandler<HTMLDivElement>" },
              },
              onInvalid: {
                defaultValue: null,
                description: "",
                name: "onInvalid",
                required: !1,
                type: { name: "FormEventHandler<HTMLDivElement>" },
              },
              onInvalidCapture: {
                defaultValue: null,
                description: "",
                name: "onInvalidCapture",
                required: !1,
                type: { name: "FormEventHandler<HTMLDivElement>" },
              },
              onLoad: {
                defaultValue: null,
                description: "",
                name: "onLoad",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onLoadCapture: {
                defaultValue: null,
                description: "",
                name: "onLoadCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onError: {
                defaultValue: null,
                description: "",
                name: "onError",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onErrorCapture: {
                defaultValue: null,
                description: "",
                name: "onErrorCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onKeyDown: {
                defaultValue: null,
                description: "",
                name: "onKeyDown",
                required: !1,
                type: { name: "KeyboardEventHandler<HTMLDivElement>" },
              },
              onKeyDownCapture: {
                defaultValue: null,
                description: "",
                name: "onKeyDownCapture",
                required: !1,
                type: { name: "KeyboardEventHandler<HTMLDivElement>" },
              },
              onKeyPress: {
                defaultValue: null,
                description: "@deprecated",
                name: "onKeyPress",
                required: !1,
                type: { name: "KeyboardEventHandler<HTMLDivElement>" },
              },
              onKeyPressCapture: {
                defaultValue: null,
                description: "@deprecated",
                name: "onKeyPressCapture",
                required: !1,
                type: { name: "KeyboardEventHandler<HTMLDivElement>" },
              },
              onKeyUp: {
                defaultValue: null,
                description: "",
                name: "onKeyUp",
                required: !1,
                type: { name: "KeyboardEventHandler<HTMLDivElement>" },
              },
              onKeyUpCapture: {
                defaultValue: null,
                description: "",
                name: "onKeyUpCapture",
                required: !1,
                type: { name: "KeyboardEventHandler<HTMLDivElement>" },
              },
              onAbort: {
                defaultValue: null,
                description: "",
                name: "onAbort",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onAbortCapture: {
                defaultValue: null,
                description: "",
                name: "onAbortCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onCanPlay: {
                defaultValue: null,
                description: "",
                name: "onCanPlay",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onCanPlayCapture: {
                defaultValue: null,
                description: "",
                name: "onCanPlayCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onCanPlayThrough: {
                defaultValue: null,
                description: "",
                name: "onCanPlayThrough",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onCanPlayThroughCapture: {
                defaultValue: null,
                description: "",
                name: "onCanPlayThroughCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onDurationChange: {
                defaultValue: null,
                description: "",
                name: "onDurationChange",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onDurationChangeCapture: {
                defaultValue: null,
                description: "",
                name: "onDurationChangeCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onEmptied: {
                defaultValue: null,
                description: "",
                name: "onEmptied",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onEmptiedCapture: {
                defaultValue: null,
                description: "",
                name: "onEmptiedCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onEncrypted: {
                defaultValue: null,
                description: "",
                name: "onEncrypted",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onEncryptedCapture: {
                defaultValue: null,
                description: "",
                name: "onEncryptedCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onEnded: {
                defaultValue: null,
                description: "",
                name: "onEnded",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onEndedCapture: {
                defaultValue: null,
                description: "",
                name: "onEndedCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onLoadedData: {
                defaultValue: null,
                description: "",
                name: "onLoadedData",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onLoadedDataCapture: {
                defaultValue: null,
                description: "",
                name: "onLoadedDataCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onLoadedMetadata: {
                defaultValue: null,
                description: "",
                name: "onLoadedMetadata",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onLoadedMetadataCapture: {
                defaultValue: null,
                description: "",
                name: "onLoadedMetadataCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onLoadStart: {
                defaultValue: null,
                description: "",
                name: "onLoadStart",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onLoadStartCapture: {
                defaultValue: null,
                description: "",
                name: "onLoadStartCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onPause: {
                defaultValue: null,
                description: "",
                name: "onPause",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onPauseCapture: {
                defaultValue: null,
                description: "",
                name: "onPauseCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onPlay: {
                defaultValue: null,
                description: "",
                name: "onPlay",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onPlayCapture: {
                defaultValue: null,
                description: "",
                name: "onPlayCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onPlaying: {
                defaultValue: null,
                description: "",
                name: "onPlaying",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onPlayingCapture: {
                defaultValue: null,
                description: "",
                name: "onPlayingCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onProgress: {
                defaultValue: null,
                description: "",
                name: "onProgress",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onProgressCapture: {
                defaultValue: null,
                description: "",
                name: "onProgressCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onRateChange: {
                defaultValue: null,
                description: "",
                name: "onRateChange",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onRateChangeCapture: {
                defaultValue: null,
                description: "",
                name: "onRateChangeCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onResize: {
                defaultValue: null,
                description: "",
                name: "onResize",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onResizeCapture: {
                defaultValue: null,
                description: "",
                name: "onResizeCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onSeeked: {
                defaultValue: null,
                description: "",
                name: "onSeeked",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onSeekedCapture: {
                defaultValue: null,
                description: "",
                name: "onSeekedCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onSeeking: {
                defaultValue: null,
                description: "",
                name: "onSeeking",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onSeekingCapture: {
                defaultValue: null,
                description: "",
                name: "onSeekingCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onStalled: {
                defaultValue: null,
                description: "",
                name: "onStalled",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onStalledCapture: {
                defaultValue: null,
                description: "",
                name: "onStalledCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onSuspend: {
                defaultValue: null,
                description: "",
                name: "onSuspend",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onSuspendCapture: {
                defaultValue: null,
                description: "",
                name: "onSuspendCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onTimeUpdate: {
                defaultValue: null,
                description: "",
                name: "onTimeUpdate",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onTimeUpdateCapture: {
                defaultValue: null,
                description: "",
                name: "onTimeUpdateCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onVolumeChange: {
                defaultValue: null,
                description: "",
                name: "onVolumeChange",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onVolumeChangeCapture: {
                defaultValue: null,
                description: "",
                name: "onVolumeChangeCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onWaiting: {
                defaultValue: null,
                description: "",
                name: "onWaiting",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onWaitingCapture: {
                defaultValue: null,
                description: "",
                name: "onWaitingCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onAuxClick: {
                defaultValue: null,
                description: "",
                name: "onAuxClick",
                required: !1,
                type: { name: "MouseEventHandler<HTMLDivElement>" },
              },
              onAuxClickCapture: {
                defaultValue: null,
                description: "",
                name: "onAuxClickCapture",
                required: !1,
                type: { name: "MouseEventHandler<HTMLDivElement>" },
              },
              onClick: {
                defaultValue: null,
                description: "",
                name: "onClick",
                required: !1,
                type: { name: "MouseEventHandler<HTMLDivElement>" },
              },
              onClickCapture: {
                defaultValue: null,
                description: "",
                name: "onClickCapture",
                required: !1,
                type: { name: "MouseEventHandler<HTMLDivElement>" },
              },
              onContextMenu: {
                defaultValue: null,
                description: "",
                name: "onContextMenu",
                required: !1,
                type: { name: "MouseEventHandler<HTMLDivElement>" },
              },
              onContextMenuCapture: {
                defaultValue: null,
                description: "",
                name: "onContextMenuCapture",
                required: !1,
                type: { name: "MouseEventHandler<HTMLDivElement>" },
              },
              onDoubleClick: {
                defaultValue: null,
                description: "",
                name: "onDoubleClick",
                required: !1,
                type: { name: "MouseEventHandler<HTMLDivElement>" },
              },
              onDoubleClickCapture: {
                defaultValue: null,
                description: "",
                name: "onDoubleClickCapture",
                required: !1,
                type: { name: "MouseEventHandler<HTMLDivElement>" },
              },
              onDrag: {
                defaultValue: null,
                description: "",
                name: "onDrag",
                required: !1,
                type: { name: "DragEventHandler<HTMLDivElement>" },
              },
              onDragCapture: {
                defaultValue: null,
                description: "",
                name: "onDragCapture",
                required: !1,
                type: { name: "DragEventHandler<HTMLDivElement>" },
              },
              onDragEnd: {
                defaultValue: null,
                description: "",
                name: "onDragEnd",
                required: !1,
                type: { name: "DragEventHandler<HTMLDivElement>" },
              },
              onDragEndCapture: {
                defaultValue: null,
                description: "",
                name: "onDragEndCapture",
                required: !1,
                type: { name: "DragEventHandler<HTMLDivElement>" },
              },
              onDragEnter: {
                defaultValue: null,
                description: "",
                name: "onDragEnter",
                required: !1,
                type: { name: "DragEventHandler<HTMLDivElement>" },
              },
              onDragEnterCapture: {
                defaultValue: null,
                description: "",
                name: "onDragEnterCapture",
                required: !1,
                type: { name: "DragEventHandler<HTMLDivElement>" },
              },
              onDragExit: {
                defaultValue: null,
                description: "",
                name: "onDragExit",
                required: !1,
                type: { name: "DragEventHandler<HTMLDivElement>" },
              },
              onDragExitCapture: {
                defaultValue: null,
                description: "",
                name: "onDragExitCapture",
                required: !1,
                type: { name: "DragEventHandler<HTMLDivElement>" },
              },
              onDragLeave: {
                defaultValue: null,
                description: "",
                name: "onDragLeave",
                required: !1,
                type: { name: "DragEventHandler<HTMLDivElement>" },
              },
              onDragLeaveCapture: {
                defaultValue: null,
                description: "",
                name: "onDragLeaveCapture",
                required: !1,
                type: { name: "DragEventHandler<HTMLDivElement>" },
              },
              onDragOver: {
                defaultValue: null,
                description: "",
                name: "onDragOver",
                required: !1,
                type: { name: "DragEventHandler<HTMLDivElement>" },
              },
              onDragOverCapture: {
                defaultValue: null,
                description: "",
                name: "onDragOverCapture",
                required: !1,
                type: { name: "DragEventHandler<HTMLDivElement>" },
              },
              onDragStart: {
                defaultValue: null,
                description: "",
                name: "onDragStart",
                required: !1,
                type: { name: "DragEventHandler<HTMLDivElement>" },
              },
              onDragStartCapture: {
                defaultValue: null,
                description: "",
                name: "onDragStartCapture",
                required: !1,
                type: { name: "DragEventHandler<HTMLDivElement>" },
              },
              onDrop: {
                defaultValue: null,
                description: "",
                name: "onDrop",
                required: !1,
                type: { name: "DragEventHandler<HTMLDivElement>" },
              },
              onDropCapture: {
                defaultValue: null,
                description: "",
                name: "onDropCapture",
                required: !1,
                type: { name: "DragEventHandler<HTMLDivElement>" },
              },
              onMouseDown: {
                defaultValue: null,
                description: "",
                name: "onMouseDown",
                required: !1,
                type: { name: "MouseEventHandler<HTMLDivElement>" },
              },
              onMouseDownCapture: {
                defaultValue: null,
                description: "",
                name: "onMouseDownCapture",
                required: !1,
                type: { name: "MouseEventHandler<HTMLDivElement>" },
              },
              onMouseEnter: {
                defaultValue: null,
                description: "",
                name: "onMouseEnter",
                required: !1,
                type: { name: "MouseEventHandler<HTMLDivElement>" },
              },
              onMouseLeave: {
                defaultValue: null,
                description: "",
                name: "onMouseLeave",
                required: !1,
                type: { name: "MouseEventHandler<HTMLDivElement>" },
              },
              onMouseMove: {
                defaultValue: null,
                description: "",
                name: "onMouseMove",
                required: !1,
                type: { name: "MouseEventHandler<HTMLDivElement>" },
              },
              onMouseMoveCapture: {
                defaultValue: null,
                description: "",
                name: "onMouseMoveCapture",
                required: !1,
                type: { name: "MouseEventHandler<HTMLDivElement>" },
              },
              onMouseOut: {
                defaultValue: null,
                description: "",
                name: "onMouseOut",
                required: !1,
                type: { name: "MouseEventHandler<HTMLDivElement>" },
              },
              onMouseOutCapture: {
                defaultValue: null,
                description: "",
                name: "onMouseOutCapture",
                required: !1,
                type: { name: "MouseEventHandler<HTMLDivElement>" },
              },
              onMouseOver: {
                defaultValue: null,
                description: "",
                name: "onMouseOver",
                required: !1,
                type: { name: "MouseEventHandler<HTMLDivElement>" },
              },
              onMouseOverCapture: {
                defaultValue: null,
                description: "",
                name: "onMouseOverCapture",
                required: !1,
                type: { name: "MouseEventHandler<HTMLDivElement>" },
              },
              onMouseUp: {
                defaultValue: null,
                description: "",
                name: "onMouseUp",
                required: !1,
                type: { name: "MouseEventHandler<HTMLDivElement>" },
              },
              onMouseUpCapture: {
                defaultValue: null,
                description: "",
                name: "onMouseUpCapture",
                required: !1,
                type: { name: "MouseEventHandler<HTMLDivElement>" },
              },
              onSelect: {
                defaultValue: null,
                description: "",
                name: "onSelect",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onSelectCapture: {
                defaultValue: null,
                description: "",
                name: "onSelectCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLDivElement>" },
              },
              onTouchCancel: {
                defaultValue: null,
                description: "",
                name: "onTouchCancel",
                required: !1,
                type: { name: "TouchEventHandler<HTMLDivElement>" },
              },
              onTouchCancelCapture: {
                defaultValue: null,
                description: "",
                name: "onTouchCancelCapture",
                required: !1,
                type: { name: "TouchEventHandler<HTMLDivElement>" },
              },
              onTouchEnd: {
                defaultValue: null,
                description: "",
                name: "onTouchEnd",
                required: !1,
                type: { name: "TouchEventHandler<HTMLDivElement>" },
              },
              onTouchEndCapture: {
                defaultValue: null,
                description: "",
                name: "onTouchEndCapture",
                required: !1,
                type: { name: "TouchEventHandler<HTMLDivElement>" },
              },
              onTouchMove: {
                defaultValue: null,
                description: "",
                name: "onTouchMove",
                required: !1,
                type: { name: "TouchEventHandler<HTMLDivElement>" },
              },
              onTouchMoveCapture: {
                defaultValue: null,
                description: "",
                name: "onTouchMoveCapture",
                required: !1,
                type: { name: "TouchEventHandler<HTMLDivElement>" },
              },
              onTouchStart: {
                defaultValue: null,
                description: "",
                name: "onTouchStart",
                required: !1,
                type: { name: "TouchEventHandler<HTMLDivElement>" },
              },
              onTouchStartCapture: {
                defaultValue: null,
                description: "",
                name: "onTouchStartCapture",
                required: !1,
                type: { name: "TouchEventHandler<HTMLDivElement>" },
              },
              onPointerDown: {
                defaultValue: null,
                description: "",
                name: "onPointerDown",
                required: !1,
                type: { name: "PointerEventHandler<HTMLDivElement>" },
              },
              onPointerDownCapture: {
                defaultValue: null,
                description: "",
                name: "onPointerDownCapture",
                required: !1,
                type: { name: "PointerEventHandler<HTMLDivElement>" },
              },
              onPointerMove: {
                defaultValue: null,
                description: "",
                name: "onPointerMove",
                required: !1,
                type: { name: "PointerEventHandler<HTMLDivElement>" },
              },
              onPointerMoveCapture: {
                defaultValue: null,
                description: "",
                name: "onPointerMoveCapture",
                required: !1,
                type: { name: "PointerEventHandler<HTMLDivElement>" },
              },
              onPointerUp: {
                defaultValue: null,
                description: "",
                name: "onPointerUp",
                required: !1,
                type: { name: "PointerEventHandler<HTMLDivElement>" },
              },
              onPointerUpCapture: {
                defaultValue: null,
                description: "",
                name: "onPointerUpCapture",
                required: !1,
                type: { name: "PointerEventHandler<HTMLDivElement>" },
              },
              onPointerCancel: {
                defaultValue: null,
                description: "",
                name: "onPointerCancel",
                required: !1,
                type: { name: "PointerEventHandler<HTMLDivElement>" },
              },
              onPointerCancelCapture: {
                defaultValue: null,
                description: "",
                name: "onPointerCancelCapture",
                required: !1,
                type: { name: "PointerEventHandler<HTMLDivElement>" },
              },
              onPointerEnter: {
                defaultValue: null,
                description: "",
                name: "onPointerEnter",
                required: !1,
                type: { name: "PointerEventHandler<HTMLDivElement>" },
              },
              onPointerEnterCapture: {
                defaultValue: null,
                description: "",
                name: "onPointerEnterCapture",
                required: !1,
                type: { name: "PointerEventHandler<HTMLDivElement>" },
              },
              onPointerLeave: {
                defaultValue: null,
                description: "",
                name: "onPointerLeave",
                required: !1,
                type: { name: "PointerEventHandler<HTMLDivElement>" },
              },
              onPointerLeaveCapture: {
                defaultValue: null,
                description: "",
                name: "onPointerLeaveCapture",
                required: !1,
                type: { name: "PointerEventHandler<HTMLDivElement>" },
              },
              onPointerOver: {
                defaultValue: null,
                description: "",
                name: "onPointerOver",
                required: !1,
                type: { name: "PointerEventHandler<HTMLDivElement>" },
              },
              onPointerOverCapture: {
                defaultValue: null,
                description: "",
                name: "onPointerOverCapture",
                required: !1,
                type: { name: "PointerEventHandler<HTMLDivElement>" },
              },
              onPointerOut: {
                defaultValue: null,
                description: "",
                name: "onPointerOut",
                required: !1,
                type: { name: "PointerEventHandler<HTMLDivElement>" },
              },
              onPointerOutCapture: {
                defaultValue: null,
                description: "",
                name: "onPointerOutCapture",
                required: !1,
                type: { name: "PointerEventHandler<HTMLDivElement>" },
              },
              onGotPointerCapture: {
                defaultValue: null,
                description: "",
                name: "onGotPointerCapture",
                required: !1,
                type: { name: "PointerEventHandler<HTMLDivElement>" },
              },
              onGotPointerCaptureCapture: {
                defaultValue: null,
                description: "",
                name: "onGotPointerCaptureCapture",
                required: !1,
                type: { name: "PointerEventHandler<HTMLDivElement>" },
              },
              onLostPointerCapture: {
                defaultValue: null,
                description: "",
                name: "onLostPointerCapture",
                required: !1,
                type: { name: "PointerEventHandler<HTMLDivElement>" },
              },
              onLostPointerCaptureCapture: {
                defaultValue: null,
                description: "",
                name: "onLostPointerCaptureCapture",
                required: !1,
                type: { name: "PointerEventHandler<HTMLDivElement>" },
              },
              onScroll: {
                defaultValue: null,
                description: "",
                name: "onScroll",
                required: !1,
                type: { name: "UIEventHandler<HTMLDivElement>" },
              },
              onScrollCapture: {
                defaultValue: null,
                description: "",
                name: "onScrollCapture",
                required: !1,
                type: { name: "UIEventHandler<HTMLDivElement>" },
              },
              onWheel: {
                defaultValue: null,
                description: "",
                name: "onWheel",
                required: !1,
                type: { name: "WheelEventHandler<HTMLDivElement>" },
              },
              onWheelCapture: {
                defaultValue: null,
                description: "",
                name: "onWheelCapture",
                required: !1,
                type: { name: "WheelEventHandler<HTMLDivElement>" },
              },
              onAnimationStart: {
                defaultValue: null,
                description: "",
                name: "onAnimationStart",
                required: !1,
                type: { name: "AnimationEventHandler<HTMLDivElement>" },
              },
              onAnimationStartCapture: {
                defaultValue: null,
                description: "",
                name: "onAnimationStartCapture",
                required: !1,
                type: { name: "AnimationEventHandler<HTMLDivElement>" },
              },
              onAnimationEnd: {
                defaultValue: null,
                description: "",
                name: "onAnimationEnd",
                required: !1,
                type: { name: "AnimationEventHandler<HTMLDivElement>" },
              },
              onAnimationEndCapture: {
                defaultValue: null,
                description: "",
                name: "onAnimationEndCapture",
                required: !1,
                type: { name: "AnimationEventHandler<HTMLDivElement>" },
              },
              onAnimationIteration: {
                defaultValue: null,
                description: "",
                name: "onAnimationIteration",
                required: !1,
                type: { name: "AnimationEventHandler<HTMLDivElement>" },
              },
              onAnimationIterationCapture: {
                defaultValue: null,
                description: "",
                name: "onAnimationIterationCapture",
                required: !1,
                type: { name: "AnimationEventHandler<HTMLDivElement>" },
              },
              onTransitionEnd: {
                defaultValue: null,
                description: "",
                name: "onTransitionEnd",
                required: !1,
                type: { name: "TransitionEventHandler<HTMLDivElement>" },
              },
              onTransitionEndCapture: {
                defaultValue: null,
                description: "",
                name: "onTransitionEndCapture",
                required: !1,
                type: { name: "TransitionEventHandler<HTMLDivElement>" },
              },
              step: {
                defaultValue: null,
                description: "",
                name: "step",
                required: !1,
                type: { name: "number" },
              },
              max: {
                defaultValue: null,
                description: "",
                name: "max",
                required: !1,
                type: { name: "number" },
              },
              min: {
                defaultValue: null,
                description: "",
                name: "min",
                required: !1,
                type: { name: "number" },
              },
              orientation: {
                defaultValue: null,
                description: "",
                name: "orientation",
                required: !1,
                type: {
                  name: "enum",
                  value: [{ value: '"horizontal"' }, { value: '"vertical"' }],
                },
              },
              inverted: {
                defaultValue: null,
                description: "",
                name: "inverted",
                required: !1,
                type: { name: "boolean" },
              },
              asChild: {
                defaultValue: null,
                description: "",
                name: "asChild",
                required: !1,
                type: { name: "boolean" },
              },
              minStepsBetweenThumbs: {
                defaultValue: null,
                description: "",
                name: "minStepsBetweenThumbs",
                required: !1,
                type: { name: "number" },
              },
              onValueChange: {
                defaultValue: null,
                description: "",
                name: "onValueChange",
                required: !1,
                type: { name: "(value: number[]) => void" },
              },
              onValueCommit: {
                defaultValue: null,
                description: "",
                name: "onValueCommit",
                required: !1,
                type: { name: "(value: number[]) => void" },
              },
              alignItems: {
                defaultValue: null,
                description: "",
                name: "alignItems",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"stretch"' },
                    { value: '"center"' },
                    { value: '"end"' },
                    { value: '"start"' },
                    { value: '"baseline"' },
                  ],
                },
              },
              aspectRatio: {
                defaultValue: null,
                description: "",
                name: "aspectRatio",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"square"' },
                    { value: '"extraWide"' },
                    { value: '"tall"' },
                    { value: '"wide"' },
                  ],
                },
              },
              background: {
                defaultValue: null,
                description: "",
                name: "background",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"inherit"' },
                    { value: '"background"' },
                    { value: '"black"' },
                    { value: '"transparent"' },
                    { value: '"white"' },
                    { value: '"backdrop"' },
                    { value: '"border_active"' },
                    { value: '"border_default"' },
                    { value: '"button_active"' },
                    { value: '"button_default"' },
                    { value: '"button_tint"' },
                    { value: '"focus_ring"' },
                    { value: '"shadow"' },
                    { value: '"text_high_contrast"' },
                    { value: '"text_low_contrast"' },
                    { value: '"tint_active"' },
                    { value: '"tint_default"' },
                  ],
                },
              },
              border: {
                defaultValue: null,
                description: "",
                name: "border",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"border_active"' },
                    { value: '"border_default"' },
                  ],
                },
              },
              borderBottom: {
                defaultValue: null,
                description: "",
                name: "borderBottom",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"border_active"' },
                    { value: '"border_default"' },
                  ],
                },
              },
              borderLeft: {
                defaultValue: null,
                description: "",
                name: "borderLeft",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"border_active"' },
                    { value: '"border_default"' },
                  ],
                },
              },
              borderRadius: {
                defaultValue: null,
                description: "",
                name: "borderRadius",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"50%"' },
                    { value: '"lg"' },
                    { value: '"md"' },
                    { value: '"pill"' },
                    { value: '"sm"' },
                  ],
                },
              },
              borderRight: {
                defaultValue: null,
                description: "",
                name: "borderRight",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"border_active"' },
                    { value: '"border_default"' },
                  ],
                },
              },
              borderTop: {
                defaultValue: null,
                description: "",
                name: "borderTop",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"border_active"' },
                    { value: '"border_default"' },
                  ],
                },
              },
              bottom: {
                defaultValue: null,
                description: "",
                name: "bottom",
                required: !1,
                type: { name: '"0"' },
              },
              boxShadow: {
                defaultValue: null,
                description: "",
                name: "boxShadow",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"lg"' },
                    { value: '"md"' },
                    { value: '"sm"' },
                  ],
                },
              },
              color: {
                defaultValue: null,
                description: "",
                name: "color",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"inherit"' },
                    { value: '"background"' },
                    { value: '"black"' },
                    { value: '"white"' },
                    { value: '"currentColor"' },
                    { value: '"backdrop"' },
                    { value: '"border_active"' },
                    { value: '"border_default"' },
                    { value: '"button_active"' },
                    { value: '"button_default"' },
                    { value: '"button_tint"' },
                    { value: '"focus_ring"' },
                    { value: '"shadow"' },
                    { value: '"text_high_contrast"' },
                    { value: '"text_low_contrast"' },
                    { value: '"tint_active"' },
                    { value: '"tint_default"' },
                  ],
                },
              },
              flex: {
                defaultValue: null,
                description: "",
                name: "flex",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"0 1 auto"' },
                    { value: '"1 1 auto"' },
                    { value: '"1 1 0%"' },
                    { value: '"1 1 100%"' },
                  ],
                },
              },
              flexGrow: {
                defaultValue: null,
                description: "",
                name: "flexGrow",
                required: !1,
                type: {
                  name: "enum",
                  value: [{ value: '"0"' }, { value: '"1"' }],
                },
              },
              flexShrink: {
                defaultValue: null,
                description: "",
                name: "flexShrink",
                required: !1,
                type: {
                  name: "enum",
                  value: [{ value: '"0"' }, { value: '"1"' }],
                },
              },
              flexWrap: {
                defaultValue: null,
                description: "",
                name: "flexWrap",
                required: !1,
                type: {
                  name: "enum",
                  value: [{ value: '"nowrap"' }, { value: '"wrap"' }],
                },
              },
              fontSize: {
                defaultValue: null,
                description: "",
                name: "fontSize",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"h1"' },
                    { value: '"h2"' },
                    { value: '"h3"' },
                    { value: '"h4"' },
                    { value: '"h5"' },
                    { value: '"h6"' },
                    { value: '"body_lg"' },
                    { value: '"body_md"' },
                    { value: '"body_sm"' },
                    { value: '"body_xl"' },
                    { value: '"body_xs"' },
                    { value: '"h0"' },
                    { value: '"root"' },
                  ],
                },
              },
              fontWeight: {
                defaultValue: null,
                description: "",
                name: "fontWeight",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"normal"' },
                    { value: '"bold"' },
                    { value: '"medium"' },
                    { value: '"light"' },
                    { value: '"extrabold"' },
                    { value: '"semibold"' },
                  ],
                },
              },
              height: {
                defaultValue: null,
                description: "",
                name: "height",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '""' },
                    { value: '"none"' },
                    { value: '"auto"' },
                    { value: '"min-content"' },
                    { value: '"50%"' },
                    { value: '"100%"' },
                    { value: '"100vh"' },
                    { value: '"25%"' },
                    { value: '"25vh"' },
                    { value: '"50vh"' },
                    { value: '"75%"' },
                    { value: '"75vh"' },
                    { value: '"90vh"' },
                    { value: '"spacing_0.25"' },
                    { value: '"spacing_0.5"' },
                    { value: '"spacing_1"' },
                    { value: '"spacing_1.5"' },
                    { value: '"spacing_2"' },
                    { value: '"spacing_3"' },
                    { value: '"spacing_4"' },
                    { value: '"spacing_5"' },
                    { value: '"spacing_6"' },
                  ],
                },
              },
              inset: {
                defaultValue: null,
                description: "",
                name: "inset",
                required: !1,
                type: { name: '"0"' },
              },
              isolation: {
                defaultValue: null,
                description: "",
                name: "isolation",
                required: !1,
                type: { name: '"isolate"' },
              },
              justifyContent: {
                defaultValue: null,
                description: "",
                name: "justifyContent",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"space-around"' },
                    { value: '"space-between"' },
                    { value: '"stretch"' },
                    { value: '"center"' },
                    { value: '"end"' },
                    { value: '"start"' },
                  ],
                },
              },
              left: {
                defaultValue: null,
                description: "",
                name: "left",
                required: !1,
                type: { name: '"0"' },
              },
              lineHeight: {
                defaultValue: null,
                description: "",
                name: "lineHeight",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"h1"' },
                    { value: '"h2"' },
                    { value: '"h3"' },
                    { value: '"h4"' },
                    { value: '"h5"' },
                    { value: '"h6"' },
                    { value: '"body_lg"' },
                    { value: '"body_md"' },
                    { value: '"body_sm"' },
                    { value: '"body_xl"' },
                    { value: '"body_xs"' },
                    { value: '"h0"' },
                    { value: '"root"' },
                  ],
                },
              },
              margin: {
                defaultValue: null,
                description: "",
                name: "margin",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"none"' },
                    { value: '"auto"' },
                    { value: '"spacing_0.25"' },
                    { value: '"spacing_0.5"' },
                    { value: '"spacing_1"' },
                    { value: '"spacing_1.5"' },
                    { value: '"spacing_2"' },
                    { value: '"spacing_3"' },
                    { value: '"spacing_4"' },
                    { value: '"spacing_5"' },
                    { value: '"spacing_6"' },
                  ],
                },
              },
              marginBottom: {
                defaultValue: null,
                description: "",
                name: "marginBottom",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"none"' },
                    { value: '"auto"' },
                    { value: '"spacing_0.25"' },
                    { value: '"spacing_0.5"' },
                    { value: '"spacing_1"' },
                    { value: '"spacing_1.5"' },
                    { value: '"spacing_2"' },
                    { value: '"spacing_3"' },
                    { value: '"spacing_4"' },
                    { value: '"spacing_5"' },
                    { value: '"spacing_6"' },
                  ],
                },
              },
              marginLeft: {
                defaultValue: null,
                description: "",
                name: "marginLeft",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"none"' },
                    { value: '"auto"' },
                    { value: '"spacing_0.25"' },
                    { value: '"spacing_0.5"' },
                    { value: '"spacing_1"' },
                    { value: '"spacing_1.5"' },
                    { value: '"spacing_2"' },
                    { value: '"spacing_3"' },
                    { value: '"spacing_4"' },
                    { value: '"spacing_5"' },
                    { value: '"spacing_6"' },
                  ],
                },
              },
              marginRight: {
                defaultValue: null,
                description: "",
                name: "marginRight",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"none"' },
                    { value: '"auto"' },
                    { value: '"spacing_0.25"' },
                    { value: '"spacing_0.5"' },
                    { value: '"spacing_1"' },
                    { value: '"spacing_1.5"' },
                    { value: '"spacing_2"' },
                    { value: '"spacing_3"' },
                    { value: '"spacing_4"' },
                    { value: '"spacing_5"' },
                    { value: '"spacing_6"' },
                  ],
                },
              },
              marginTop: {
                defaultValue: null,
                description: "",
                name: "marginTop",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"none"' },
                    { value: '"auto"' },
                    { value: '"spacing_0.25"' },
                    { value: '"spacing_0.5"' },
                    { value: '"spacing_1"' },
                    { value: '"spacing_1.5"' },
                    { value: '"spacing_2"' },
                    { value: '"spacing_3"' },
                    { value: '"spacing_4"' },
                    { value: '"spacing_5"' },
                    { value: '"spacing_6"' },
                  ],
                },
              },
              maxHeight: {
                defaultValue: null,
                description: "",
                name: "maxHeight",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '""' },
                    { value: '"none"' },
                    { value: '"auto"' },
                    { value: '"min-content"' },
                    { value: '"50%"' },
                    { value: '"100%"' },
                    { value: '"100vh"' },
                    { value: '"25%"' },
                    { value: '"25vh"' },
                    { value: '"50vh"' },
                    { value: '"75%"' },
                    { value: '"75vh"' },
                    { value: '"90vh"' },
                    { value: '"spacing_0.25"' },
                    { value: '"spacing_0.5"' },
                    { value: '"spacing_1"' },
                    { value: '"spacing_1.5"' },
                    { value: '"spacing_2"' },
                    { value: '"spacing_3"' },
                    { value: '"spacing_4"' },
                    { value: '"spacing_5"' },
                    { value: '"spacing_6"' },
                  ],
                },
              },
              maxWidth: {
                defaultValue: null,
                description: "",
                name: "maxWidth",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '""' },
                    { value: '"none"' },
                    { value: '"auto"' },
                    { value: '"max-content"' },
                    { value: '"min-content"' },
                    { value: '"50%"' },
                    { value: '"100%"' },
                    { value: '"25%"' },
                    { value: '"spacing_0.25"' },
                    { value: '"spacing_0.5"' },
                    { value: '"spacing_1"' },
                    { value: '"spacing_1.5"' },
                    { value: '"spacing_2"' },
                    { value: '"spacing_3"' },
                    { value: '"spacing_4"' },
                    { value: '"spacing_5"' },
                    { value: '"spacing_6"' },
                    { value: '"col_1"' },
                    { value: '"col_10"' },
                    { value: '"col_11"' },
                    { value: '"col_12"' },
                    { value: '"col_2"' },
                    { value: '"col_3"' },
                    { value: '"col_4"' },
                    { value: '"col_5"' },
                    { value: '"col_6"' },
                    { value: '"col_7"' },
                    { value: '"col_8"' },
                    { value: '"col_9"' },
                  ],
                },
              },
              minHeight: {
                defaultValue: null,
                description: "",
                name: "minHeight",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '""' },
                    { value: '"none"' },
                    { value: '"auto"' },
                    { value: '"min-content"' },
                    { value: '"50%"' },
                    { value: '"100%"' },
                    { value: '"100vh"' },
                    { value: '"25%"' },
                    { value: '"25vh"' },
                    { value: '"50vh"' },
                    { value: '"75%"' },
                    { value: '"75vh"' },
                    { value: '"90vh"' },
                    { value: '"spacing_0.25"' },
                    { value: '"spacing_0.5"' },
                    { value: '"spacing_1"' },
                    { value: '"spacing_1.5"' },
                    { value: '"spacing_2"' },
                    { value: '"spacing_3"' },
                    { value: '"spacing_4"' },
                    { value: '"spacing_5"' },
                    { value: '"spacing_6"' },
                  ],
                },
              },
              minWidth: {
                defaultValue: null,
                description: "",
                name: "minWidth",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '""' },
                    { value: '"none"' },
                    { value: '"auto"' },
                    { value: '"max-content"' },
                    { value: '"min-content"' },
                    { value: '"50%"' },
                    { value: '"100%"' },
                    { value: '"25%"' },
                    { value: '"spacing_0.25"' },
                    { value: '"spacing_0.5"' },
                    { value: '"spacing_1"' },
                    { value: '"spacing_1.5"' },
                    { value: '"spacing_2"' },
                    { value: '"spacing_3"' },
                    { value: '"spacing_4"' },
                    { value: '"spacing_5"' },
                    { value: '"spacing_6"' },
                    { value: '"col_1"' },
                    { value: '"col_10"' },
                    { value: '"col_11"' },
                    { value: '"col_12"' },
                    { value: '"col_2"' },
                    { value: '"col_3"' },
                    { value: '"col_4"' },
                    { value: '"col_5"' },
                    { value: '"col_6"' },
                    { value: '"col_7"' },
                    { value: '"col_8"' },
                    { value: '"col_9"' },
                  ],
                },
              },
              overflow: {
                defaultValue: null,
                description: "",
                name: "overflow",
                required: !1,
                type: { name: '"hidden"' },
              },
              overflowY: {
                defaultValue: null,
                description: "",
                name: "overflowY",
                required: !1,
                type: { name: '"auto"' },
              },
              right: {
                defaultValue: null,
                description: "",
                name: "right",
                required: !1,
                type: { name: '"0"' },
              },
              textAlign: {
                defaultValue: null,
                description: "",
                name: "textAlign",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"left"' },
                    { value: '"right"' },
                    { value: '"center"' },
                  ],
                },
              },
              textDecoration: {
                defaultValue: null,
                description: "",
                name: "textDecoration",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"none"' },
                    { value: '"line-through"' },
                    { value: '"underline"' },
                  ],
                },
              },
              textTransform: {
                defaultValue: null,
                description: "",
                name: "textTransform",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"capitalize"' },
                    { value: '"lowercase"' },
                    { value: '"uppercase"' },
                  ],
                },
              },
              top: {
                defaultValue: null,
                description: "",
                name: "top",
                required: !1,
                type: { name: '"0"' },
              },
              whiteSpace: {
                defaultValue: null,
                description: "",
                name: "whiteSpace",
                required: !1,
                type: {
                  name: "enum",
                  value: [{ value: '"normal"' }, { value: '"nowrap"' }],
                },
              },
              zIndex: {
                defaultValue: null,
                description: "",
                name: "zIndex",
                required: !1,
                type: {
                  name: "enum",
                  value: [{ value: '"1"' }, { value: '"-1"' }],
                },
              },
              fontStyle: {
                defaultValue: null,
                description: "",
                name: "fontStyle",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"h1"' },
                    { value: '"h2"' },
                    { value: '"h3"' },
                    { value: '"h4"' },
                    { value: '"h5"' },
                    { value: '"h6"' },
                    { value: '"body_lg"' },
                    { value: '"body_md"' },
                    { value: '"body_sm"' },
                    { value: '"body_xl"' },
                    { value: '"body_xs"' },
                    { value: '"h0"' },
                    { value: '"root"' },
                  ],
                },
              },
              marginX: {
                defaultValue: null,
                description: "",
                name: "marginX",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"none"' },
                    { value: '"auto"' },
                    { value: '"spacing_0.25"' },
                    { value: '"spacing_0.5"' },
                    { value: '"spacing_1"' },
                    { value: '"spacing_1.5"' },
                    { value: '"spacing_2"' },
                    { value: '"spacing_3"' },
                    { value: '"spacing_4"' },
                    { value: '"spacing_5"' },
                    { value: '"spacing_6"' },
                  ],
                },
              },
              marginY: {
                defaultValue: null,
                description: "",
                name: "marginY",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"none"' },
                    { value: '"auto"' },
                    { value: '"spacing_0.25"' },
                    { value: '"spacing_0.5"' },
                    { value: '"spacing_1"' },
                    { value: '"spacing_1.5"' },
                    { value: '"spacing_2"' },
                    { value: '"spacing_3"' },
                    { value: '"spacing_4"' },
                    { value: '"spacing_5"' },
                    { value: '"spacing_6"' },
                  ],
                },
              },
              placeItems: {
                defaultValue: null,
                description: "",
                name: "placeItems",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"stretch"' },
                    { value: '"center"' },
                    { value: '"end"' },
                    { value: '"start"' },
                  ],
                },
              },
              display: {
                defaultValue: null,
                description: "",
                name: "display",
                required: !1,
                type: {
                  name: 'ConditionalStyle<Values<MapLeafNodes<{ block: string; flex: string; grid: string; inline: string; "inline-block": string; "inline-flex": string; none: string; table: string; "table-cell": string; }, CSSVarFunction>, { ...; }>>',
                },
              },
              flexDirection: {
                defaultValue: null,
                description: "",
                name: "flexDirection",
                required: !1,
                type: {
                  name: 'ConditionalStyle<Values<("column" | "column-reverse" | "row" | "row-reverse")[], { defaultClass: string; conditions: { mobile: string; tablet: string; desktop: string; }; }>>',
                },
              },
              gap: {
                defaultValue: null,
                description: "",
                name: "gap",
                required: !1,
                type: {
                  name: 'ConditionalStyle<Values<MapLeafNodes<{ auto: string; none: string; "spacing_0.25": string; "spacing_0.5": string; spacing_1: string; "spacing_1.5": string; spacing_2: string; spacing_3: string; spacing_4: string; spacing_5: string; spacing_6: string; }, CSSVarFunction>, { ...; }>>',
                },
              },
              gridTemplateColumns: {
                defaultValue: null,
                description: "",
                name: "gridTemplateColumns",
                required: !1,
                type: {
                  name: 'ConditionalStyle<Values<MapLeafNodes<{ "1_2": string; "1_3": string; "1x": string; "2_1": string; "2x": string; "3_1": string; "3x": string; "4x": string; "5_7": string; "5x": string; "6x": string; "7_5": string; "7x": string; }, CSSVarFunction>, { ...; }>>',
                },
              },
              padding: {
                defaultValue: null,
                description: "",
                name: "padding",
                required: !1,
                type: {
                  name: 'ConditionalStyle<Values<MapLeafNodes<{ auto: string; none: string; "spacing_0.25": string; "spacing_0.5": string; spacing_1: string; "spacing_1.5": string; spacing_2: string; spacing_3: string; spacing_4: string; spacing_5: string; spacing_6: string; }, CSSVarFunction>, { ...; }>>',
                },
              },
              paddingBottom: {
                defaultValue: null,
                description: "",
                name: "paddingBottom",
                required: !1,
                type: {
                  name: 'ConditionalStyle<Values<MapLeafNodes<{ auto: string; none: string; "spacing_0.25": string; "spacing_0.5": string; spacing_1: string; "spacing_1.5": string; spacing_2: string; spacing_3: string; spacing_4: string; spacing_5: string; spacing_6: string; }, CSSVarFunction>, { ...; }>>',
                },
              },
              paddingLeft: {
                defaultValue: null,
                description: "",
                name: "paddingLeft",
                required: !1,
                type: {
                  name: 'ConditionalStyle<Values<MapLeafNodes<{ auto: string; none: string; "spacing_0.25": string; "spacing_0.5": string; spacing_1: string; "spacing_1.5": string; spacing_2: string; spacing_3: string; spacing_4: string; spacing_5: string; spacing_6: string; }, CSSVarFunction>, { ...; }>>',
                },
              },
              paddingRight: {
                defaultValue: null,
                description: "",
                name: "paddingRight",
                required: !1,
                type: {
                  name: 'ConditionalStyle<Values<MapLeafNodes<{ auto: string; none: string; "spacing_0.25": string; "spacing_0.5": string; spacing_1: string; "spacing_1.5": string; spacing_2: string; spacing_3: string; spacing_4: string; spacing_5: string; spacing_6: string; }, CSSVarFunction>, { ...; }>>',
                },
              },
              paddingTop: {
                defaultValue: null,
                description: "",
                name: "paddingTop",
                required: !1,
                type: {
                  name: 'ConditionalStyle<Values<MapLeafNodes<{ auto: string; none: string; "spacing_0.25": string; "spacing_0.5": string; spacing_1: string; "spacing_1.5": string; spacing_2: string; spacing_3: string; spacing_4: string; spacing_5: string; spacing_6: string; }, CSSVarFunction>, { ...; }>>',
                },
              },
              position: {
                defaultValue: null,
                description: "",
                name: "position",
                required: !1,
                type: {
                  name: 'ConditionalStyle<Values<("absolute" | "relative" | "sticky")[], { defaultClass: string; conditions: { mobile: string; tablet: string; desktop: string; }; }>>',
                },
              },
              width: {
                defaultValue: null,
                description: "",
                name: "width",
                required: !1,
                type: {
                  name: 'ConditionalStyle<Values<{ auto: CSSVarFunction; none: CSSVarFunction; "spacing_0.25": CSSVarFunction; "spacing_0.5": CSSVarFunction; spacing_1: CSSVarFunction; ... 23 more ...; "min-content": CSSVarFunction; }, { ...; }>>',
                },
              },
              paddingX: {
                defaultValue: null,
                description: "",
                name: "paddingX",
                required: !1,
                type: {
                  name: 'ConditionalStyle<Values<MapLeafNodes<{ auto: string; none: string; "spacing_0.25": string; "spacing_0.5": string; spacing_1: string; "spacing_1.5": string; spacing_2: string; spacing_3: string; spacing_4: string; spacing_5: string; spacing_6: string; }, CSSVarFunction>, { ...; }>>',
                },
              },
              paddingY: {
                defaultValue: null,
                description: "",
                name: "paddingY",
                required: !1,
                type: {
                  name: 'ConditionalStyle<Values<MapLeafNodes<{ auto: string; none: string; "spacing_0.25": string; "spacing_0.5": string; spacing_1: string; "spacing_1.5": string; spacing_2: string; spacing_3: string; spacing_4: string; spacing_5: string; spacing_6: string; }, CSSVarFunction>, { ...; }>>',
                },
              },
              labelProps: {
                defaultValue: null,
                description: "",
                name: "labelProps",
                required: !1,
                type: { name: "LabelProps" },
              },
              wrapperProps: {
                defaultValue: null,
                description: "",
                name: "wrapperProps",
                required: !1,
                type: { name: "BoxProps" },
              },
              label: {
                defaultValue: null,
                description: "",
                name: "label",
                required: !1,
                type: { name: "string" },
              },
              autoComplete: {
                defaultValue: null,
                description: "",
                name: "autoComplete",
                required: !1,
                type: { name: "string" },
              },
              errorMessage: {
                defaultValue: null,
                description:
                  "Message shown when `invalid=true`. May originate from controlling library, like `react-hook-form`",
                name: "errorMessage",
                required: !1,
                type: { name: "string" },
              },
              invalid: {
                defaultValue: null,
                description:
                  "Allow controlling components to set error styles, `aria-invalid` prop and display error message.",
                name: "invalid",
                required: !1,
                type: { name: "boolean" },
              },
              labelTooltip: {
                defaultValue: null,
                description: "Optional tooltip for label",
                name: "labelTooltip",
                required: !1,
                type: { name: "string" },
              },
              required: {
                defaultValue: null,
                description:
                  "Controls `aria-required` and input `required` attributes.",
                name: "required",
                required: !1,
                type: { name: "boolean" },
              },
              size: {
                defaultValue: null,
                description:
                  "Common interactive element size, shared with button, select, etc",
                name: "size",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"lg"' },
                    { value: '"md"' },
                    { value: '"sm"' },
                  ],
                },
              },
              slotLeft: {
                defaultValue: null,
                description: "React node shown on the left side of input.",
                name: "slotLeft",
                required: !1,
                type: { name: "ReactNode" },
              },
              slotRight: {
                defaultValue: null,
                description: "React node shown on the right side of input.",
                name: "slotRight",
                required: !1,
                type: { name: "ReactNode" },
              },
              type: {
                defaultValue: null,
                description: "",
                name: "type",
                required: !1,
                type: { name: "HTMLInputTypeAttribute" },
              },
              ref: {
                defaultValue: null,
                description:
                  "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
                name: "ref",
                required: !1,
                type: { name: "Ref<HTMLSpanElement>" },
              },
            },
          }),
          "undefined" != typeof STORYBOOK_REACT_CLASSES &&
            (STORYBOOK_REACT_CLASSES[
              "src/components/slider/slider.comp.tsx#Slider"
            ] = {
              docgenInfo: Slider.__docgenInfo,
              name: "Slider",
              path: "src/components/slider/slider.comp.tsx#Slider",
            });
      } catch (__react_docgen_typescript_loader_error) {}
    },
    "./src/components/text_area/text_area.comp.tsx": (
      __unused_webpack_module,
      __webpack_exports__,
      __webpack_require__
    ) => {
      "use strict";
      __webpack_require__.d(__webpack_exports__, { K: () => TextArea });
      var dessert_box_core_esm = __webpack_require__(
          "./node_modules/@dessert-box/core/dist/dessert-box-core.esm.js"
        ),
        clsx_m = __webpack_require__("./node_modules/clsx/dist/clsx.m.js"),
        react = __webpack_require__("./node_modules/react/index.js"),
        a11y_css = __webpack_require__("./src/styles/common/a11y.css.ts"),
        theme_css = __webpack_require__("./src/styles/theme.css.ts"),
        get_sprinkles_css = __webpack_require__(
          "./src/styles/utils/get_sprinkles.css.ts"
        ),
        box_comp = __webpack_require__("./src/components/box/box.comp.tsx"),
        input_error_message_comp = __webpack_require__(
          "./src/components/input_error_message/input_error_message.comp.tsx"
        ),
        label_comp = __webpack_require__(
          "./src/components/label/label.comp.tsx"
        ),
        slot_wrapper_comp = __webpack_require__(
          "./src/components/slot_wrapper/slot_wrapper.comp.tsx"
        ),
        injectStylesIntoStyleTag =
          (__webpack_require__(
            'src/styles/layers.css.ts.vanilla.css!=!./node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{"fileName":"src/styles/layers.css.ts.vanilla.css","source":"QGxheWVyIHJlc2V0OwpAbGF5ZXIgYmFzZTsKQGxheWVyIGJhc2VPdmVycmlkZXM7CkBsYXllciB0aGVtZTsKQGxheWVyIHZhcnM7CkBsYXllciBzcHJpbmtsZXM7"}!./node_modules/@vanilla-extract/webpack-plugin/extracted.js'
          ),
          __webpack_require__(
            'src/styles/color_palette.css.ts.vanilla.css!=!./node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{"fileName":"src/styles/color_palette.css.ts.vanilla.css","source":"#H4sIAAAAAAAAA62WTW7bMBCF9z4FNwVSwBFIkcMfZ5ObFLbs1E1TuHCzSFH47h0ORUWRxhYjeyPBwGcO3/DpcR5f1n93R/G63/3aPSxWx8PhdSlWq826+bk9Hn6Lfwsh7u+/KX2EN/ckV2L/52V9V0u7FMFV8stSmMrjU1YQ9NeHD7QiOsFaEhw80gOs7mG1SRg+B5TOFCyFkpVDyvkxZjLmEFOVQsxDFYYYtFiNNQGSDhivZnuYSwqQhiHmMmawmqOioR6v5vurQWWiBDNeLeQmq9jkpAEVB+qyDGGAr4vat+lRNunV49JNpjx1LzaZNjDAthkLiOlKRwzwNcB258//tHjsGY9cVuW/PdHPz9qOMZ4O3amFriWlzmO8p4HMVCcXqDHXmk/jct7SuVnHca37tIwHG6tqw5W17zISBo7DWveZOmNe5Y+Mcd+kiCL7sQbEhVO3FbvPTZnqpkxO60FjMhaiX0fYBQ8Kcerb7vutbEd4u6eAjb7WdsRhE+IJ2O4zY0MPP1vn8LPGl82hx8WeUnmHmALMDu1ICcgL1qMgCClGg+RM5UulzHbfuyQFF9w3Kb0plfQhBNNp25yo8xy4v5UDVUwg6GoxRvikBRVg14xMqWEuRJ8yUaUnC1p2RcgrakrHWLn2XN9sr3S+ohUHulxa0ZnGS8tbrrQvFTPXhAqAViYXsuG2KVXflIra5iMP1KYoKpjrfPjjpkk4qnVVFHLTX/H8x0UhNxCdi8LEgeU800UhNzqxUTglZf5FPNHMS7Ng8TRYPA/O8+DzzYZACL3b2NxgCAwUbZCm9/O3MYFI1GmEYWaTPAaCp9uQBHkOtD3QJRDYPbo8gEq6tep0Yoz7famYuSbUYLorCKPQnh8HJ9U3paK2PbC7kZnQmXDh6T9aPKtJFA8AAA=="}!./node_modules/@vanilla-extract/webpack-plugin/extracted.js'
          ),
          __webpack_require__(
            'src/styles/vars.css.ts.vanilla.css!=!./node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{"fileName":"src/styles/vars.css.ts.vanilla.css","source":"#H4sIAAAAAAAAA3WVTY/TMBCG7/wKqxLSIiUhtvNpTgsCwYHTas8obd02W+ejTrZ0F/HfGbfdoIynufV5ZyaTpO9rZbtuZH/eMRaGv/i+NIcyixXjMfvI5KcZ5oCB8jkVipWOZnMsoTgDXs5xArg/saEz9ZodK3vnJGnTU76RH+al6e3SBJVmiqXx+znL3QL9aQ4LxQrMSngAd2FeKZZgtlQsdhOYAInZ7bK640kc8KQMeFoGcSTQZivXIKE2o+t5ihrWrsE9d3wplzyQaQA9cRTjx9aKLU232s/pRrGN0WjxrWJbW6/ncKdY3Zq61XNcv+GQmP40if5N9oq1HZ5mFBurpUG0udJwpY2ZS61iYdX3oA0vw6ib4DPcbv+zWj2cf37r2jFYPOhtp9njj0XwXZujHutVFdzbujLBULVDOGhbb4LFvRvDvnSms+xr0z3Vi/+dVzC/dwd/moiL1OpmLvQgePAA3yoqcr/aujE+Hlw9UT4qJojyZ8AePNKjfztM7H2i9n65tffrjQV5TJmJQyDkcYwg5EHhQUgD6cHEuRZDcH3iQfB35kFn8I1lYmORUFwE6QnlWUAQbA4jCAG8bnWvq/FOBE5G5uNgbUk2rqdGSTbqSU9IHQycwuDcG7ydGlOycTfpGamDsWGoG46Ep6kxJxvB2PjtG3dG4MzlzZkedwiDpUWKazsHvdKeiHJ+cNArBZfl3tTBQa8UHFb6A8Bg1fPYIQoOa+o2XEHO6HZE4tlnKYInCr5Q8JWAIr54F1F32iIkfCR9lPgo9VHmo9xHBbVvSb02UXn/EeFOSzJNhTsWqbgS7vgj4k3oG8kkNlTAiS2dkmJHRaqo6fwVYAvp0/05jJoBYXMOLg+DIwSBW/9tdZSjRE9YRxwIkwhLfhbwQxHJ64VbwBaFjG6I4I6SR9nl8tQjua2zR/bWk2EVfCKSqLxeWAXDyGkZgVVwTjJtg1+IBAsl5dvkAqtgpXR6CRyr4Kps2jnBKhgsn3bOsQpea6oTnRUyRUHy9x+gyNKTbAsAAA=="}!./node_modules/@vanilla-extract/webpack-plugin/extracted.js'
          ),
          __webpack_require__(
            'src/styles/common/a11y.css.ts.vanilla.css!=!./node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{"fileName":"src/styles/common/a11y.css.ts.vanilla.css","source":"QGxheWVyIHRoZW1lOwpAbGF5ZXIgdGhlbWUgewogIC5yOGhlNXQwIHsKICAgIGJvcmRlci1jb2xvcjogdmFyKC0tXzEzcjV4N2Y2KTsKICB9CiAgLnI4aGU1dDA6aXMoLnI4aGU1dDA6Zm9jdXMsIC5yOGhlNXQwOmZvY3VzLXZpc2libGUpLCAucjhoZTV0MDpmb2N1cy13aXRoaW4gewogICAgYm9yZGVyLWNvbG9yOiB2YXIoLS1fMTNyNXg3ZjYpIDsKICAgIG91dGxpbmU6IDFweCBzb2xpZCB2YXIoLS1fMTNyNXg3ZjgpIDsKICB9CiAgLnI4aGU1dDFbZGlzYWJsZWRdLCAucjhoZTV0MVthcmlhLWRpc2FibGVkPSd0cnVlJ10gewogICAgb3BhY2l0eTogMC4zOwogIH0KICAucjhoZTV0MVtkaXNhYmxlZF06aG92ZXIsIC5yOGhlNXQxW2FyaWEtZGlzYWJsZWQ9J3RydWUnXTpob3ZlciB7CiAgICBjdXJzb3I6IG5vdC1hbGxvd2VkOwogIH0KICAucjhoZTV0Mjpmb2N1czpub3QoOmZvY3VzLXZpc2libGUpIHsKICAgIG91dGxpbmU6IG5vbmU7CiAgfQogIC5yOGhlNXQyOm5vdCg6aXMoW2Rpc2FibGVkXSwgW3JlYWRvbmx5XSkpOmZvY3VzLXZpc2libGUgewogICAgYm9yZGVyLWNvbG9yOiB2YXIoLS1fMTNyNXg3ZjYpIDsKICAgIG91dGxpbmU6IDFweCBzb2xpZCB2YXIoLS1fMTNyNXg3ZjgpIDsKICB9Cn0="}!./node_modules/@vanilla-extract/webpack-plugin/extracted.js'
          ),
          __webpack_require__(
            'src/styles/utils/get_sprinkles.css.ts.vanilla.css!=!./node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{"fileName":"src/styles/utils/get_sprinkles.css.ts.vanilla.css","source":"#H4sIAAAAAAAAA52cS3OrSBKF9/dXaDMRPQtNCBAP3d50xPyQCR4FlCWBDOg50f99ZPviq6wDmclsOrqjzydZrlOZpTpp/jqkd9Ot+lNnm/3B9H/++Jex9i3OksPqvz9Wq8L2p6fk5+qSdn+s1//x9rvD+y4y//zzx9/f0paTlkTacdKKSM+ctCbSGye1r9LdhpO+EWnASfdEGnHSA5HuOOmRSPNPaXkwt3VhO5MPtm1+rrr2+ioqJ0V5ezgfm1ednXuxdWcupuvNq/jAvOiU/ssBVXpyP5C/I5+om9WlRHee1WVEd5vV5a+6dDOrK4gumNURx6fRrI7YPd3N6ojX03xWR4yelrM64vLUzuqIxdOvda46W6wHc3w6cjDrr1XuXdKLCdkuIBNCdgtI4p70vIAkfkpvC0jisGyzgCSey4IFJHFhFi0giS+z3QKSODXLF5DEu1m5gCRuzuwCkvg7W+Jb4vjsy7entChsU/HVKutYLXFYdma11FM3VktclG9YLfFNHrBa4pQ8YrXEG/mO1RI35DmrJeufl6yWrHhuWS1Z4/zwql1n7TC0R36p81aDkBXPOw1CFj4/axC6/jcNQmxQbDQIcUMRaBBiiiLSIMQbxU6DEIsUuQYhTilKDUIMUxBzrQ+mHHi7FAcZIGYpWhkgVik6GSBGKc4yQG1ykwFiErORAWIRE8gAMYiJZIDYw+xkgJjD5DJArGGomzpb1YI3jFUQxBzmoCCIO0yrIIg9TKcgiD/MWUFQg9wUBHFIuVEQxCJloCCIR8pIQRCTlDsFQVxSUlsNrfA9qCxFPXFIaUU98Ud5EPXEHWUr6ok3yk7UE2eUZ1FPfXET9cQV1UbUE09UgagnjqgiUU/8UP1yUNvbX1+zzfOIai+v35mr3NGkWf88wQ5EUzqafrD5/v6q+HLG1RZDDT9TQ36mA6NsibJllCei7BjlO1GeGSXZG9WNUfavynrDKAeiDBjlmSgjRnkhyh2jvBJlzihvRFkyyjtRcuv+IEpm3YMNUTLrHnhEyax74BMls+5BQJTMugfbV6Vl1j0IiZJbd1JhLbfupLZabt1JVbXcupN6arl1J5XUcutOaqjl9jupnpbb76RuWm6/k4ppuf3+VSv/cq6eP4Ff+NcKr1bpwVbN2j6/4/cfxa8zQ17/+fw/f/+WetPStBscoT8lzE0zmM5RBlNK0xSObDsly9LeHGxjHG04avuTyYd19+wGrft7+diMBIoUkOdCsQLyXShRQIEL7X5BWZrvq649N8VvJOjCW1zCJ0pFBD5PJiLwaXIRgc9SiMjWRYyIhC5SikjkIpWIxC5Si0jiIlZEdi7yJiKpi+xFJHORg4jkLnIUkcJFGhExLtJOILapTWfdunOaUA5d2vSntHtWH0f9PqrbrjDdz5V3uq2e50JbSA7ulCD4uCfgzIUJUIOGgg1wptTU9294p4vMwPtcKdOlhT3DzTDstZuGgu1211Cw4x4aCjadt9FgsPE8z8GmvtLCL97zFRT86r2AUhNflvCdtiKD7xN+M1/W27iC6FtwW/d1WrRX90Wh3HixyEC98RKRgYLjjb0zbw9tJ7ZNL+Xk0DK9jJNDu/RyTg6Fxis4Oa6t4eS4rCUnhy3rVZwc9qpXc3LYpJ7l5Lg73zg57so9J0dvHjg52vLIydGRDSeH9ue1VJ6fu49m9u+P/3KlJyqd7pLe2Pg+hg6em3nlrdLz0Lqqjqi8GVUPqs0/XM0AGm+DqvOLav3s3teJOnNBjedqrq+avv74yjPxSrcpFbzW/VV17T5C/o9/urIHypp2QuiPPaVsm2Hd24dxy1frrr7vScgJEF9C3gEJJKQDZCshPSChhAyARBJyBiSWkAsgiYRcAdlJyA2QVELugGQS8gAklxAPmp5fvDJXM3X68KD3+UZBQQv0SwUFndCvFBQ0RL9WUNAXfaugoD36Y0eqp4E9AHseOABw4IEjAEceaABoeACrU8sDWJtOPICV6Z0HsC51PIBVqecBrEkDC/hwWPHP/DtgPbrw7wDnG//KA3DC8W88AGcc/84DcMrxHzwA55xgwwMlAB4PVAD4PFADEPCABWDLA28AjC3RNr0Z8JwSjP3P9u1HrvWRTH39q3vtGYxt7+3cD7a8r/Nn9XqeE+cuc4NkXo83usFuTj19rZvOyfFuN8hmf5BTmpt1+nmR40I5D2VmuBrTuNTY575uNuCXPTa0j1vl9cxmhZNAUCooOAwElYKC80BQKyg4EgRWpnw4FARvCgoOBcFeQcGhIDgoKDgUBEcFBYeCoFFQcCgIWgUFh4LgpKDgq3PwrqDgG3QwNr5j2lW2kdtS0PMAdJlg4AHoMsGZB6DLBBcegC4TXHkAu8yNB7DL3HkAu8yDB6DLbDc8AF1m6/EAdJmtTwBuTpNygYoDo2y3Kg78sg1VHNhmG6k4cM82VnFgom2i4sBL252KA0ttUxWHzspUHBosV3Hos4Jys+OdlDIKCj1WKih0WKWg0F+1gkJ3WQWF3npTUOisvYJCXx0UFLrqqKDQU42CQke1lJqfCqXYSYOhp941GJqq02Doql6Doa0GDYa+OmswNNZFg6GzrhoMrXXTYOituwZDc9FOPTtMSqBwI0NgrNCTIbBV6MsQmCoMZAgsFW5lCAwVhjIEdgojGQIzhbEMgZXCRIbASOFOhsBG4e/ufJv7Tga3f2EmQ3ADGOYyBLeAYSFDcBMYGhmC28CwlCG4EQwrGYJbwbCWIbgZDK0Mwe1g+CZDcEMY7kVoorAc5HeCm8LwKL8TVqNGhrAatTKE1egkQ1iN3mUIq1EnQ1iNehnCajTIEFajswxhNbrIEFaj6ws0P6xOmZvI4Ga/iwzu9YfIwFaPNiIDWynyRAY2euSLDOzzKBAZiCejrcjALo9CkYFrySgSGbiUjGKRgSvJKBEZuJCMdhIT4IRuKjJwGRllIgNXkVEuMnARGRUiA9eQkREZuISMSvF3DcU+qkQGan1UiwyU+siKDFT66E1koNBHe5GBOh8dRAbKfHQUGajyUSMyUOSjVmSgxkffbfV5RtWeOKN3GYITZ9TJEJw4o16GoAdFgwxBE4rOMgRdKLrIELahqwzBiTO6yRA2orsMYSd6iBC2yXgjvxP0otiT3wmKUOzLEFShOJAhKEPxVoagDsWhDEEhiiMZgkoUxzIEpShOZAhqUbyTIShGcSpDUI3i7AVSnjjjXGRgs8eFyMBej43IwFaPS5HBrVSJDGz0uBYZ2OexFRk4ccZvIoO7fC8ycOKMDyIDJ874KDJw4owbkYETZ9xKDJ4445PI4J+EvYsMnDjjTmTgxBn3IgMnzngQGThxxmfxd43F/iIyWOuvIoOl/iYyWOnvIoOF/iEyUOeTjchAmU88kYEqn/giA0U+CUQGanwyttX2Yrry8DF4XduigAmbJHR06/vPqbnxZGyev67q3VGcZOyTg7kN688/+5wZNUqSCeVHuOTqdhO6z3d3hemrsDB52/0avDo3hekm/uI0yeaIpkVxPif+nPYY6q49V+6wVlK8Qp9/0la23fH5K0lPdnh+mAe8jZkhzqeT6fK0B6CcAZ6LOA2MLe/zkhwWcGxu19oOZv05lTUzFZ/YaWl3TA+udGxlj7V9Lsbt52rtzuwne1fyS/H3j7+OprDpqm0O91Wfd8Y0q7QpVn+87IM4Sk63f36+wvh6Y4dins9Jf4ATD2Ct6HkAC8WFB7BK3HkASsTO4wGoD7stD8C30V3MA/BNdJfyAHwL3X0PtU891ZNKqxnp+GxPqn6bf+HfT+ykyJF9gzlqdNLc0z6pumfU0KR3F0YN7Xl3Z9TQmFOPUUNLTreMGnZXGjNq2FppyqhhX6UFo4ZNlVaMGnZU+saoYTulo1/0zwul/GkRD7OEab+IBy+ml0U8uDO9L+LBr9+PqtA/TZTy20U8ePr70RD6J4tSPl3Eg++/H7Kgf8oo5atFPOyN70cW6J84Svll/of98/0kAO7po5ToBQI8+v3X8tyTSClxFwjwYe4JBDgv3woEeC2PBQLclacCAX7KC4EAB+WVQIBn8jeBAJfkR0qo52Lzkw4Ez+S9DgTr5BcdiA6660AwUuHpQPBTsdWBYKsi1oHgriLVgWCyotCB4LWi0oFgucIxqXJEtnCdqpuRLVyf6oZkC9eluinZwvWobky2cB2qm5M1rj91g7LGdaduUta43tSNyhrXmbpZWeP6Ujcsa1xXKqdljWtK5biscV2pnJc1ri2VA7PG9aVyYta4xlSOzBrXmcqZ2dK1pnJotnS9qZyaLV1zKsdmS9edyrnZ0rWnanC2dN2pmpwtXW+qRmdL15mq2dnS9aVqeLZ0Xamani1dT6rGZ0vXkar52cr1o2qAtnLdqJqgrVwvqkZoq28nTjzHlSoLUP5+mitVVqAcn+lKdaPDlNFldWT1EFtWJ1YPkWXVs3qIK6sLq4d9WN1ZPcSUtcfqIaKst6we4sk6ZvUQTdYpq4dYsi5YPUSSdcXqIY6sef9AFFmz/sEYsmb9gxFkzfoH48ea9Q9GjzXrH4wdLesfjBwt7x/oEJb3D/QGy/sHuoLl/QP9wPL+gU5gef9AD7B8/YHqb/n6A3Xf8vUHKr7l689Y61Xxi7fxt27+Mqb96vzlnQcwfxl4APOXKw9g/vLgAcxffB7A/CXkAcxfEh7A/CXjAcxfvh8PJOcv9Yx0On/Zz7/wXJLSsG8wR41O0uUvA6PG/OXKqDF/eTBqzF98Ro35S8ioMX9JGDXmLxmjxvzFMGrMX2pGjfnLnlFj/jL65f/NX94X8Zi/DIt4zF+ui3jMXx6LeLzp9hfxmL+Ei3jMX5JFPOYv2SIe8xeziMf8pV7EY/6yX8Rj/rLM/5i/jP7X5y+DQGD+chUIdOVDIPD23BcIzF9CgcD8JREIzF8ygcD8xQgE5i+1QGD+shcIzF8aSujzl3cdiPnLoAMxf7nqQHTQQwfitbivAzF/CXUg5i+JDsT8JdOBmL8YHYj5S60DMX9xTKrNX1ynKvMX16fK/MV1qTJ/cT2qzF9chyrzF9efyvzFdacyf3G9qcxfXGcq8xfXl8r8xXWlNn9xTanNX1xXavMX15ba/MX1pTZ/cY2pzV9cZ2rzF9ea2vzF9aY2f3HNqc1fXHdq8xfXnrr8xXWnLn9xvanLX1xn6vIX15e6/MV1pS5/cT2py19cR+ryF9ePuvzFdaMuf3G9qMtfvp0o5i8GlHP5Sw3K6fxldJg2f2lYPeYv76we85eB1WP+cmX1mL88WD3mLz6rx/wlZPWYvySsHvOXjNVj/mJYPeYvNavH/IX3D+YvrH8m8hfWPxP5C+ufifyF9c9E/sL6ZyJ/Yf0zkb/w/sH8hfcP5i+8fzB/4f2D+QvvH8xfeP9g/sLXH8xf+PqD+QtffzB/4evPd/7yPzKUTbKAhgAA"}!./node_modules/@vanilla-extract/webpack-plugin/extracted.js'
          ),
          __webpack_require__(
            "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js"
          )),
        injectStylesIntoStyleTag_default = __webpack_require__.n(
          injectStylesIntoStyleTag
        ),
        styleDomAPI = __webpack_require__(
          "./node_modules/style-loader/dist/runtime/styleDomAPI.js"
        ),
        styleDomAPI_default = __webpack_require__.n(styleDomAPI),
        insertBySelector = __webpack_require__(
          "./node_modules/style-loader/dist/runtime/insertBySelector.js"
        ),
        insertBySelector_default = __webpack_require__.n(insertBySelector),
        setAttributesWithoutAttributes = __webpack_require__(
          "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js"
        ),
        setAttributesWithoutAttributes_default = __webpack_require__.n(
          setAttributesWithoutAttributes
        ),
        insertStyleElement = __webpack_require__(
          "./node_modules/style-loader/dist/runtime/insertStyleElement.js"
        ),
        insertStyleElement_default = __webpack_require__.n(insertStyleElement),
        styleTagTransform = __webpack_require__(
          "./node_modules/style-loader/dist/runtime/styleTagTransform.js"
        ),
        styleTagTransform_default = __webpack_require__.n(styleTagTransform),
        text_area_styles_css_ts_vanilla_css_source_Ll8xbDJidTZoNyB7CiAgcmVzaXplOiBub25lOwp9_node_modules_vanilla_extract_webpack_plugin_extracted =
          __webpack_require__(
            './node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[8].use[1]!./node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{"fileName":"src/components/text_area/text_area.styles.css.ts.vanilla.css","source":"Ll8xbDJidTZoNyB7CiAgcmVzaXplOiBub25lOwp9"}!./node_modules/@vanilla-extract/webpack-plugin/extracted.js'
          ),
        options = {};
      (options.styleTagTransform = styleTagTransform_default()),
        (options.setAttributes = setAttributesWithoutAttributes_default()),
        (options.insert = insertBySelector_default().bind(null, "head")),
        (options.domAPI = styleDomAPI_default()),
        (options.insertStyleElement = insertStyleElement_default());
      injectStylesIntoStyleTag_default()(
        text_area_styles_css_ts_vanilla_css_source_Ll8xbDJidTZoNyB7CiAgcmVzaXplOiBub25lOwp9_node_modules_vanilla_extract_webpack_plugin_extracted.Z,
        options
      );
      text_area_styles_css_ts_vanilla_css_source_Ll8xbDJidTZoNyB7CiAgcmVzaXplOiBub25lOwp9_node_modules_vanilla_extract_webpack_plugin_extracted.Z &&
        text_area_styles_css_ts_vanilla_css_source_Ll8xbDJidTZoNyB7CiAgcmVzaXplOiBub25lOwp9_node_modules_vanilla_extract_webpack_plugin_extracted
          .Z.locals &&
        text_area_styles_css_ts_vanilla_css_source_Ll8xbDJidTZoNyB7CiAgcmVzaXplOiBub25lOwp9_node_modules_vanilla_extract_webpack_plugin_extracted
          .Z.locals;
      var getTextAreaStyles = (0,
        __webpack_require__(
          "./node_modules/@vanilla-extract/recipes/createRuntimeFn/dist/vanilla-extract-recipes-createRuntimeFn.esm.js"
        ).u)({
          defaultClassName: "_1l2bu6h7 eiij7bgl r8he5t1 r8he5t2",
          variantClassNames: {
            size: {
              lg: "eiij7b20 eiij7b3e eiij7be0 eiij7bex eiij7bfr eiij7bd0 eiij7b7a",
              md: "eiij7b21 eiij7b3f eiij7bdx eiij7beu eiij7bfo eiij7bcx eiij7b79",
              sm: "eiij7b22 eiij7b3g eiij7bdu eiij7ber eiij7bfl eiij7bcu eiij7b78",
            },
          },
          defaultVariants: { size: "md" },
          compoundVariants: [],
        }),
        jsx_runtime = __webpack_require__(
          "./node_modules/react/jsx-runtime.js"
        );
      const TextArea = (0, react.forwardRef)(
        (
          {
            errorMessage,
            id,
            invalid,
            label,
            labelTooltip,
            name,
            size = "md",
            slotLeft,
            slotRight,
            wrapperProps,
            ...rest
          },
          ref
        ) => {
          const { atomProps, otherProps } = (0, dessert_box_core_esm.q)(
            rest,
            get_sprinkles_css.eD
          );
          return (0, jsx_runtime.jsxs)(box_comp.x, {
            className: (0, clsx_m.Z)({
              [(0, theme_css.gh)({ colorOverlay: "red" })]: invalid,
            }),
            color: "text_low_contrast",
            ...wrapperProps,
            children: [
              label &&
                id &&
                (0, jsx_runtime.jsx)(label_comp._, {
                  htmlFor: id,
                  label,
                  labelTooltip,
                }),
              (0, jsx_runtime.jsx)(slot_wrapper_comp.L, {
                alignItems: "start",
                size,
                slotLeft,
                slotProps: { paddingY: "spacing_1" },
                slotRight,
                children: (0, jsx_runtime.jsx)("textarea", {
                  "aria-invalid": invalid,
                  "aria-label": label,
                  id,
                  name,
                  ref,
                  className: (0, clsx_m.Z)(
                    getTextAreaStyles({ size }),
                    (0, get_sprinkles_css.eD)(atomProps),
                    { [a11y_css.Y8]: invalid }
                  ),
                  ...otherProps,
                }),
              }),
              invalid &&
                errorMessage &&
                (0, jsx_runtime.jsx)(input_error_message_comp.f, {
                  message: errorMessage,
                }),
            ],
          });
        }
      );
      try {
        (TextArea.displayName = "TextArea"),
          (TextArea.__docgenInfo = {
            description: "",
            displayName: "TextArea",
            props: {
              content: {
                defaultValue: null,
                description: "",
                name: "content",
                required: !1,
                type: { name: "string" },
              },
              translate: {
                defaultValue: null,
                description: "",
                name: "translate",
                required: !1,
                type: {
                  name: "enum",
                  value: [{ value: '"yes"' }, { value: '"no"' }],
                },
              },
              hidden: {
                defaultValue: null,
                description: "",
                name: "hidden",
                required: !1,
                type: { name: "boolean" },
              },
              style: {
                defaultValue: null,
                description: "",
                name: "style",
                required: !1,
                type: { name: "CSSProperties" },
              },
              wrap: {
                defaultValue: null,
                description: "",
                name: "wrap",
                required: !1,
                type: { name: "string" },
              },
              disabled: {
                defaultValue: null,
                description: "",
                name: "disabled",
                required: !1,
                type: { name: "boolean" },
              },
              name: {
                defaultValue: null,
                description: "",
                name: "name",
                required: !1,
                type: { name: "string" },
              },
              form: {
                defaultValue: null,
                description: "",
                name: "form",
                required: !1,
                type: { name: "string" },
              },
              slot: {
                defaultValue: null,
                description: "",
                name: "slot",
                required: !1,
                type: { name: "string" },
              },
              title: {
                defaultValue: null,
                description: "",
                name: "title",
                required: !1,
                type: { name: "string" },
              },
              key: {
                defaultValue: null,
                description: "",
                name: "key",
                required: !1,
                type: { name: "Key" },
              },
              autoComplete: {
                defaultValue: null,
                description: "",
                name: "autoComplete",
                required: !1,
                type: { name: "string" },
              },
              cols: {
                defaultValue: null,
                description: "",
                name: "cols",
                required: !1,
                type: { name: "number" },
              },
              dirName: {
                defaultValue: null,
                description: "",
                name: "dirName",
                required: !1,
                type: { name: "string" },
              },
              maxLength: {
                defaultValue: null,
                description: "",
                name: "maxLength",
                required: !1,
                type: { name: "number" },
              },
              minLength: {
                defaultValue: null,
                description: "",
                name: "minLength",
                required: !1,
                type: { name: "number" },
              },
              placeholder: {
                defaultValue: null,
                description: "",
                name: "placeholder",
                required: !1,
                type: { name: "string" },
              },
              readOnly: {
                defaultValue: null,
                description: "",
                name: "readOnly",
                required: !1,
                type: { name: "boolean" },
              },
              required: {
                defaultValue: null,
                description: "",
                name: "required",
                required: !1,
                type: { name: "boolean" },
              },
              rows: {
                defaultValue: null,
                description: "",
                name: "rows",
                required: !1,
                type: { name: "number" },
              },
              value: {
                defaultValue: null,
                description: "",
                name: "value",
                required: !1,
                type: { name: "string | number | readonly string[]" },
              },
              onChange: {
                defaultValue: null,
                description: "",
                name: "onChange",
                required: !1,
                type: { name: "ChangeEventHandler<HTMLTextAreaElement>" },
              },
              defaultChecked: {
                defaultValue: null,
                description: "",
                name: "defaultChecked",
                required: !1,
                type: { name: "boolean" },
              },
              defaultValue: {
                defaultValue: null,
                description: "",
                name: "defaultValue",
                required: !1,
                type: { name: "string | number | readonly string[]" },
              },
              suppressContentEditableWarning: {
                defaultValue: null,
                description: "",
                name: "suppressContentEditableWarning",
                required: !1,
                type: { name: "boolean" },
              },
              suppressHydrationWarning: {
                defaultValue: null,
                description: "",
                name: "suppressHydrationWarning",
                required: !1,
                type: { name: "boolean" },
              },
              accessKey: {
                defaultValue: null,
                description: "",
                name: "accessKey",
                required: !1,
                type: { name: "string" },
              },
              autoFocus: {
                defaultValue: null,
                description: "",
                name: "autoFocus",
                required: !1,
                type: { name: "boolean" },
              },
              className: {
                defaultValue: null,
                description: "",
                name: "className",
                required: !1,
                type: { name: "string" },
              },
              contentEditable: {
                defaultValue: null,
                description: "",
                name: "contentEditable",
                required: !1,
                type: { name: '"inherit" | Booleanish' },
              },
              contextMenu: {
                defaultValue: null,
                description: "",
                name: "contextMenu",
                required: !1,
                type: { name: "string" },
              },
              dir: {
                defaultValue: null,
                description: "",
                name: "dir",
                required: !1,
                type: { name: "string" },
              },
              draggable: {
                defaultValue: null,
                description: "",
                name: "draggable",
                required: !1,
                type: { name: "Booleanish" },
              },
              id: {
                defaultValue: null,
                description: "",
                name: "id",
                required: !1,
                type: { name: "string" },
              },
              lang: {
                defaultValue: null,
                description: "",
                name: "lang",
                required: !1,
                type: { name: "string" },
              },
              nonce: {
                defaultValue: null,
                description: "",
                name: "nonce",
                required: !1,
                type: { name: "string" },
              },
              spellCheck: {
                defaultValue: null,
                description: "",
                name: "spellCheck",
                required: !1,
                type: { name: "Booleanish" },
              },
              tabIndex: {
                defaultValue: null,
                description: "",
                name: "tabIndex",
                required: !1,
                type: { name: "number" },
              },
              radioGroup: {
                defaultValue: null,
                description: "",
                name: "radioGroup",
                required: !1,
                type: { name: "string" },
              },
              role: {
                defaultValue: null,
                description: "",
                name: "role",
                required: !1,
                type: { name: "AriaRole" },
              },
              about: {
                defaultValue: null,
                description: "",
                name: "about",
                required: !1,
                type: { name: "string" },
              },
              datatype: {
                defaultValue: null,
                description: "",
                name: "datatype",
                required: !1,
                type: { name: "string" },
              },
              inlist: {
                defaultValue: null,
                description: "",
                name: "inlist",
                required: !1,
                type: { name: "any" },
              },
              prefix: {
                defaultValue: null,
                description: "",
                name: "prefix",
                required: !1,
                type: { name: "string" },
              },
              property: {
                defaultValue: null,
                description: "",
                name: "property",
                required: !1,
                type: { name: "string" },
              },
              rel: {
                defaultValue: null,
                description: "",
                name: "rel",
                required: !1,
                type: { name: "string" },
              },
              resource: {
                defaultValue: null,
                description: "",
                name: "resource",
                required: !1,
                type: { name: "string" },
              },
              rev: {
                defaultValue: null,
                description: "",
                name: "rev",
                required: !1,
                type: { name: "string" },
              },
              typeof: {
                defaultValue: null,
                description: "",
                name: "typeof",
                required: !1,
                type: { name: "string" },
              },
              vocab: {
                defaultValue: null,
                description: "",
                name: "vocab",
                required: !1,
                type: { name: "string" },
              },
              autoCapitalize: {
                defaultValue: null,
                description: "",
                name: "autoCapitalize",
                required: !1,
                type: { name: "string" },
              },
              autoCorrect: {
                defaultValue: null,
                description: "",
                name: "autoCorrect",
                required: !1,
                type: { name: "string" },
              },
              autoSave: {
                defaultValue: null,
                description: "",
                name: "autoSave",
                required: !1,
                type: { name: "string" },
              },
              itemProp: {
                defaultValue: null,
                description: "",
                name: "itemProp",
                required: !1,
                type: { name: "string" },
              },
              itemScope: {
                defaultValue: null,
                description: "",
                name: "itemScope",
                required: !1,
                type: { name: "boolean" },
              },
              itemType: {
                defaultValue: null,
                description: "",
                name: "itemType",
                required: !1,
                type: { name: "string" },
              },
              itemID: {
                defaultValue: null,
                description: "",
                name: "itemID",
                required: !1,
                type: { name: "string" },
              },
              itemRef: {
                defaultValue: null,
                description: "",
                name: "itemRef",
                required: !1,
                type: { name: "string" },
              },
              results: {
                defaultValue: null,
                description: "",
                name: "results",
                required: !1,
                type: { name: "number" },
              },
              security: {
                defaultValue: null,
                description: "",
                name: "security",
                required: !1,
                type: { name: "string" },
              },
              unselectable: {
                defaultValue: null,
                description: "",
                name: "unselectable",
                required: !1,
                type: {
                  name: "enum",
                  value: [{ value: '"on"' }, { value: '"off"' }],
                },
              },
              inputMode: {
                defaultValue: null,
                description:
                  "Hints at the type of data that might be entered by the user while editing the element or its contents\n@see https://html.spec.whatwg.org/multipage/interaction.html#input-modalities:-the-inputmode-attribute",
                name: "inputMode",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"none"' },
                    { value: '"search"' },
                    { value: '"text"' },
                    { value: '"tel"' },
                    { value: '"url"' },
                    { value: '"email"' },
                    { value: '"numeric"' },
                    { value: '"decimal"' },
                  ],
                },
              },
              is: {
                defaultValue: null,
                description:
                  "Specify that a standard HTML element should behave like a defined custom built-in element\n@see https://html.spec.whatwg.org/multipage/custom-elements.html#attr-is",
                name: "is",
                required: !1,
                type: { name: "string" },
              },
              "aria-activedescendant": {
                defaultValue: null,
                description:
                  "Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.",
                name: "aria-activedescendant",
                required: !1,
                type: { name: "string" },
              },
              "aria-atomic": {
                defaultValue: null,
                description:
                  "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.",
                name: "aria-atomic",
                required: !1,
                type: { name: "Booleanish" },
              },
              "aria-autocomplete": {
                defaultValue: null,
                description:
                  "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be\npresented if they are made.",
                name: "aria-autocomplete",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"none"' },
                    { value: '"both"' },
                    { value: '"inline"' },
                    { value: '"list"' },
                  ],
                },
              },
              "aria-busy": {
                defaultValue: null,
                description:
                  "Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.",
                name: "aria-busy",
                required: !1,
                type: { name: "Booleanish" },
              },
              "aria-checked": {
                defaultValue: null,
                description:
                  'Indicates the current "checked" state of checkboxes, radio buttons, and other widgets.\n@see aria-pressed\n@see aria-selected.',
                name: "aria-checked",
                required: !1,
                type: { name: 'boolean | "mixed" | "false" | "true"' },
              },
              "aria-colcount": {
                defaultValue: null,
                description:
                  "Defines the total number of columns in a table, grid, or treegrid.\n@see aria-colindex.",
                name: "aria-colcount",
                required: !1,
                type: { name: "number" },
              },
              "aria-colindex": {
                defaultValue: null,
                description:
                  "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.\n@see aria-colcount\n@see aria-colspan.",
                name: "aria-colindex",
                required: !1,
                type: { name: "number" },
              },
              "aria-colspan": {
                defaultValue: null,
                description:
                  "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.\n@see aria-colindex\n@see aria-rowspan.",
                name: "aria-colspan",
                required: !1,
                type: { name: "number" },
              },
              "aria-controls": {
                defaultValue: null,
                description:
                  "Identifies the element (or elements) whose contents or presence are controlled by the current element.\n@see aria-owns.",
                name: "aria-controls",
                required: !1,
                type: { name: "string" },
              },
              "aria-current": {
                defaultValue: null,
                description:
                  "Indicates the element that represents the current item within a container or set of related elements.",
                name: "aria-current",
                required: !1,
                type: {
                  name: 'boolean | "page" | "false" | "true" | "time" | "step" | "location" | "date"',
                },
              },
              "aria-describedby": {
                defaultValue: null,
                description:
                  "Identifies the element (or elements) that describes the object.\n@see aria-labelledby",
                name: "aria-describedby",
                required: !1,
                type: { name: "string" },
              },
              "aria-details": {
                defaultValue: null,
                description:
                  "Identifies the element that provides a detailed, extended description for the object.\n@see aria-describedby.",
                name: "aria-details",
                required: !1,
                type: { name: "string" },
              },
              "aria-disabled": {
                defaultValue: null,
                description:
                  "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.\n@see aria-hidden\n@see aria-readonly.",
                name: "aria-disabled",
                required: !1,
                type: { name: "Booleanish" },
              },
              "aria-dropeffect": {
                defaultValue: null,
                description:
                  "Indicates what functions can be performed when a dragged object is released on the drop target.\n@deprecated in ARIA 1.1",
                name: "aria-dropeffect",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"none"' },
                    { value: '"link"' },
                    { value: '"copy"' },
                    { value: '"move"' },
                    { value: '"execute"' },
                    { value: '"popup"' },
                  ],
                },
              },
              "aria-errormessage": {
                defaultValue: null,
                description:
                  "Identifies the element that provides an error message for the object.\n@see aria-invalid\n@see aria-describedby.",
                name: "aria-errormessage",
                required: !1,
                type: { name: "string" },
              },
              "aria-expanded": {
                defaultValue: null,
                description:
                  "Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.",
                name: "aria-expanded",
                required: !1,
                type: { name: "Booleanish" },
              },
              "aria-flowto": {
                defaultValue: null,
                description:
                  "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,\nallows assistive technology to override the general default of reading in document source order.",
                name: "aria-flowto",
                required: !1,
                type: { name: "string" },
              },
              "aria-grabbed": {
                defaultValue: null,
                description:
                  'Indicates an element\'s "grabbed" state in a drag-and-drop operation.\n@deprecated in ARIA 1.1',
                name: "aria-grabbed",
                required: !1,
                type: { name: "Booleanish" },
              },
              "aria-haspopup": {
                defaultValue: null,
                description:
                  "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.",
                name: "aria-haspopup",
                required: !1,
                type: {
                  name: 'boolean | "grid" | "listbox" | "menu" | "false" | "true" | "dialog" | "tree"',
                },
              },
              "aria-hidden": {
                defaultValue: null,
                description:
                  "Indicates whether the element is exposed to an accessibility API.\n@see aria-disabled.",
                name: "aria-hidden",
                required: !1,
                type: { name: "Booleanish" },
              },
              "aria-invalid": {
                defaultValue: null,
                description:
                  "Indicates the entered value does not conform to the format expected by the application.\n@see aria-errormessage.",
                name: "aria-invalid",
                required: !1,
                type: {
                  name: 'boolean | "false" | "true" | "grammar" | "spelling"',
                },
              },
              "aria-keyshortcuts": {
                defaultValue: null,
                description:
                  "Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.",
                name: "aria-keyshortcuts",
                required: !1,
                type: { name: "string" },
              },
              "aria-label": {
                defaultValue: null,
                description:
                  "Defines a string value that labels the current element.\n@see aria-labelledby.",
                name: "aria-label",
                required: !1,
                type: { name: "string" },
              },
              "aria-labelledby": {
                defaultValue: null,
                description:
                  "Identifies the element (or elements) that labels the current element.\n@see aria-describedby.",
                name: "aria-labelledby",
                required: !1,
                type: { name: "string" },
              },
              "aria-level": {
                defaultValue: null,
                description:
                  "Defines the hierarchical level of an element within a structure.",
                name: "aria-level",
                required: !1,
                type: { name: "number" },
              },
              "aria-live": {
                defaultValue: null,
                description:
                  "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.",
                name: "aria-live",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"off"' },
                    { value: '"assertive"' },
                    { value: '"polite"' },
                  ],
                },
              },
              "aria-modal": {
                defaultValue: null,
                description:
                  "Indicates whether an element is modal when displayed.",
                name: "aria-modal",
                required: !1,
                type: { name: "Booleanish" },
              },
              "aria-multiline": {
                defaultValue: null,
                description:
                  "Indicates whether a text box accepts multiple lines of input or only a single line.",
                name: "aria-multiline",
                required: !1,
                type: { name: "Booleanish" },
              },
              "aria-multiselectable": {
                defaultValue: null,
                description:
                  "Indicates that the user may select more than one item from the current selectable descendants.",
                name: "aria-multiselectable",
                required: !1,
                type: { name: "Booleanish" },
              },
              "aria-orientation": {
                defaultValue: null,
                description:
                  "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous.",
                name: "aria-orientation",
                required: !1,
                type: {
                  name: "enum",
                  value: [{ value: '"horizontal"' }, { value: '"vertical"' }],
                },
              },
              "aria-owns": {
                defaultValue: null,
                description:
                  "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship\nbetween DOM elements where the DOM hierarchy cannot be used to represent the relationship.\n@see aria-controls.",
                name: "aria-owns",
                required: !1,
                type: { name: "string" },
              },
              "aria-placeholder": {
                defaultValue: null,
                description:
                  "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.\nA hint could be a sample value or a brief description of the expected format.",
                name: "aria-placeholder",
                required: !1,
                type: { name: "string" },
              },
              "aria-posinset": {
                defaultValue: null,
                description:
                  "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\n@see aria-setsize.",
                name: "aria-posinset",
                required: !1,
                type: { name: "number" },
              },
              "aria-pressed": {
                defaultValue: null,
                description:
                  'Indicates the current "pressed" state of toggle buttons.\n@see aria-checked\n@see aria-selected.',
                name: "aria-pressed",
                required: !1,
                type: { name: 'boolean | "mixed" | "false" | "true"' },
              },
              "aria-readonly": {
                defaultValue: null,
                description:
                  "Indicates that the element is not editable, but is otherwise operable.\n@see aria-disabled.",
                name: "aria-readonly",
                required: !1,
                type: { name: "Booleanish" },
              },
              "aria-relevant": {
                defaultValue: null,
                description:
                  "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.\n@see aria-atomic.",
                name: "aria-relevant",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"all"' },
                    { value: '"text"' },
                    { value: '"additions"' },
                    { value: '"additions removals"' },
                    { value: '"additions text"' },
                    { value: '"removals"' },
                    { value: '"removals additions"' },
                    { value: '"removals text"' },
                    { value: '"text additions"' },
                    { value: '"text removals"' },
                  ],
                },
              },
              "aria-required": {
                defaultValue: null,
                description:
                  "Indicates that user input is required on the element before a form may be submitted.",
                name: "aria-required",
                required: !1,
                type: { name: "Booleanish" },
              },
              "aria-roledescription": {
                defaultValue: null,
                description:
                  "Defines a human-readable, author-localized description for the role of an element.",
                name: "aria-roledescription",
                required: !1,
                type: { name: "string" },
              },
              "aria-rowcount": {
                defaultValue: null,
                description:
                  "Defines the total number of rows in a table, grid, or treegrid.\n@see aria-rowindex.",
                name: "aria-rowcount",
                required: !1,
                type: { name: "number" },
              },
              "aria-rowindex": {
                defaultValue: null,
                description:
                  "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.\n@see aria-rowcount\n@see aria-rowspan.",
                name: "aria-rowindex",
                required: !1,
                type: { name: "number" },
              },
              "aria-rowspan": {
                defaultValue: null,
                description:
                  "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.\n@see aria-rowindex\n@see aria-colspan.",
                name: "aria-rowspan",
                required: !1,
                type: { name: "number" },
              },
              "aria-selected": {
                defaultValue: null,
                description:
                  'Indicates the current "selected" state of various widgets.\n@see aria-checked\n@see aria-pressed.',
                name: "aria-selected",
                required: !1,
                type: { name: "Booleanish" },
              },
              "aria-setsize": {
                defaultValue: null,
                description:
                  "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\n@see aria-posinset.",
                name: "aria-setsize",
                required: !1,
                type: { name: "number" },
              },
              "aria-sort": {
                defaultValue: null,
                description:
                  "Indicates if items in a table or grid are sorted in ascending or descending order.",
                name: "aria-sort",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"none"' },
                    { value: '"ascending"' },
                    { value: '"descending"' },
                    { value: '"other"' },
                  ],
                },
              },
              "aria-valuemax": {
                defaultValue: null,
                description:
                  "Defines the maximum allowed value for a range widget.",
                name: "aria-valuemax",
                required: !1,
                type: { name: "number" },
              },
              "aria-valuemin": {
                defaultValue: null,
                description:
                  "Defines the minimum allowed value for a range widget.",
                name: "aria-valuemin",
                required: !1,
                type: { name: "number" },
              },
              "aria-valuenow": {
                defaultValue: null,
                description:
                  "Defines the current value for a range widget.\n@see aria-valuetext.",
                name: "aria-valuenow",
                required: !1,
                type: { name: "number" },
              },
              "aria-valuetext": {
                defaultValue: null,
                description:
                  "Defines the human readable text alternative of aria-valuenow for a range widget.",
                name: "aria-valuetext",
                required: !1,
                type: { name: "string" },
              },
              dangerouslySetInnerHTML: {
                defaultValue: null,
                description: "",
                name: "dangerouslySetInnerHTML",
                required: !1,
                type: { name: "{ __html: string | TrustedHTML; }" },
              },
              onCopy: {
                defaultValue: null,
                description: "",
                name: "onCopy",
                required: !1,
                type: { name: "ClipboardEventHandler<HTMLTextAreaElement>" },
              },
              onCopyCapture: {
                defaultValue: null,
                description: "",
                name: "onCopyCapture",
                required: !1,
                type: { name: "ClipboardEventHandler<HTMLTextAreaElement>" },
              },
              onCut: {
                defaultValue: null,
                description: "",
                name: "onCut",
                required: !1,
                type: { name: "ClipboardEventHandler<HTMLTextAreaElement>" },
              },
              onCutCapture: {
                defaultValue: null,
                description: "",
                name: "onCutCapture",
                required: !1,
                type: { name: "ClipboardEventHandler<HTMLTextAreaElement>" },
              },
              onPaste: {
                defaultValue: null,
                description: "",
                name: "onPaste",
                required: !1,
                type: { name: "ClipboardEventHandler<HTMLTextAreaElement>" },
              },
              onPasteCapture: {
                defaultValue: null,
                description: "",
                name: "onPasteCapture",
                required: !1,
                type: { name: "ClipboardEventHandler<HTMLTextAreaElement>" },
              },
              onCompositionEnd: {
                defaultValue: null,
                description: "",
                name: "onCompositionEnd",
                required: !1,
                type: { name: "CompositionEventHandler<HTMLTextAreaElement>" },
              },
              onCompositionEndCapture: {
                defaultValue: null,
                description: "",
                name: "onCompositionEndCapture",
                required: !1,
                type: { name: "CompositionEventHandler<HTMLTextAreaElement>" },
              },
              onCompositionStart: {
                defaultValue: null,
                description: "",
                name: "onCompositionStart",
                required: !1,
                type: { name: "CompositionEventHandler<HTMLTextAreaElement>" },
              },
              onCompositionStartCapture: {
                defaultValue: null,
                description: "",
                name: "onCompositionStartCapture",
                required: !1,
                type: { name: "CompositionEventHandler<HTMLTextAreaElement>" },
              },
              onCompositionUpdate: {
                defaultValue: null,
                description: "",
                name: "onCompositionUpdate",
                required: !1,
                type: { name: "CompositionEventHandler<HTMLTextAreaElement>" },
              },
              onCompositionUpdateCapture: {
                defaultValue: null,
                description: "",
                name: "onCompositionUpdateCapture",
                required: !1,
                type: { name: "CompositionEventHandler<HTMLTextAreaElement>" },
              },
              onFocus: {
                defaultValue: null,
                description: "",
                name: "onFocus",
                required: !1,
                type: { name: "FocusEventHandler<HTMLTextAreaElement>" },
              },
              onFocusCapture: {
                defaultValue: null,
                description: "",
                name: "onFocusCapture",
                required: !1,
                type: { name: "FocusEventHandler<HTMLTextAreaElement>" },
              },
              onBlur: {
                defaultValue: null,
                description: "",
                name: "onBlur",
                required: !1,
                type: { name: "FocusEventHandler<HTMLTextAreaElement>" },
              },
              onBlurCapture: {
                defaultValue: null,
                description: "",
                name: "onBlurCapture",
                required: !1,
                type: { name: "FocusEventHandler<HTMLTextAreaElement>" },
              },
              onChangeCapture: {
                defaultValue: null,
                description: "",
                name: "onChangeCapture",
                required: !1,
                type: { name: "FormEventHandler<HTMLTextAreaElement>" },
              },
              onBeforeInput: {
                defaultValue: null,
                description: "",
                name: "onBeforeInput",
                required: !1,
                type: { name: "FormEventHandler<HTMLTextAreaElement>" },
              },
              onBeforeInputCapture: {
                defaultValue: null,
                description: "",
                name: "onBeforeInputCapture",
                required: !1,
                type: { name: "FormEventHandler<HTMLTextAreaElement>" },
              },
              onInput: {
                defaultValue: null,
                description: "",
                name: "onInput",
                required: !1,
                type: { name: "FormEventHandler<HTMLTextAreaElement>" },
              },
              onInputCapture: {
                defaultValue: null,
                description: "",
                name: "onInputCapture",
                required: !1,
                type: { name: "FormEventHandler<HTMLTextAreaElement>" },
              },
              onReset: {
                defaultValue: null,
                description: "",
                name: "onReset",
                required: !1,
                type: { name: "FormEventHandler<HTMLTextAreaElement>" },
              },
              onResetCapture: {
                defaultValue: null,
                description: "",
                name: "onResetCapture",
                required: !1,
                type: { name: "FormEventHandler<HTMLTextAreaElement>" },
              },
              onSubmit: {
                defaultValue: null,
                description: "",
                name: "onSubmit",
                required: !1,
                type: { name: "FormEventHandler<HTMLTextAreaElement>" },
              },
              onSubmitCapture: {
                defaultValue: null,
                description: "",
                name: "onSubmitCapture",
                required: !1,
                type: { name: "FormEventHandler<HTMLTextAreaElement>" },
              },
              onInvalid: {
                defaultValue: null,
                description: "",
                name: "onInvalid",
                required: !1,
                type: { name: "FormEventHandler<HTMLTextAreaElement>" },
              },
              onInvalidCapture: {
                defaultValue: null,
                description: "",
                name: "onInvalidCapture",
                required: !1,
                type: { name: "FormEventHandler<HTMLTextAreaElement>" },
              },
              onLoad: {
                defaultValue: null,
                description: "",
                name: "onLoad",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onLoadCapture: {
                defaultValue: null,
                description: "",
                name: "onLoadCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onError: {
                defaultValue: null,
                description: "",
                name: "onError",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onErrorCapture: {
                defaultValue: null,
                description: "",
                name: "onErrorCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onKeyDown: {
                defaultValue: null,
                description: "",
                name: "onKeyDown",
                required: !1,
                type: { name: "KeyboardEventHandler<HTMLTextAreaElement>" },
              },
              onKeyDownCapture: {
                defaultValue: null,
                description: "",
                name: "onKeyDownCapture",
                required: !1,
                type: { name: "KeyboardEventHandler<HTMLTextAreaElement>" },
              },
              onKeyPress: {
                defaultValue: null,
                description: "@deprecated",
                name: "onKeyPress",
                required: !1,
                type: { name: "KeyboardEventHandler<HTMLTextAreaElement>" },
              },
              onKeyPressCapture: {
                defaultValue: null,
                description: "@deprecated",
                name: "onKeyPressCapture",
                required: !1,
                type: { name: "KeyboardEventHandler<HTMLTextAreaElement>" },
              },
              onKeyUp: {
                defaultValue: null,
                description: "",
                name: "onKeyUp",
                required: !1,
                type: { name: "KeyboardEventHandler<HTMLTextAreaElement>" },
              },
              onKeyUpCapture: {
                defaultValue: null,
                description: "",
                name: "onKeyUpCapture",
                required: !1,
                type: { name: "KeyboardEventHandler<HTMLTextAreaElement>" },
              },
              onAbort: {
                defaultValue: null,
                description: "",
                name: "onAbort",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onAbortCapture: {
                defaultValue: null,
                description: "",
                name: "onAbortCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onCanPlay: {
                defaultValue: null,
                description: "",
                name: "onCanPlay",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onCanPlayCapture: {
                defaultValue: null,
                description: "",
                name: "onCanPlayCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onCanPlayThrough: {
                defaultValue: null,
                description: "",
                name: "onCanPlayThrough",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onCanPlayThroughCapture: {
                defaultValue: null,
                description: "",
                name: "onCanPlayThroughCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onDurationChange: {
                defaultValue: null,
                description: "",
                name: "onDurationChange",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onDurationChangeCapture: {
                defaultValue: null,
                description: "",
                name: "onDurationChangeCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onEmptied: {
                defaultValue: null,
                description: "",
                name: "onEmptied",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onEmptiedCapture: {
                defaultValue: null,
                description: "",
                name: "onEmptiedCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onEncrypted: {
                defaultValue: null,
                description: "",
                name: "onEncrypted",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onEncryptedCapture: {
                defaultValue: null,
                description: "",
                name: "onEncryptedCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onEnded: {
                defaultValue: null,
                description: "",
                name: "onEnded",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onEndedCapture: {
                defaultValue: null,
                description: "",
                name: "onEndedCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onLoadedData: {
                defaultValue: null,
                description: "",
                name: "onLoadedData",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onLoadedDataCapture: {
                defaultValue: null,
                description: "",
                name: "onLoadedDataCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onLoadedMetadata: {
                defaultValue: null,
                description: "",
                name: "onLoadedMetadata",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onLoadedMetadataCapture: {
                defaultValue: null,
                description: "",
                name: "onLoadedMetadataCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onLoadStart: {
                defaultValue: null,
                description: "",
                name: "onLoadStart",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onLoadStartCapture: {
                defaultValue: null,
                description: "",
                name: "onLoadStartCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onPause: {
                defaultValue: null,
                description: "",
                name: "onPause",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onPauseCapture: {
                defaultValue: null,
                description: "",
                name: "onPauseCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onPlay: {
                defaultValue: null,
                description: "",
                name: "onPlay",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onPlayCapture: {
                defaultValue: null,
                description: "",
                name: "onPlayCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onPlaying: {
                defaultValue: null,
                description: "",
                name: "onPlaying",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onPlayingCapture: {
                defaultValue: null,
                description: "",
                name: "onPlayingCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onProgress: {
                defaultValue: null,
                description: "",
                name: "onProgress",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onProgressCapture: {
                defaultValue: null,
                description: "",
                name: "onProgressCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onRateChange: {
                defaultValue: null,
                description: "",
                name: "onRateChange",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onRateChangeCapture: {
                defaultValue: null,
                description: "",
                name: "onRateChangeCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onResize: {
                defaultValue: null,
                description: "",
                name: "onResize",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onResizeCapture: {
                defaultValue: null,
                description: "",
                name: "onResizeCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onSeeked: {
                defaultValue: null,
                description: "",
                name: "onSeeked",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onSeekedCapture: {
                defaultValue: null,
                description: "",
                name: "onSeekedCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onSeeking: {
                defaultValue: null,
                description: "",
                name: "onSeeking",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onSeekingCapture: {
                defaultValue: null,
                description: "",
                name: "onSeekingCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onStalled: {
                defaultValue: null,
                description: "",
                name: "onStalled",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onStalledCapture: {
                defaultValue: null,
                description: "",
                name: "onStalledCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onSuspend: {
                defaultValue: null,
                description: "",
                name: "onSuspend",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onSuspendCapture: {
                defaultValue: null,
                description: "",
                name: "onSuspendCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onTimeUpdate: {
                defaultValue: null,
                description: "",
                name: "onTimeUpdate",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onTimeUpdateCapture: {
                defaultValue: null,
                description: "",
                name: "onTimeUpdateCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onVolumeChange: {
                defaultValue: null,
                description: "",
                name: "onVolumeChange",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onVolumeChangeCapture: {
                defaultValue: null,
                description: "",
                name: "onVolumeChangeCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onWaiting: {
                defaultValue: null,
                description: "",
                name: "onWaiting",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onWaitingCapture: {
                defaultValue: null,
                description: "",
                name: "onWaitingCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onAuxClick: {
                defaultValue: null,
                description: "",
                name: "onAuxClick",
                required: !1,
                type: { name: "MouseEventHandler<HTMLTextAreaElement>" },
              },
              onAuxClickCapture: {
                defaultValue: null,
                description: "",
                name: "onAuxClickCapture",
                required: !1,
                type: { name: "MouseEventHandler<HTMLTextAreaElement>" },
              },
              onClick: {
                defaultValue: null,
                description: "",
                name: "onClick",
                required: !1,
                type: { name: "MouseEventHandler<HTMLTextAreaElement>" },
              },
              onClickCapture: {
                defaultValue: null,
                description: "",
                name: "onClickCapture",
                required: !1,
                type: { name: "MouseEventHandler<HTMLTextAreaElement>" },
              },
              onContextMenu: {
                defaultValue: null,
                description: "",
                name: "onContextMenu",
                required: !1,
                type: { name: "MouseEventHandler<HTMLTextAreaElement>" },
              },
              onContextMenuCapture: {
                defaultValue: null,
                description: "",
                name: "onContextMenuCapture",
                required: !1,
                type: { name: "MouseEventHandler<HTMLTextAreaElement>" },
              },
              onDoubleClick: {
                defaultValue: null,
                description: "",
                name: "onDoubleClick",
                required: !1,
                type: { name: "MouseEventHandler<HTMLTextAreaElement>" },
              },
              onDoubleClickCapture: {
                defaultValue: null,
                description: "",
                name: "onDoubleClickCapture",
                required: !1,
                type: { name: "MouseEventHandler<HTMLTextAreaElement>" },
              },
              onDrag: {
                defaultValue: null,
                description: "",
                name: "onDrag",
                required: !1,
                type: { name: "DragEventHandler<HTMLTextAreaElement>" },
              },
              onDragCapture: {
                defaultValue: null,
                description: "",
                name: "onDragCapture",
                required: !1,
                type: { name: "DragEventHandler<HTMLTextAreaElement>" },
              },
              onDragEnd: {
                defaultValue: null,
                description: "",
                name: "onDragEnd",
                required: !1,
                type: { name: "DragEventHandler<HTMLTextAreaElement>" },
              },
              onDragEndCapture: {
                defaultValue: null,
                description: "",
                name: "onDragEndCapture",
                required: !1,
                type: { name: "DragEventHandler<HTMLTextAreaElement>" },
              },
              onDragEnter: {
                defaultValue: null,
                description: "",
                name: "onDragEnter",
                required: !1,
                type: { name: "DragEventHandler<HTMLTextAreaElement>" },
              },
              onDragEnterCapture: {
                defaultValue: null,
                description: "",
                name: "onDragEnterCapture",
                required: !1,
                type: { name: "DragEventHandler<HTMLTextAreaElement>" },
              },
              onDragExit: {
                defaultValue: null,
                description: "",
                name: "onDragExit",
                required: !1,
                type: { name: "DragEventHandler<HTMLTextAreaElement>" },
              },
              onDragExitCapture: {
                defaultValue: null,
                description: "",
                name: "onDragExitCapture",
                required: !1,
                type: { name: "DragEventHandler<HTMLTextAreaElement>" },
              },
              onDragLeave: {
                defaultValue: null,
                description: "",
                name: "onDragLeave",
                required: !1,
                type: { name: "DragEventHandler<HTMLTextAreaElement>" },
              },
              onDragLeaveCapture: {
                defaultValue: null,
                description: "",
                name: "onDragLeaveCapture",
                required: !1,
                type: { name: "DragEventHandler<HTMLTextAreaElement>" },
              },
              onDragOver: {
                defaultValue: null,
                description: "",
                name: "onDragOver",
                required: !1,
                type: { name: "DragEventHandler<HTMLTextAreaElement>" },
              },
              onDragOverCapture: {
                defaultValue: null,
                description: "",
                name: "onDragOverCapture",
                required: !1,
                type: { name: "DragEventHandler<HTMLTextAreaElement>" },
              },
              onDragStart: {
                defaultValue: null,
                description: "",
                name: "onDragStart",
                required: !1,
                type: { name: "DragEventHandler<HTMLTextAreaElement>" },
              },
              onDragStartCapture: {
                defaultValue: null,
                description: "",
                name: "onDragStartCapture",
                required: !1,
                type: { name: "DragEventHandler<HTMLTextAreaElement>" },
              },
              onDrop: {
                defaultValue: null,
                description: "",
                name: "onDrop",
                required: !1,
                type: { name: "DragEventHandler<HTMLTextAreaElement>" },
              },
              onDropCapture: {
                defaultValue: null,
                description: "",
                name: "onDropCapture",
                required: !1,
                type: { name: "DragEventHandler<HTMLTextAreaElement>" },
              },
              onMouseDown: {
                defaultValue: null,
                description: "",
                name: "onMouseDown",
                required: !1,
                type: { name: "MouseEventHandler<HTMLTextAreaElement>" },
              },
              onMouseDownCapture: {
                defaultValue: null,
                description: "",
                name: "onMouseDownCapture",
                required: !1,
                type: { name: "MouseEventHandler<HTMLTextAreaElement>" },
              },
              onMouseEnter: {
                defaultValue: null,
                description: "",
                name: "onMouseEnter",
                required: !1,
                type: { name: "MouseEventHandler<HTMLTextAreaElement>" },
              },
              onMouseLeave: {
                defaultValue: null,
                description: "",
                name: "onMouseLeave",
                required: !1,
                type: { name: "MouseEventHandler<HTMLTextAreaElement>" },
              },
              onMouseMove: {
                defaultValue: null,
                description: "",
                name: "onMouseMove",
                required: !1,
                type: { name: "MouseEventHandler<HTMLTextAreaElement>" },
              },
              onMouseMoveCapture: {
                defaultValue: null,
                description: "",
                name: "onMouseMoveCapture",
                required: !1,
                type: { name: "MouseEventHandler<HTMLTextAreaElement>" },
              },
              onMouseOut: {
                defaultValue: null,
                description: "",
                name: "onMouseOut",
                required: !1,
                type: { name: "MouseEventHandler<HTMLTextAreaElement>" },
              },
              onMouseOutCapture: {
                defaultValue: null,
                description: "",
                name: "onMouseOutCapture",
                required: !1,
                type: { name: "MouseEventHandler<HTMLTextAreaElement>" },
              },
              onMouseOver: {
                defaultValue: null,
                description: "",
                name: "onMouseOver",
                required: !1,
                type: { name: "MouseEventHandler<HTMLTextAreaElement>" },
              },
              onMouseOverCapture: {
                defaultValue: null,
                description: "",
                name: "onMouseOverCapture",
                required: !1,
                type: { name: "MouseEventHandler<HTMLTextAreaElement>" },
              },
              onMouseUp: {
                defaultValue: null,
                description: "",
                name: "onMouseUp",
                required: !1,
                type: { name: "MouseEventHandler<HTMLTextAreaElement>" },
              },
              onMouseUpCapture: {
                defaultValue: null,
                description: "",
                name: "onMouseUpCapture",
                required: !1,
                type: { name: "MouseEventHandler<HTMLTextAreaElement>" },
              },
              onSelect: {
                defaultValue: null,
                description: "",
                name: "onSelect",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onSelectCapture: {
                defaultValue: null,
                description: "",
                name: "onSelectCapture",
                required: !1,
                type: { name: "ReactEventHandler<HTMLTextAreaElement>" },
              },
              onTouchCancel: {
                defaultValue: null,
                description: "",
                name: "onTouchCancel",
                required: !1,
                type: { name: "TouchEventHandler<HTMLTextAreaElement>" },
              },
              onTouchCancelCapture: {
                defaultValue: null,
                description: "",
                name: "onTouchCancelCapture",
                required: !1,
                type: { name: "TouchEventHandler<HTMLTextAreaElement>" },
              },
              onTouchEnd: {
                defaultValue: null,
                description: "",
                name: "onTouchEnd",
                required: !1,
                type: { name: "TouchEventHandler<HTMLTextAreaElement>" },
              },
              onTouchEndCapture: {
                defaultValue: null,
                description: "",
                name: "onTouchEndCapture",
                required: !1,
                type: { name: "TouchEventHandler<HTMLTextAreaElement>" },
              },
              onTouchMove: {
                defaultValue: null,
                description: "",
                name: "onTouchMove",
                required: !1,
                type: { name: "TouchEventHandler<HTMLTextAreaElement>" },
              },
              onTouchMoveCapture: {
                defaultValue: null,
                description: "",
                name: "onTouchMoveCapture",
                required: !1,
                type: { name: "TouchEventHandler<HTMLTextAreaElement>" },
              },
              onTouchStart: {
                defaultValue: null,
                description: "",
                name: "onTouchStart",
                required: !1,
                type: { name: "TouchEventHandler<HTMLTextAreaElement>" },
              },
              onTouchStartCapture: {
                defaultValue: null,
                description: "",
                name: "onTouchStartCapture",
                required: !1,
                type: { name: "TouchEventHandler<HTMLTextAreaElement>" },
              },
              onPointerDown: {
                defaultValue: null,
                description: "",
                name: "onPointerDown",
                required: !1,
                type: { name: "PointerEventHandler<HTMLTextAreaElement>" },
              },
              onPointerDownCapture: {
                defaultValue: null,
                description: "",
                name: "onPointerDownCapture",
                required: !1,
                type: { name: "PointerEventHandler<HTMLTextAreaElement>" },
              },
              onPointerMove: {
                defaultValue: null,
                description: "",
                name: "onPointerMove",
                required: !1,
                type: { name: "PointerEventHandler<HTMLTextAreaElement>" },
              },
              onPointerMoveCapture: {
                defaultValue: null,
                description: "",
                name: "onPointerMoveCapture",
                required: !1,
                type: { name: "PointerEventHandler<HTMLTextAreaElement>" },
              },
              onPointerUp: {
                defaultValue: null,
                description: "",
                name: "onPointerUp",
                required: !1,
                type: { name: "PointerEventHandler<HTMLTextAreaElement>" },
              },
              onPointerUpCapture: {
                defaultValue: null,
                description: "",
                name: "onPointerUpCapture",
                required: !1,
                type: { name: "PointerEventHandler<HTMLTextAreaElement>" },
              },
              onPointerCancel: {
                defaultValue: null,
                description: "",
                name: "onPointerCancel",
                required: !1,
                type: { name: "PointerEventHandler<HTMLTextAreaElement>" },
              },
              onPointerCancelCapture: {
                defaultValue: null,
                description: "",
                name: "onPointerCancelCapture",
                required: !1,
                type: { name: "PointerEventHandler<HTMLTextAreaElement>" },
              },
              onPointerEnter: {
                defaultValue: null,
                description: "",
                name: "onPointerEnter",
                required: !1,
                type: { name: "PointerEventHandler<HTMLTextAreaElement>" },
              },
              onPointerEnterCapture: {
                defaultValue: null,
                description: "",
                name: "onPointerEnterCapture",
                required: !1,
                type: { name: "PointerEventHandler<HTMLTextAreaElement>" },
              },
              onPointerLeave: {
                defaultValue: null,
                description: "",
                name: "onPointerLeave",
                required: !1,
                type: { name: "PointerEventHandler<HTMLTextAreaElement>" },
              },
              onPointerLeaveCapture: {
                defaultValue: null,
                description: "",
                name: "onPointerLeaveCapture",
                required: !1,
                type: { name: "PointerEventHandler<HTMLTextAreaElement>" },
              },
              onPointerOver: {
                defaultValue: null,
                description: "",
                name: "onPointerOver",
                required: !1,
                type: { name: "PointerEventHandler<HTMLTextAreaElement>" },
              },
              onPointerOverCapture: {
                defaultValue: null,
                description: "",
                name: "onPointerOverCapture",
                required: !1,
                type: { name: "PointerEventHandler<HTMLTextAreaElement>" },
              },
              onPointerOut: {
                defaultValue: null,
                description: "",
                name: "onPointerOut",
                required: !1,
                type: { name: "PointerEventHandler<HTMLTextAreaElement>" },
              },
              onPointerOutCapture: {
                defaultValue: null,
                description: "",
                name: "onPointerOutCapture",
                required: !1,
                type: { name: "PointerEventHandler<HTMLTextAreaElement>" },
              },
              onGotPointerCapture: {
                defaultValue: null,
                description: "",
                name: "onGotPointerCapture",
                required: !1,
                type: { name: "PointerEventHandler<HTMLTextAreaElement>" },
              },
              onGotPointerCaptureCapture: {
                defaultValue: null,
                description: "",
                name: "onGotPointerCaptureCapture",
                required: !1,
                type: { name: "PointerEventHandler<HTMLTextAreaElement>" },
              },
              onLostPointerCapture: {
                defaultValue: null,
                description: "",
                name: "onLostPointerCapture",
                required: !1,
                type: { name: "PointerEventHandler<HTMLTextAreaElement>" },
              },
              onLostPointerCaptureCapture: {
                defaultValue: null,
                description: "",
                name: "onLostPointerCaptureCapture",
                required: !1,
                type: { name: "PointerEventHandler<HTMLTextAreaElement>" },
              },
              onScroll: {
                defaultValue: null,
                description: "",
                name: "onScroll",
                required: !1,
                type: { name: "UIEventHandler<HTMLTextAreaElement>" },
              },
              onScrollCapture: {
                defaultValue: null,
                description: "",
                name: "onScrollCapture",
                required: !1,
                type: { name: "UIEventHandler<HTMLTextAreaElement>" },
              },
              onWheel: {
                defaultValue: null,
                description: "",
                name: "onWheel",
                required: !1,
                type: { name: "WheelEventHandler<HTMLTextAreaElement>" },
              },
              onWheelCapture: {
                defaultValue: null,
                description: "",
                name: "onWheelCapture",
                required: !1,
                type: { name: "WheelEventHandler<HTMLTextAreaElement>" },
              },
              onAnimationStart: {
                defaultValue: null,
                description: "",
                name: "onAnimationStart",
                required: !1,
                type: { name: "AnimationEventHandler<HTMLTextAreaElement>" },
              },
              onAnimationStartCapture: {
                defaultValue: null,
                description: "",
                name: "onAnimationStartCapture",
                required: !1,
                type: { name: "AnimationEventHandler<HTMLTextAreaElement>" },
              },
              onAnimationEnd: {
                defaultValue: null,
                description: "",
                name: "onAnimationEnd",
                required: !1,
                type: { name: "AnimationEventHandler<HTMLTextAreaElement>" },
              },
              onAnimationEndCapture: {
                defaultValue: null,
                description: "",
                name: "onAnimationEndCapture",
                required: !1,
                type: { name: "AnimationEventHandler<HTMLTextAreaElement>" },
              },
              onAnimationIteration: {
                defaultValue: null,
                description: "",
                name: "onAnimationIteration",
                required: !1,
                type: { name: "AnimationEventHandler<HTMLTextAreaElement>" },
              },
              onAnimationIterationCapture: {
                defaultValue: null,
                description: "",
                name: "onAnimationIterationCapture",
                required: !1,
                type: { name: "AnimationEventHandler<HTMLTextAreaElement>" },
              },
              onTransitionEnd: {
                defaultValue: null,
                description: "",
                name: "onTransitionEnd",
                required: !1,
                type: { name: "TransitionEventHandler<HTMLTextAreaElement>" },
              },
              onTransitionEndCapture: {
                defaultValue: null,
                description: "",
                name: "onTransitionEndCapture",
                required: !1,
                type: { name: "TransitionEventHandler<HTMLTextAreaElement>" },
              },
              alignItems: {
                defaultValue: null,
                description: "",
                name: "alignItems",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"stretch"' },
                    { value: '"center"' },
                    { value: '"end"' },
                    { value: '"start"' },
                    { value: '"baseline"' },
                  ],
                },
              },
              aspectRatio: {
                defaultValue: null,
                description: "",
                name: "aspectRatio",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"square"' },
                    { value: '"extraWide"' },
                    { value: '"tall"' },
                    { value: '"wide"' },
                  ],
                },
              },
              background: {
                defaultValue: null,
                description: "",
                name: "background",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"inherit"' },
                    { value: '"background"' },
                    { value: '"black"' },
                    { value: '"transparent"' },
                    { value: '"white"' },
                    { value: '"backdrop"' },
                    { value: '"border_active"' },
                    { value: '"border_default"' },
                    { value: '"button_active"' },
                    { value: '"button_default"' },
                    { value: '"button_tint"' },
                    { value: '"focus_ring"' },
                    { value: '"shadow"' },
                    { value: '"text_high_contrast"' },
                    { value: '"text_low_contrast"' },
                    { value: '"tint_active"' },
                    { value: '"tint_default"' },
                  ],
                },
              },
              border: {
                defaultValue: null,
                description: "",
                name: "border",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"border_active"' },
                    { value: '"border_default"' },
                  ],
                },
              },
              borderBottom: {
                defaultValue: null,
                description: "",
                name: "borderBottom",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"border_active"' },
                    { value: '"border_default"' },
                  ],
                },
              },
              borderLeft: {
                defaultValue: null,
                description: "",
                name: "borderLeft",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"border_active"' },
                    { value: '"border_default"' },
                  ],
                },
              },
              borderRadius: {
                defaultValue: null,
                description: "",
                name: "borderRadius",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"50%"' },
                    { value: '"lg"' },
                    { value: '"md"' },
                    { value: '"pill"' },
                    { value: '"sm"' },
                  ],
                },
              },
              borderRight: {
                defaultValue: null,
                description: "",
                name: "borderRight",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"border_active"' },
                    { value: '"border_default"' },
                  ],
                },
              },
              borderTop: {
                defaultValue: null,
                description: "",
                name: "borderTop",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"border_active"' },
                    { value: '"border_default"' },
                  ],
                },
              },
              bottom: {
                defaultValue: null,
                description: "",
                name: "bottom",
                required: !1,
                type: { name: '"0"' },
              },
              boxShadow: {
                defaultValue: null,
                description: "",
                name: "boxShadow",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"lg"' },
                    { value: '"md"' },
                    { value: '"sm"' },
                  ],
                },
              },
              color: {
                defaultValue: null,
                description: "",
                name: "color",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"inherit"' },
                    { value: '"background"' },
                    { value: '"black"' },
                    { value: '"white"' },
                    { value: '"currentColor"' },
                    { value: '"backdrop"' },
                    { value: '"border_active"' },
                    { value: '"border_default"' },
                    { value: '"button_active"' },
                    { value: '"button_default"' },
                    { value: '"button_tint"' },
                    { value: '"focus_ring"' },
                    { value: '"shadow"' },
                    { value: '"text_high_contrast"' },
                    { value: '"text_low_contrast"' },
                    { value: '"tint_active"' },
                    { value: '"tint_default"' },
                  ],
                },
              },
              flex: {
                defaultValue: null,
                description: "",
                name: "flex",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"0 1 auto"' },
                    { value: '"1 1 auto"' },
                    { value: '"1 1 0%"' },
                    { value: '"1 1 100%"' },
                  ],
                },
              },
              flexGrow: {
                defaultValue: null,
                description: "",
                name: "flexGrow",
                required: !1,
                type: {
                  name: "enum",
                  value: [{ value: '"0"' }, { value: '"1"' }],
                },
              },
              flexShrink: {
                defaultValue: null,
                description: "",
                name: "flexShrink",
                required: !1,
                type: {
                  name: "enum",
                  value: [{ value: '"0"' }, { value: '"1"' }],
                },
              },
              flexWrap: {
                defaultValue: null,
                description: "",
                name: "flexWrap",
                required: !1,
                type: {
                  name: "enum",
                  value: [{ value: '"nowrap"' }, { value: '"wrap"' }],
                },
              },
              fontSize: {
                defaultValue: null,
                description: "",
                name: "fontSize",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"h1"' },
                    { value: '"h2"' },
                    { value: '"h3"' },
                    { value: '"h4"' },
                    { value: '"h5"' },
                    { value: '"h6"' },
                    { value: '"body_lg"' },
                    { value: '"body_md"' },
                    { value: '"body_sm"' },
                    { value: '"body_xl"' },
                    { value: '"body_xs"' },
                    { value: '"h0"' },
                    { value: '"root"' },
                  ],
                },
              },
              fontWeight: {
                defaultValue: null,
                description: "",
                name: "fontWeight",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"normal"' },
                    { value: '"bold"' },
                    { value: '"medium"' },
                    { value: '"light"' },
                    { value: '"extrabold"' },
                    { value: '"semibold"' },
                  ],
                },
              },
              height: {
                defaultValue: null,
                description: "",
                name: "height",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '""' },
                    { value: '"none"' },
                    { value: '"auto"' },
                    { value: '"min-content"' },
                    { value: '"50%"' },
                    { value: '"100%"' },
                    { value: '"100vh"' },
                    { value: '"25%"' },
                    { value: '"25vh"' },
                    { value: '"50vh"' },
                    { value: '"75%"' },
                    { value: '"75vh"' },
                    { value: '"90vh"' },
                    { value: '"spacing_0.25"' },
                    { value: '"spacing_0.5"' },
                    { value: '"spacing_1"' },
                    { value: '"spacing_1.5"' },
                    { value: '"spacing_2"' },
                    { value: '"spacing_3"' },
                    { value: '"spacing_4"' },
                    { value: '"spacing_5"' },
                    { value: '"spacing_6"' },
                  ],
                },
              },
              inset: {
                defaultValue: null,
                description: "",
                name: "inset",
                required: !1,
                type: { name: '"0"' },
              },
              isolation: {
                defaultValue: null,
                description: "",
                name: "isolation",
                required: !1,
                type: { name: '"isolate"' },
              },
              justifyContent: {
                defaultValue: null,
                description: "",
                name: "justifyContent",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"space-around"' },
                    { value: '"space-between"' },
                    { value: '"stretch"' },
                    { value: '"center"' },
                    { value: '"end"' },
                    { value: '"start"' },
                  ],
                },
              },
              left: {
                defaultValue: null,
                description: "",
                name: "left",
                required: !1,
                type: { name: '"0"' },
              },
              lineHeight: {
                defaultValue: null,
                description: "",
                name: "lineHeight",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"h1"' },
                    { value: '"h2"' },
                    { value: '"h3"' },
                    { value: '"h4"' },
                    { value: '"h5"' },
                    { value: '"h6"' },
                    { value: '"body_lg"' },
                    { value: '"body_md"' },
                    { value: '"body_sm"' },
                    { value: '"body_xl"' },
                    { value: '"body_xs"' },
                    { value: '"h0"' },
                    { value: '"root"' },
                  ],
                },
              },
              margin: {
                defaultValue: null,
                description: "",
                name: "margin",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"none"' },
                    { value: '"auto"' },
                    { value: '"spacing_0.25"' },
                    { value: '"spacing_0.5"' },
                    { value: '"spacing_1"' },
                    { value: '"spacing_1.5"' },
                    { value: '"spacing_2"' },
                    { value: '"spacing_3"' },
                    { value: '"spacing_4"' },
                    { value: '"spacing_5"' },
                    { value: '"spacing_6"' },
                  ],
                },
              },
              marginBottom: {
                defaultValue: null,
                description: "",
                name: "marginBottom",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"none"' },
                    { value: '"auto"' },
                    { value: '"spacing_0.25"' },
                    { value: '"spacing_0.5"' },
                    { value: '"spacing_1"' },
                    { value: '"spacing_1.5"' },
                    { value: '"spacing_2"' },
                    { value: '"spacing_3"' },
                    { value: '"spacing_4"' },
                    { value: '"spacing_5"' },
                    { value: '"spacing_6"' },
                  ],
                },
              },
              marginLeft: {
                defaultValue: null,
                description: "",
                name: "marginLeft",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"none"' },
                    { value: '"auto"' },
                    { value: '"spacing_0.25"' },
                    { value: '"spacing_0.5"' },
                    { value: '"spacing_1"' },
                    { value: '"spacing_1.5"' },
                    { value: '"spacing_2"' },
                    { value: '"spacing_3"' },
                    { value: '"spacing_4"' },
                    { value: '"spacing_5"' },
                    { value: '"spacing_6"' },
                  ],
                },
              },
              marginRight: {
                defaultValue: null,
                description: "",
                name: "marginRight",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"none"' },
                    { value: '"auto"' },
                    { value: '"spacing_0.25"' },
                    { value: '"spacing_0.5"' },
                    { value: '"spacing_1"' },
                    { value: '"spacing_1.5"' },
                    { value: '"spacing_2"' },
                    { value: '"spacing_3"' },
                    { value: '"spacing_4"' },
                    { value: '"spacing_5"' },
                    { value: '"spacing_6"' },
                  ],
                },
              },
              marginTop: {
                defaultValue: null,
                description: "",
                name: "marginTop",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"none"' },
                    { value: '"auto"' },
                    { value: '"spacing_0.25"' },
                    { value: '"spacing_0.5"' },
                    { value: '"spacing_1"' },
                    { value: '"spacing_1.5"' },
                    { value: '"spacing_2"' },
                    { value: '"spacing_3"' },
                    { value: '"spacing_4"' },
                    { value: '"spacing_5"' },
                    { value: '"spacing_6"' },
                  ],
                },
              },
              maxHeight: {
                defaultValue: null,
                description: "",
                name: "maxHeight",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '""' },
                    { value: '"none"' },
                    { value: '"auto"' },
                    { value: '"min-content"' },
                    { value: '"50%"' },
                    { value: '"100%"' },
                    { value: '"100vh"' },
                    { value: '"25%"' },
                    { value: '"25vh"' },
                    { value: '"50vh"' },
                    { value: '"75%"' },
                    { value: '"75vh"' },
                    { value: '"90vh"' },
                    { value: '"spacing_0.25"' },
                    { value: '"spacing_0.5"' },
                    { value: '"spacing_1"' },
                    { value: '"spacing_1.5"' },
                    { value: '"spacing_2"' },
                    { value: '"spacing_3"' },
                    { value: '"spacing_4"' },
                    { value: '"spacing_5"' },
                    { value: '"spacing_6"' },
                  ],
                },
              },
              maxWidth: {
                defaultValue: null,
                description: "",
                name: "maxWidth",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '""' },
                    { value: '"none"' },
                    { value: '"auto"' },
                    { value: '"max-content"' },
                    { value: '"min-content"' },
                    { value: '"50%"' },
                    { value: '"100%"' },
                    { value: '"25%"' },
                    { value: '"spacing_0.25"' },
                    { value: '"spacing_0.5"' },
                    { value: '"spacing_1"' },
                    { value: '"spacing_1.5"' },
                    { value: '"spacing_2"' },
                    { value: '"spacing_3"' },
                    { value: '"spacing_4"' },
                    { value: '"spacing_5"' },
                    { value: '"spacing_6"' },
                    { value: '"col_1"' },
                    { value: '"col_10"' },
                    { value: '"col_11"' },
                    { value: '"col_12"' },
                    { value: '"col_2"' },
                    { value: '"col_3"' },
                    { value: '"col_4"' },
                    { value: '"col_5"' },
                    { value: '"col_6"' },
                    { value: '"col_7"' },
                    { value: '"col_8"' },
                    { value: '"col_9"' },
                  ],
                },
              },
              minHeight: {
                defaultValue: null,
                description: "",
                name: "minHeight",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '""' },
                    { value: '"none"' },
                    { value: '"auto"' },
                    { value: '"min-content"' },
                    { value: '"50%"' },
                    { value: '"100%"' },
                    { value: '"100vh"' },
                    { value: '"25%"' },
                    { value: '"25vh"' },
                    { value: '"50vh"' },
                    { value: '"75%"' },
                    { value: '"75vh"' },
                    { value: '"90vh"' },
                    { value: '"spacing_0.25"' },
                    { value: '"spacing_0.5"' },
                    { value: '"spacing_1"' },
                    { value: '"spacing_1.5"' },
                    { value: '"spacing_2"' },
                    { value: '"spacing_3"' },
                    { value: '"spacing_4"' },
                    { value: '"spacing_5"' },
                    { value: '"spacing_6"' },
                  ],
                },
              },
              minWidth: {
                defaultValue: null,
                description: "",
                name: "minWidth",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '""' },
                    { value: '"none"' },
                    { value: '"auto"' },
                    { value: '"max-content"' },
                    { value: '"min-content"' },
                    { value: '"50%"' },
                    { value: '"100%"' },
                    { value: '"25%"' },
                    { value: '"spacing_0.25"' },
                    { value: '"spacing_0.5"' },
                    { value: '"spacing_1"' },
                    { value: '"spacing_1.5"' },
                    { value: '"spacing_2"' },
                    { value: '"spacing_3"' },
                    { value: '"spacing_4"' },
                    { value: '"spacing_5"' },
                    { value: '"spacing_6"' },
                    { value: '"col_1"' },
                    { value: '"col_10"' },
                    { value: '"col_11"' },
                    { value: '"col_12"' },
                    { value: '"col_2"' },
                    { value: '"col_3"' },
                    { value: '"col_4"' },
                    { value: '"col_5"' },
                    { value: '"col_6"' },
                    { value: '"col_7"' },
                    { value: '"col_8"' },
                    { value: '"col_9"' },
                  ],
                },
              },
              overflow: {
                defaultValue: null,
                description: "",
                name: "overflow",
                required: !1,
                type: { name: '"hidden"' },
              },
              overflowY: {
                defaultValue: null,
                description: "",
                name: "overflowY",
                required: !1,
                type: { name: '"auto"' },
              },
              right: {
                defaultValue: null,
                description: "",
                name: "right",
                required: !1,
                type: { name: '"0"' },
              },
              textAlign: {
                defaultValue: null,
                description: "",
                name: "textAlign",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"left"' },
                    { value: '"right"' },
                    { value: '"center"' },
                  ],
                },
              },
              textDecoration: {
                defaultValue: null,
                description: "",
                name: "textDecoration",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"none"' },
                    { value: '"line-through"' },
                    { value: '"underline"' },
                  ],
                },
              },
              textTransform: {
                defaultValue: null,
                description: "",
                name: "textTransform",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"capitalize"' },
                    { value: '"lowercase"' },
                    { value: '"uppercase"' },
                  ],
                },
              },
              top: {
                defaultValue: null,
                description: "",
                name: "top",
                required: !1,
                type: { name: '"0"' },
              },
              whiteSpace: {
                defaultValue: null,
                description: "",
                name: "whiteSpace",
                required: !1,
                type: {
                  name: "enum",
                  value: [{ value: '"normal"' }, { value: '"nowrap"' }],
                },
              },
              zIndex: {
                defaultValue: null,
                description: "",
                name: "zIndex",
                required: !1,
                type: {
                  name: "enum",
                  value: [{ value: '"1"' }, { value: '"-1"' }],
                },
              },
              fontStyle: {
                defaultValue: null,
                description: "",
                name: "fontStyle",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"h1"' },
                    { value: '"h2"' },
                    { value: '"h3"' },
                    { value: '"h4"' },
                    { value: '"h5"' },
                    { value: '"h6"' },
                    { value: '"body_lg"' },
                    { value: '"body_md"' },
                    { value: '"body_sm"' },
                    { value: '"body_xl"' },
                    { value: '"body_xs"' },
                    { value: '"h0"' },
                    { value: '"root"' },
                  ],
                },
              },
              marginX: {
                defaultValue: null,
                description: "",
                name: "marginX",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"none"' },
                    { value: '"auto"' },
                    { value: '"spacing_0.25"' },
                    { value: '"spacing_0.5"' },
                    { value: '"spacing_1"' },
                    { value: '"spacing_1.5"' },
                    { value: '"spacing_2"' },
                    { value: '"spacing_3"' },
                    { value: '"spacing_4"' },
                    { value: '"spacing_5"' },
                    { value: '"spacing_6"' },
                  ],
                },
              },
              marginY: {
                defaultValue: null,
                description: "",
                name: "marginY",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"none"' },
                    { value: '"auto"' },
                    { value: '"spacing_0.25"' },
                    { value: '"spacing_0.5"' },
                    { value: '"spacing_1"' },
                    { value: '"spacing_1.5"' },
                    { value: '"spacing_2"' },
                    { value: '"spacing_3"' },
                    { value: '"spacing_4"' },
                    { value: '"spacing_5"' },
                    { value: '"spacing_6"' },
                  ],
                },
              },
              placeItems: {
                defaultValue: null,
                description: "",
                name: "placeItems",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"stretch"' },
                    { value: '"center"' },
                    { value: '"end"' },
                    { value: '"start"' },
                  ],
                },
              },
              display: {
                defaultValue: null,
                description: "",
                name: "display",
                required: !1,
                type: {
                  name: 'ConditionalStyle<Values<MapLeafNodes<{ block: string; flex: string; grid: string; inline: string; "inline-block": string; "inline-flex": string; none: string; table: string; "table-cell": string; }, CSSVarFunction>, { ...; }>>',
                },
              },
              flexDirection: {
                defaultValue: null,
                description: "",
                name: "flexDirection",
                required: !1,
                type: {
                  name: 'ConditionalStyle<Values<("column" | "column-reverse" | "row" | "row-reverse")[], { defaultClass: string; conditions: { mobile: string; tablet: string; desktop: string; }; }>>',
                },
              },
              gap: {
                defaultValue: null,
                description: "",
                name: "gap",
                required: !1,
                type: {
                  name: 'ConditionalStyle<Values<MapLeafNodes<{ auto: string; none: string; "spacing_0.25": string; "spacing_0.5": string; spacing_1: string; "spacing_1.5": string; spacing_2: string; spacing_3: string; spacing_4: string; spacing_5: string; spacing_6: string; }, CSSVarFunction>, { ...; }>>',
                },
              },
              gridTemplateColumns: {
                defaultValue: null,
                description: "",
                name: "gridTemplateColumns",
                required: !1,
                type: {
                  name: 'ConditionalStyle<Values<MapLeafNodes<{ "1_2": string; "1_3": string; "1x": string; "2_1": string; "2x": string; "3_1": string; "3x": string; "4x": string; "5_7": string; "5x": string; "6x": string; "7_5": string; "7x": string; }, CSSVarFunction>, { ...; }>>',
                },
              },
              padding: {
                defaultValue: null,
                description: "",
                name: "padding",
                required: !1,
                type: {
                  name: 'ConditionalStyle<Values<MapLeafNodes<{ auto: string; none: string; "spacing_0.25": string; "spacing_0.5": string; spacing_1: string; "spacing_1.5": string; spacing_2: string; spacing_3: string; spacing_4: string; spacing_5: string; spacing_6: string; }, CSSVarFunction>, { ...; }>>',
                },
              },
              paddingBottom: {
                defaultValue: null,
                description: "",
                name: "paddingBottom",
                required: !1,
                type: {
                  name: 'ConditionalStyle<Values<MapLeafNodes<{ auto: string; none: string; "spacing_0.25": string; "spacing_0.5": string; spacing_1: string; "spacing_1.5": string; spacing_2: string; spacing_3: string; spacing_4: string; spacing_5: string; spacing_6: string; }, CSSVarFunction>, { ...; }>>',
                },
              },
              paddingLeft: {
                defaultValue: null,
                description: "",
                name: "paddingLeft",
                required: !1,
                type: {
                  name: 'ConditionalStyle<Values<MapLeafNodes<{ auto: string; none: string; "spacing_0.25": string; "spacing_0.5": string; spacing_1: string; "spacing_1.5": string; spacing_2: string; spacing_3: string; spacing_4: string; spacing_5: string; spacing_6: string; }, CSSVarFunction>, { ...; }>>',
                },
              },
              paddingRight: {
                defaultValue: null,
                description: "",
                name: "paddingRight",
                required: !1,
                type: {
                  name: 'ConditionalStyle<Values<MapLeafNodes<{ auto: string; none: string; "spacing_0.25": string; "spacing_0.5": string; spacing_1: string; "spacing_1.5": string; spacing_2: string; spacing_3: string; spacing_4: string; spacing_5: string; spacing_6: string; }, CSSVarFunction>, { ...; }>>',
                },
              },
              paddingTop: {
                defaultValue: null,
                description: "",
                name: "paddingTop",
                required: !1,
                type: {
                  name: 'ConditionalStyle<Values<MapLeafNodes<{ auto: string; none: string; "spacing_0.25": string; "spacing_0.5": string; spacing_1: string; "spacing_1.5": string; spacing_2: string; spacing_3: string; spacing_4: string; spacing_5: string; spacing_6: string; }, CSSVarFunction>, { ...; }>>',
                },
              },
              position: {
                defaultValue: null,
                description: "",
                name: "position",
                required: !1,
                type: {
                  name: 'ConditionalStyle<Values<("absolute" | "relative" | "sticky")[], { defaultClass: string; conditions: { mobile: string; tablet: string; desktop: string; }; }>>',
                },
              },
              width: {
                defaultValue: null,
                description: "",
                name: "width",
                required: !1,
                type: {
                  name: 'ConditionalStyle<Values<{ auto: CSSVarFunction; none: CSSVarFunction; "spacing_0.25": CSSVarFunction; "spacing_0.5": CSSVarFunction; spacing_1: CSSVarFunction; ... 23 more ...; "min-content": CSSVarFunction; }, { ...; }>>',
                },
              },
              paddingX: {
                defaultValue: null,
                description: "",
                name: "paddingX",
                required: !1,
                type: {
                  name: 'ConditionalStyle<Values<MapLeafNodes<{ auto: string; none: string; "spacing_0.25": string; "spacing_0.5": string; spacing_1: string; "spacing_1.5": string; spacing_2: string; spacing_3: string; spacing_4: string; spacing_5: string; spacing_6: string; }, CSSVarFunction>, { ...; }>>',
                },
              },
              paddingY: {
                defaultValue: null,
                description: "",
                name: "paddingY",
                required: !1,
                type: {
                  name: 'ConditionalStyle<Values<MapLeafNodes<{ auto: string; none: string; "spacing_0.25": string; "spacing_0.5": string; spacing_1: string; "spacing_1.5": string; spacing_2: string; spacing_3: string; spacing_4: string; spacing_5: string; spacing_6: string; }, CSSVarFunction>, { ...; }>>',
                },
              },
              labelProps: {
                defaultValue: null,
                description: "",
                name: "labelProps",
                required: !1,
                type: { name: "LabelProps" },
              },
              wrapperProps: {
                defaultValue: null,
                description: "",
                name: "wrapperProps",
                required: !1,
                type: { name: "BoxProps" },
              },
              label: {
                defaultValue: null,
                description: "",
                name: "label",
                required: !1,
                type: { name: "string" },
              },
              errorMessage: {
                defaultValue: null,
                description: "",
                name: "errorMessage",
                required: !1,
                type: { name: "string" },
              },
              invalid: {
                defaultValue: null,
                description: "",
                name: "invalid",
                required: !1,
                type: { name: "boolean" },
              },
              labelTooltip: {
                defaultValue: null,
                description: "Optional tooltip for label",
                name: "labelTooltip",
                required: !1,
                type: { name: "string" },
              },
              size: {
                defaultValue: { value: "md" },
                description: "",
                name: "size",
                required: !1,
                type: {
                  name: "enum",
                  value: [
                    { value: '"lg"' },
                    { value: '"md"' },
                    { value: '"sm"' },
                  ],
                },
              },
              slotLeft: {
                defaultValue: null,
                description: "React node shown on the left side of text area.",
                name: "slotLeft",
                required: !1,
                type: { name: "ReactNode" },
              },
              slotRight: {
                defaultValue: null,
                description: "React node shown on the right side of text area.",
                name: "slotRight",
                required: !1,
                type: { name: "ReactNode" },
              },
              ref: {
                defaultValue: null,
                description:
                  "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
                name: "ref",
                required: !1,
                type: { name: "Ref<HTMLTextAreaElement>" },
              },
            },
          }),
          "undefined" != typeof STORYBOOK_REACT_CLASSES &&
            (STORYBOOK_REACT_CLASSES[
              "src/components/text_area/text_area.comp.tsx#TextArea"
            ] = {
              docgenInfo: TextArea.__docgenInfo,
              name: "TextArea",
              path: "src/components/text_area/text_area.comp.tsx#TextArea",
            });
      } catch (__react_docgen_typescript_loader_error) {}
    },
    "?4f7e": () => {},
  },
]);
